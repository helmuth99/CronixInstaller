Addon, private = ...

PlaterDump = {
  ["target_shady_combat_only"] = false,
  ["extra_icon_use_blizzard_border_color"] = false,
  ["script_data"] = {
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
          ["OptionsValues"] = {
              ["flashColor"] = {
                  0,
                  0.7137255072593689,
                  1,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
          ["Time"] = 1711217101,
          ["url"] = "https://wago.io/GqYRu4scK/14",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 736,
          ["semver"] = "1.2.2",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
          ["SpellIds"] = {
              86331,
              88959,
              156722,
              164973,
              168040,
              168092,
              169840,
              186269,
              196883,
              198595,
              198750,
              198934,
              198962,
              199663,
              200642,
              201298,
              201837,
              208165,
              209033,
              209413,
              211299,
              211406,
              252923,
              253562,
              259092,
              260698,
              260699,
              260700,
              260701,
              260879,
              264024,
              265084,
              272180,
              274383,
              281420,
              367521,
              369399,
              369674,
              371875,
              372225,
              372538,
              373932,
              374544,
              376851,
              377503,
              378155,
              378818,
              381517,
              382249,
              382474,
              385039,
              387564,
              387843,
              390988,
              392576,
              396044,
              396925,
              397386,
              397801,
              400165,
              410760,
              415435,
              426541,
              428103,
              428263,
              200658,
              266036,
              265407,
              164965,
              429176,
              428526,
              418200,
              407124,
              415437,
              264050,
              267824,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Small Alert [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = 14,
          ["Desc"] =
          "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Plays a small animation when the cast start.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1.2,
                  ["Desc"] = "How long is the flash played when the cast starts.",
                  ["Min"] = 0.1,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.6,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "flashColor",
                  ["Value"] = {
                      1,
                      0,
                      1,
                      1,
                  },
                  ["Name"] = "Flash Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the Flash",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
          ["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
          ["Time"] = 1699197387,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
          ["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Revision"] = 116,
          ["Options"] = {
          },
          ["Author"] = "Izimode-Azralon",
          ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Enabled"] = true,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
          ["Name"] = "Aura - Invalidate Unit [Plater]",
          ["PlaterCore"] = 1,
          ["Prio"] = 99,
          ["SpellIds"] = {
              261265,
              261266,
              271590,
          },
          ["Desc"] =
          "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
          ["Time"] = 1703179070,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
          ["Enabled"] = true,
          ["Revision"] = 637,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
          ["SpellIds"] = {
              398151,
              375596,
              377738,
              378149,
          },
          ["Prio"] = 99,
          ["Name"] = "Aura - Buff Alert [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Add the buff name in the trigger box.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "glowEnabled",
                  ["Value"] = false,
                  ["Name"] = "Glow Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "glowColor",
                  ["Value"] = {
                      0.40392156862745,
                      0.003921568627451,
                      0,
                      1,
                  },
                  ["Name"] = "Glow Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "dotsEnabled",
                  ["Value"] = true,
                  ["Name"] = "Dots Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotsColor",
                  ["Value"] = {
                      1,
                      0.32156862745098,
                      0,
                      1,
                  },
                  ["Name"] = "Dots Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
          ["OptionsValues"] = {
              ["dotColor"] = {
                  0.5647059082984924,
                  0.5647059082984924,
                  0.5647059082984924,
                  1,
              },
              ["castBarColor"] = {
                  1,
                  0.4313725829124451,
                  0,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
          ["ScriptType"] = 2,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Time"] = 1711217114,
          ["url"] = "https://wago.io/Now2_IBi2/1",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 891,
          ["semver"] = "1.0.0",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Author"] = "Bombad�o-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
          ["SpellIds"] = {
              259572,
              255371,
              427460,
              429172,
              426500,
              413607,
              412922,
              417481,
              201399,
              411994,
              415770,
              260907,
              260703,
              260741,
              265876,
              263959,
              266225,
              200630,
              200658,
              418200,
              377488,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Very Important [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = 1,
          ["Desc"] =
          "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Plays a big animation when the cast start.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Flash:",
                  ["Name"] = "Flash",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1.2,
                  ["Desc"] = "How long is the flash played when the cast starts.",
                  ["Min"] = 0.1,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.8,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "flashColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Flash Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the Flash",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Shake:",
                  ["Name"] = "Shake",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 0.5,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 1,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 5,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 40,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option13",
                  ["Value"] = 0,
                  ["Name"] = "Option 13",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option14",
                  ["Value"] = "Dot Animation:",
                  ["Name"] = "Dot Animation",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotColor",
                  ["Value"] = {
                      0.56470588235294,
                      0.56470588235294,
                      0.56470588235294,
                      1,
                  },
                  ["Name"] = "Dot Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Adjust the color of the dots around the nameplate",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
                  ["Min"] = -10,
                  ["Key"] = "xOffset",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot X Offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
                  ["Min"] = -10,
                  ["Key"] = "yOffset",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot Y Offset",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option19",
                  ["Value"] = "Cast Bar",
                  ["Name"] = "Option 19",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Use Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Use cast bar color.",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castBarColor",
                  ["Value"] = {
                      0.41176470588235,
                      1,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Cast bar color.",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Time"] = 1699196964,
          ["url"] = "",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
          ["Enabled"] = true,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
          ["Revision"] = 370,
          ["semver"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "					function (scriptTable)\n						--insert code here\n						\n					end\n				",
          ["Desc"] = "Add the debuff name in the trigger box.",
          ["version"] = -1,
          ["Prio"] = 99,
          ["Name"] = "Aura - Debuff Alert [Plater]",
          ["PlaterCore"] = 1,
          ["SpellIds"] = {
          },
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "glowEnabled",
                  ["Value"] = false,
                  ["Name"] = "Glow Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "glowColor",
                  ["Value"] = {
                      0.40392156862745,
                      0.003921568627451,
                      0,
                      1,
                  },
                  ["Name"] = "Glow Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "dotsEnabled",
                  ["Value"] = true,
                  ["Name"] = "Dots Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotsColor",
                  ["Value"] = {
                      1,
                      0.32156862745098,
                      0,
                      1,
                  },
                  ["Name"] = "Dots Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Time"] = 1711197536,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 722,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Author"] = "Izimode-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
          ["SpellIds"] = {
              375943,
              385958,
              388623,
              377034,
              374361,
              381525,
              386660,
              384699,
              153501,
              153686,
              154442,
              192018,
              219488,
              372087,
              391726,
              391723,
              377383,
              388976,
              370764,
              387067,
              391118,
              391136,
              382233,
              209027,
              212031,
              207261,
              207979,
              198888,
              199805,
              199050,
              191508,
              152792,
              265540,
              226304,
              393432,
              375327,
              372202,
              209495,
              369409,
              260894,
              226406,
              193505,
              375348,
              257426,
              255952,
              257870,
              413147,
              383107,
              377559,
              388060,
              376170,
              384524,
              375351,
              390111,
              369791,
              369573,
              369563,
              369335,
              369061,
              375727,
              265016,
              265019,
              260793,
              260292,
              272457,
              272609,
              269843,
              183465,
              226296,
              188169,
              183088,
              410873,
              411012,
              88308,
              382708,
              375251,
              375439,
              372311,
              373742,
              372201,
              374533,
              377204,
              413529,
              408141,
              412215,
              197974,
              200913,
              164357,
              169179,
              428293,
              169929,
              201226,
              204667,
              198379,
              200768,
              253239,
              250258,
              255567,
              194956,
              427510,
              426645,
              412505,
              412129,
              419351,
              401482,
              404916,
              200345,
              200261,
              198641,
              265372,
              271174,
              264694,
              264923,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Frontal Cone [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Produces an effect to indicate the spell will hit players in front of the enemy.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option4",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Set the alpha of the moving arrow",
                  ["Min"] = 0,
                  ["Key"] = "arrowAlpha",
                  ["Value"] = 0.73,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Time that takes for an arrow to travel from the to right.",
                  ["Min"] = 0,
                  ["Key"] = "animSpeed",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Animation Speed",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "desaturateArrow",
                  ["Value"] = false,
                  ["Name"] = "Use White Arrow",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "If enabled, the arrow color will be desaturated.",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
          ["Time"] = 1701990708,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
          ["Icon"] = 1029718,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 282,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
          ["Author"] = "Celian-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
          ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Fixate [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Show above the nameplate who is the player fixated",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
          ["Time"] = 1701991514,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
          ["Icon"] = 136048,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
          ["Revision"] = 146,
          ["Options"] = {
          },
          ["Author"] = "Celian-Sylvanas",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
          ["Enabled"] = true,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
          ["Name"] = "UnitPower [Plater]",
          ["PlaterCore"] = 1,
          ["Prio"] = 99,
          ["SpellIds"] = {
          },
          ["Desc"] = "Show the energy amount above the nameplate",
          ["NpcNames"] = {
              "Guardian of Yogg-Saron",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
              ["castbarColor"] = {
                  1,
                  0.4313725829124451,
                  0,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Time"] = 1703521925,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 1429,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              396640,
              372743,
              377389,
              387955,
              386546,
              384808,
              386024,
              387615,
              387606,
              225100,
              211401,
              211470,
              192563,
              152818,
              156776,
              398206,
              153524,
              396073,
              396018,
              345202,
              377950,
              385578,
              375596,
              263365,
              388392,
              395859,
              395872,
              397914,
              209410,
              215433,
              384194,
              392451,
              392924,
              397889,
              153395,
              396812,
              387975,
              265089,
              278755,
              266106,
              272183,
              265523,
              202181,
              374080,
              374045,
              372223,
              400386,
              367500,
              372711,
              209413,
              207980,
              257397,
              257736,
              382787,
              374699,
              377402,
              369602,
              369465,
              369400,
              381593,
              265091,
              265433,
              382791,
              376780,
              369365,
              257784,
              88010,
              410870,
              266209,
              342797,
              413044,
              204243,
              279118,
              225562,
              264390,
              265346,
              264407,
              411300,
              412378,
              412233,
              407891,
              416139,
              429176,
              165213,
              169839,
              225573,
              278444,
              164887,
              168082,
              76813,
              227913,
              265368,
              200630,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Big Alert [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option3",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Cast Bar Color Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "When enabled, changes the cast bar color,",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castbarColor",
                  ["Value"] = {
                      1,
                      0.43137254901961,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the cast bar.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                  ["Min"] = 0.05,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.4,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Increases the cast bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 5,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Cast Bar Height Mod",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 2,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 40,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
          ["OptionsValues"] = {
              ["targetingColor"] = {
                  1,
                  0.8666667342186,
                  0.090196080505848,
                  1,
              },
              ["option1"] = {
                  1,
                  1,
                  1,
                  1,
              },
          },
          ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1701990707,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
          ["Icon"] = 841383,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 292,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Tecno-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["SpellIds"] = {
              "spawn of g'huun",
              "smuggled crawg",
              "sergeant bainbridge",
              "blacktooth scrapper",
              "irontide grenadier",
              "feral bloodswarmer",
              "earthrager",
              "crawler mine",
              "rezan",
          },
          ["Prio"] = 99,
          ["Name"] = "Fixate On You [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
          ["Options"] = {
              {
                  ["Type"] = 1,
                  ["Key"] = "targetingColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Fixate Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Fixate Nameplate Color",
              },
          },
          ["NpcNames"] = {
              "187638",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
          ["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
          ["Time"] = 1701990753,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
          ["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
          ["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Revision"] = 49,
          ["Options"] = {
          },
          ["Author"] = "抹了油的大叔-白银之手",
          ["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
          ["Name"] = "NameplaterColor with Special Buff ID",
          ["PlaterCore"] = 1,
          ["Prio"] = 99,
          ["SpellIds"] = {
              277242,
          },
          ["Desc"] = "NameplaterColor with Special Buff ID",
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
          ["Time"] = 1701558432,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
          ["Icon"] = 2175503,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 545,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
          ["Author"] = "Bombad o-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              240446,
              385339,
              198077,
              210261,
              360857,
              273577,
              389446,
          },
          ["Prio"] = 99,
          ["Name"] = "Explosion Affix M+ [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
          ["Options"] = {
              {
                  ["Type"] = 2,
                  ["Max"] = 6,
                  ["Desc"] = "Increases the cast bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Cast Bar Height Mod",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castBarColor",
                  ["Value"] = {
                      1,
                      0.5843137254902,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Changes the cast bar color to this one.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option6",
                  ["Value"] = "Arrow:",
                  ["Name"] = "Arrow:",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "showArrow",
                  ["Value"] = true,
                  ["Name"] = "Show Arrow",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Arrow alpha.",
                  ["Min"] = 0,
                  ["Key"] = "arrowAlpha",
                  ["Value"] = 1,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 12,
                  ["Desc"] = "Arrow Width.",
                  ["Min"] = 4,
                  ["Key"] = "arrowWidth",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Width",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 12,
                  ["Desc"] = "Arrow Height.",
                  ["Min"] = 4,
                  ["Key"] = "arrowHeight",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Height",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option13",
                  ["Value"] = 0,
                  ["Name"] = "Option 13",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option12",
                  ["Value"] = "Dot Animation:",
                  ["Name"] = "Dot Animation:",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotColor",
                  ["Value"] = {
                      1,
                      0.6156862745098,
                      0,
                      1,
                  },
                  ["Name"] = "Dot Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Adjust the color of the dot animation.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dot X Offset",
                  ["Min"] = -10,
                  ["Key"] = "xOffset",
                  ["Value"] = 4,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot X Offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dot Y Offset",
                  ["Min"] = -10,
                  ["Key"] = "yOffset",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot Y Offset",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "Option 18",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option17",
                  ["Value"] = "Nameplate Color",
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useNameplateColor",
                  ["Value"] = false,
                  ["Name"] = "Change Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Change Nameplate Color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "healthBarColor",
                  ["Value"] = {
                      1,
                      0.1843137294054,
                      0,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Health Bar Color",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
          ["Time"] = 1703514788,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
          ["Icon"] = 135024,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
          ["Revision"] = 82,
          ["Options"] = {
          },
          ["Enabled"] = false,
          ["Author"] = "Izimode-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Desc"] =
          "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
          ["Prio"] = 99,
          ["Name"] = "Color Change [Plater]",
          ["PlaterCore"] = 1,
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
          },
          ["NpcNames"] = {
              "141851",
          },
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
      },
      {
          ["ConstructorCode"] =
          "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
          ["Time"] = 1722354815,
          ["Temp_ConstructorCode"] =
          "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
          ["Icon"] = 133006,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
          ["Revision"] = 59,
          ["Options"] = {
          },
          ["Author"] = "Izimode-Azralon",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
          ["Enabled"] = true,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
          ["Name"] = "Aura - Border Color [Plater]",
          ["PlaterCore"] = 1,
          ["Prio"] = 99,
          ["SpellIds"] = {
          },
          ["Desc"] =
          "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
          ["Time"] = 1701983051,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 377,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
          ["Author"] = "Izimode-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Aura - Blink by Time Left [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option10",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option17",
                  ["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 17",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option10",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "blinkEnabled",
                  ["Value"] = true,
                  ["Name"] = "Blink Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "set to 'false' to disable blink",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "glowEnabled",
                  ["Value"] = true,
                  ["Name"] = "Glow Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "set to 'false' to disable glows",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "changeNameplateColor",
                  ["Value"] = false,
                  ["Name"] = "Change NamePlate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "set to 'true' to enable nameplate color change",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "in seconds, affects the blink effect only",
                  ["Min"] = 1,
                  ["Key"] = "timeleftToBlink",
                  ["Value"] = 3,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Timeleft to Blink",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 3,
                  ["Desc"] = "time to complete a blink loop",
                  ["Min"] = 0.5,
                  ["Key"] = "blinkSpeed",
                  ["Value"] = 1,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Blink Speed",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
                  ["Min"] = 0.1,
                  ["Key"] = "blinkMaxAlpha",
                  ["Value"] = 0.6,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Blink Max Alpha",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "blinkColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Blink Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "color of the blink",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "nameplateColor",
                  ["Value"] = {
                      0.28627450980392,
                      0.003921568627451,
                      0,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "nameplate color if ChangeNameplateColor is true",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option10",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "timerColorEnabled",
                  ["Value"] = true,
                  ["Name"] = "Timer Color Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "set to 'false' to disable changes in the color of the time left text",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "in seconds, affects the color of the text",
                  ["Min"] = 1,
                  ["Key"] = "timeLeftWarning",
                  ["Value"] = 8,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Time Left Warning",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "in seconds, affects the color of the text",
                  ["Min"] = 1,
                  ["Key"] = "timeLeftCritical",
                  ["Value"] = 3,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Time Left Critical",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "warningColor",
                  ["Value"] = {
                      1,
                      0.87058823529412,
                      0,
                      1,
                  },
                  ["Name"] = "Warning Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "color when the time left entered in a warning zone",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "criticalColor",
                  ["Value"] = {
                      1,
                      0.074509803921569,
                      0,
                      1,
                  },
                  ["Name"] = "Critical Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "color when the time left is critical",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
          ["ScriptType"] = 2,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Time"] = 1711123181,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
          ["Icon"] = "INTERFACE\\ICONS\\Spell_Fire_FelFlameStrike",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Revision"] = 1394,
          ["Options"] = {
          },
          ["Enabled"] = false,
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Desc"] =
          "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
          ["Prio"] = 99,
          ["Name"] = "M+ Important Spells [Plater]",
          ["PlaterCore"] = 1,
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
              258153,
              258313,
              274569,
              278020,
              261635,
              272700,
              268030,
              278567,
              278602,
              258128,
              257791,
              258938,
              265089,
              272183,
              269972,
              270901,
              270492,
              263215,
              268797,
              262554,
              253517,
              255041,
              250368,
              278504,
              266106,
              268309,
              269302,
              263202,
              278755,
              272180,
              263066,
              267273,
              265912,
              274438,
              268317,
              268375,
              276767,
              264105,
              265876,
              270464,
              265468,
              256897,
              280604,
              268702,
              253583,
              250096,
              278456,
              262092,
              257270,
              267818,
              262540,
              263318,
              263959,
              257069,
              256849,
              267459,
              253544,
              268008,
              267981,
              272659,
              264396,
              264390,
              274400,
              269029,
              272827,
              269266,
              263912,
              258864,
              256955,
              265540,
              270003,
              270507,
              257337,
              268415,
              275907,
              268865,
              260669,
              260280,
              265541,
              256709,
              277596,
              276268,
              265372,
              263905,
              265781,
              257170,
              268846,
              270514,
              258622,
              258199,
              256627,
              259711,
              258917,
              263891,
              268027,
              268348,
              269313,
              272711,
              271174,
              268260,
              269399,
              268239,
              264574,
              261563,
              257288,
              257757,
              267899,
              255741,
              264757,
              260894,
              263583,
              276292,
              272874,
              264101,
              264407,
              271456,
              262515,
              275192,
              270084,
              257785,
              267237,
              266951,
              267433,
              255577,
              270891,
              267357,
              258338,
              257169,
              270927,
              273995,
              260926,
              264027,
              267257,
              253721,
              260924,
              263309,
              266206,
              268187,
              260067,
              274507,
              276068,
              263278,
              258317,
              256594,
              268391,
              268230,
              260852,
              267763,
              268706,
              264734,
              288693,
              288694,
              270590,
              290787,
              72286,
          },
          ["NpcNames"] = {
          },
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
          ["Time"] = 1703179113,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
          ["Icon"] = 132221,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
          ["Revision"] = 43,
          ["Options"] = {
          },
          ["Author"] = "Kastfall-Azralon",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
          ["Enabled"] = false,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
          ["Name"] = "Jadefire [BOD] - Fire Shield",
          ["PlaterCore"] = 1,
          ["Prio"] = 99,
          ["SpellIds"] = {
              286425,
          },
          ["Desc"] = "Alert when the unit has the Fire Shield to be broken.",
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["OptionsValues"] = {
              ["castColor"] = {
                  {
                      "200682",
                      "darkslateblue",
                  },
                  {
                      "192307",
                      "goldenrod",
                  },
                  {
                      "196838",
                      "maroon",
                  },
                  {
                      "193827",
                      "darkgreen",
                  },
                  {
                      "194043",
                      "darkgreen",
                  },
                  {
                      "156718",
                      "DRUID",
                  },
                  {
                      "395859",
                      "ROGUE",
                  },
              },
              ["useNameplateColor"] = false,
              ["castBarColor"] = {
                  1,
                  0.9058824181556702,
                  0.02745098248124123,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
          ["Time"] = 1711217073,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 740,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
          ["Author"] = "Bombad o-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
          ["SpellIds"] = {
              383823,
              382670,
              388537,
              372851,
              200682,
              192307,
              196838,
              193827,
              194043,
              209410,
              211464,
              361180,
              156718,
              395859,
              358320,
              374045,
              386757,
              367500,
              370225,
              376200,
              372107,
              388923,
              376934,
              384899,
              373960,
              374724,
              385551,
              259732,
              373424,
              373084,
              87618,
              255041,
              428926,
              76634,
              200050,
              197546,
              198079,
              199193,
              266181,
              253544,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Ultra Important [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Plays a special animation showing the explosion time.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 6,
                  ["Desc"] = "Increases the health bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Health Bar Height Mod",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useNameplateColor",
                  ["Value"] = true,
                  ["Name"] = "Change Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Change Nameplate Color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "healthBarColor",
                  ["Value"] = {
                      1,
                      0.5843137254902,
                      0,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Nameplate Color",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Use Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Show an arrow above Use Cast Bar Color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castBarColor",
                  ["Value"] = {
                      1,
                      0.431372,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Cast Bar Color",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option6",
                  ["Value"] = "Arrow:",
                  ["Name"] = "Arrow:",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "showArrow",
                  ["Value"] = true,
                  ["Name"] = "Show Arrow",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Arrow alpha.",
                  ["Min"] = 0,
                  ["Key"] = "arrowAlpha",
                  ["Value"] = 0.5,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 12,
                  ["Desc"] = "Arrow Width.",
                  ["Min"] = 4,
                  ["Key"] = "arrowWidth",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Width",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 12,
                  ["Desc"] = "Arrow Height.",
                  ["Min"] = 4,
                  ["Key"] = "arrowHeight",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Height",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option13",
                  ["Value"] = 0,
                  ["Name"] = "Option 13",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option12",
                  ["Value"] = "Dot Animation:",
                  ["Name"] = "Dot Animation:",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotColor",
                  ["Value"] = {
                      1,
                      0.6156862745098,
                      0,
                      1,
                  },
                  ["Name"] = "Dot Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Adjust the color of the dot animation.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dot X Offset",
                  ["Min"] = -10,
                  ["Key"] = "xOffset",
                  ["Value"] = 4,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot X Offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dot Y Offset",
                  ["Min"] = -10,
                  ["Key"] = "yOffset",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot Y Offset",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "castColor",
                  ["Value"] = {
                      {
                          "200682",
                          "darkslateblue",
                      },
                      {
                          "192307",
                          "goldenrod",
                      },
                      {
                          "196838",
                          "maroon",
                      },
                      {
                          "193827",
                          "darkgreen",
                      },
                      {
                          "194043",
                          "darkgreen",
                      },
                      {
                          "156718",
                          "DRUID",
                      },
                      {
                          "395859",
                          "ROGUE",
                      },
                  },
                  ["Name"] = "Color List by SpellId",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
          ["Time"] = 1711123193,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
          ["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 74,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
          ["Author"] = "Aelerolor-Torghast",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Auto Set Skull",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Auto set skull marker",
          ["Options"] = {
              {
                  ["Type"] = 5,
                  ["Key"] = "option1",
                  ["Value"] = "Auto set a raid target Skull on the unit.",
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option2",
                  ["Value"] = 0,
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "onlyInCombat",
                  ["Value"] = false,
                  ["Name"] = "Only in Combat",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Set the mark only if the unit is in combat.",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1711197671,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
          ["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
          ["Enabled"] = true,
          ["Revision"] = 222,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Aelerolor-Torghast",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Countdown",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1701991523,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
          ["Icon"] = 136048,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
          ["Enabled"] = true,
          ["Revision"] = 240,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Celian-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Unit - Show Energy [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Show the energy amount above the nameplate.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option3",
                  ["Value"] = "Show the power of the unit above the nameplate.",
                  ["Name"] = "script desc",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option3",
                  ["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
                  ["Name"] = "add trigger",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option2",
                  ["Value"] = 0,
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "showLater",
                  ["Value"] = true,
                  ["Name"] = "Show at 80% of Energy",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option2",
                  ["Value"] = 0,
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 32,
                  ["Desc"] = "Text size.",
                  ["Min"] = 8,
                  ["Key"] = "fontSize",
                  ["Value"] = 16,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Text Size",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "fontColor",
                  ["Value"] = {
                      0.80392156862745,
                      0.80392156862745,
                      0.80392156862745,
                      1,
                  },
                  ["Name"] = "Font Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the text.",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "outline",
                  ["Value"] = true,
                  ["Name"] = "Enable Text Outline",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "If enabled, the text uses outline.",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 38, 0)\n        unitFrame.spitefulTexture:SetSize(25, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
          ["OptionsValues"] = {
              ["bgColor"] = {
                  0.3960784673690796,
                  0.02745098248124123,
                  1,
                  0.8100000023841858,
              },
              ["bgWidth"] = 25,
              ["targetingColor"] = {
                  0.3960784673690796,
                  1,
                  0.8000000715255737,
                  1,
              },
              ["textColor"] = {
                  0.9294118285179138,
                  1,
                  0.9764706492424011,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
          ["Time"] = 1715212257,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 38, 0)\n        unitFrame.spitefulTexture:SetSize(25, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
          ["Icon"] = 135945,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
          ["Enabled"] = true,
          ["Revision"] = 248,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
          ["Author"] = "Symantec-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "M+ Spiteful",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Time to die Spiteful affix",
          ["Options"] = {
              {
                  ["Type"] = 5,
                  ["Key"] = "option12",
                  ["Value"] = "Time to Die",
                  ["Name"] = "Time to Die",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 50,
                  ["Desc"] = "",
                  ["Min"] = 10,
                  ["Key"] = "bgWidth",
                  ["Value"] = 27,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Width",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "bgColor",
                  ["Value"] = {
                      0.50588235294118,
                      0.070588235294118,
                      1,
                      1,
                  },
                  ["Name"] = "Background Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 24,
                  ["Desc"] = "",
                  ["Min"] = 7,
                  ["Key"] = "textSize",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Text Size",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "textColor",
                  ["Value"] = {
                      1,
                      0.5843137254902,
                      0,
                      1,
                  },
                  ["Name"] = "Text Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option11",
                  ["Value"] = "Targeting",
                  ["Name"] = "Targeting",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "switchTargetName",
                  ["Value"] = true,
                  ["Name"] = "Show Target instead of Name",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useTargetingColor",
                  ["Value"] = true,
                  ["Name"] = "Change Color if targeting You",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "targetingColor",
                  ["Value"] = {
                      0.070588235294118,
                      0.61960784313725,
                      0,
                      1,
                  },
                  ["Name"] = "Color if targeting You",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option11",
                  ["Value"] = 0,
                  ["Name"] = "Option 11",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
          },
          ["NpcNames"] = {
              "174773",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
              ["timerList"] = {
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Time"] = 1711197638,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 1222,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Alert + Timer [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Cast start animation settings",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Cast Bar Color Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "When enabled, changes the cast bar color,",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castbarColor",
                  ["Value"] = {
                      1,
                      0.43137254901961,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the cast bar.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                  ["Min"] = 0.05,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.4,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Increases the cast bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 5,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Cast Bar Height Mod",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 2,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 40,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "timerList",
                  ["Value"] = {
                  },
                  ["Name"] = "Timer (Key is SpellId and Value is Time)",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
          ["Time"] = 1711197651,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 888,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
          ["Author"] = "Bombad o-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Important Target [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Highlight the target name",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Shows the target name in a separate box",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Flash:",
                  ["Name"] = "Flash",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1.2,
                  ["Desc"] = "How long is the flash played when the cast starts.",
                  ["Min"] = 0.1,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.8,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "flashColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Flash Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the Flash",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] = "Shake:",
                  ["Name"] = "Shake",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 0.5,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 1,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 5,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 40,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option13",
                  ["Value"] = 0,
                  ["Name"] = "Option 13",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option14",
                  ["Value"] = "Dot Animation:",
                  ["Name"] = "Dot Animation",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotColor",
                  ["Value"] = {
                      0.56470588235294,
                      0.56470588235294,
                      0.56470588235294,
                      1,
                  },
                  ["Name"] = "Dot Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Adjust the color of the dots around the nameplate",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
                  ["Min"] = -10,
                  ["Key"] = "xOffset",
                  ["Value"] = 8,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot X Offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
                  ["Min"] = -10,
                  ["Key"] = "yOffset",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dot Y Offset",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option18",
                  ["Value"] = 0,
                  ["Name"] = "blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option19",
                  ["Value"] = "Cast Bar",
                  ["Name"] = "Option 19",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Use Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Use cast bar color.",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castBarColor",
                  ["Value"] = {
                      0.41176470588235,
                      1,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Cast bar color.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option27",
                  ["Value"] = 0,
                  ["Name"] = "Option 27",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option28",
                  ["Value"] = "Target Options",
                  ["Name"] = "Option 28",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 32,
                  ["Desc"] = "",
                  ["Min"] = 8,
                  ["Key"] = "targetNameSize",
                  ["Value"] = 14,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Text Size",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "colorByClass",
                  ["Value"] = true,
                  ["Name"] = "Use Class Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "textColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Text Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "targetBgColor",
                  ["Value"] = {
                      0,
                      0,
                      0,
                      0.98467203229666,
                  },
                  ["Name"] = "Background Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "targetBgBorderColor",
                  ["Value"] = {
                      0,
                      0,
                      0,
                      1,
                  },
                  ["Name"] = "Border Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 160,
                  ["Desc"] = "",
                  ["Min"] = 30,
                  ["Key"] = "targetFrameWidth",
                  ["Value"] = 90,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Frame Width",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 32,
                  ["Desc"] = "",
                  ["Min"] = 8,
                  ["Key"] = "targetFrameHeight",
                  ["Value"] = 20,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Frame Height",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
          ["Time"] = 1699197391,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Icon"] = 610472,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
          ["Enabled"] = true,
          ["Revision"] = 68,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
          ["Author"] = "Keyspell-Azralon",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Aura is Shield [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnHideCode"] =
          "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1703205560,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
          ["Temp_OnHideCode"] =
          "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Enabled"] = false,
          ["Revision"] = 41,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Ditador-Azralon",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
              426662,
              426663,
          },
          ["Prio"] = 99,
          ["Name"] = "Fixate by Unit Buff [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
          ["Options"] = {
              {
                  ["Type"] = 1,
                  ["Key"] = "nameplateColor",
                  ["Value"] = {
                      0,
                      0.55686274509804,
                      0.035294117647059,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
              ["castColor"] = {
                  {
                      "385536",
                      "maroon",
                  },
                  {
                      "198750",
                      "midnightblue",
                  },
                  {
                      "360850",
                      "lime",
                  },
                  {
                      "212784",
                      "deepskyblue",
                  },
                  {
                      "207980",
                      "midnightblue",
                  },
                  {
                      "199033",
                      "gold",
                  },
                  {
                      "199034",
                      "gold",
                  },
                  {
                      "200969",
                      "orange",
                  },
                  {
                      "394512",
                      "indigo",
                  },
                  {
                      "397881",
                      "deepskyblue",
                  },
                  {
                      "396020",
                      "khaki",
                  },
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Time"] = 1711197635,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 550,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Author"] = "Terciob",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              376644,
              373017,
              386781,
              384823,
              372735,
              385536,
              392398,
              375596,
              387135,
              360850,
              212784,
              199033,
              199034,
              200969,
              394512,
              397881,
              396020,
              374430,
              373201,
              384353,
              265376,
              193941,
              411002,
              169445,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Glowing [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Show a different animation for the cast bar.",
          ["Options"] = {
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "Need a /reload",
                  ["Min"] = 5,
                  ["Key"] = "segmentsAmount",
                  ["Value"] = 7,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Amount of Segments",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "sparkColor",
                  ["Value"] = {
                      0.95686274509804,
                      1,
                      0.98823529411765,
                      1,
                  },
                  ["Name"] = "Spark Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "glowColor",
                  ["Value"] = {
                      0.85882352941176,
                      0.43137254901961,
                      1,
                      1,
                  },
                  ["Name"] = "Glow Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "castColor",
                  ["Value"] = {
                      {
                          "385536",
                          "maroon",
                      },
                      {
                          "198750",
                          "midnightblue",
                      },
                      {
                          "360850",
                          "lime",
                      },
                      {
                          "212784",
                          "deepskyblue",
                      },
                      {
                          "207980",
                          "midnightblue",
                      },
                      {
                          "199033",
                          "gold",
                      },
                      {
                          "199034",
                          "gold",
                      },
                      {
                          "200969",
                          "orange",
                      },
                      {
                          "394512",
                          "indigo",
                      },
                      {
                          "397881",
                          "deepskyblue",
                      },
                      {
                          "396020",
                          "khaki",
                      },
                  },
                  ["Name"] = "Cast Color by SpellID",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Time"] = 1711197641,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
          ["Icon"] = 134229,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
          ["Enabled"] = false,
          ["Revision"] = 42,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
              191284,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Effect After Cast [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Time"] = 1703521926,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 167,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Author"] = "Butazzul-Valdrakken",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
          ["SpellIds"] = {
              385916,
              386063,
              388822,
              373087,
              397785,
              106864,
              193660,
              198263,
              387910,
              370766,
              375591,
              384336,
              209404,
              209378,
              210875,
              396001,
              397899,
              386559,
              382555,
              258672,
              258777,
              257756,
              257784,
              256405,
              256589,
              393793,
              388046,
              375079,
              390290,
              369811,
              369703,
              226287,
              410999,
              372561,
              256882,
              172578,
              412063,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Circle AoE [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
          ["Options"] = {
              {
                  ["Type"] = 2,
                  ["Max"] = 0.3,
                  ["Desc"] = "Rotation Duration",
                  ["Min"] = 0.1,
                  ["Key"] = "rotationDuration",
                  ["Value"] = 0.15,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Rotation Duration",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option5",
                  ["Value"] = 0,
                  ["Name"] = "Option 5",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1.5,
                  ["Desc"] = "Animation Start Duration",
                  ["Min"] = 0,
                  ["Key"] = "animStartDuration",
                  ["Value"] = 0.3,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Animation Start Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
                  ["Min"] = 0,
                  ["Key"] = "textureStartAlpha",
                  ["Value"] = 1,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Texture Start Alpha",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option5",
                  ["Value"] = 0,
                  ["Name"] = "Option 5",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1.2,
                  ["Desc"] = "Texture Scale",
                  ["Min"] = 0.6,
                  ["Key"] = "textureScale",
                  ["Value"] = 0.8,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Texture Scale",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Texture Alpha",
                  ["Min"] = 0,
                  ["Key"] = "textureAlpha",
                  ["Value"] = 1,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Texture Alpha",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "textureColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Texture Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Texture Color",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
          ["OptionsValues"] = {
              ["fillColor"] = {
                  1,
                  1,
                  1,
                  1,
              },
              ["indicatorAlpha"] = 0.798833966255188,
              ["indicatorColor"] = {
                  1,
                  1,
                  1,
                  1,
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
          ["Time"] = 1703179032,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
          ["Enabled"] = true,
          ["Revision"] = 152,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
          ["Author"] = "Aelerolor-Torghast",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Health Markers [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
          ["Options"] = {
              {
                  ["Type"] = 5,
                  ["Key"] = "option1",
                  ["Value"] =
                  "Add markers into the health bar to remind you about boss abilities at life percent.",
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "",
                  ["Value"] = 0,
                  ["Name"] = "blank line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "indicatorColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Vertical Line Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Indicator color.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Indicator alpha.",
                  ["Min"] = 0.1,
                  ["Key"] = "indicatorAlpha",
                  ["Value"] = 0.79,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Vertical Line Alpha",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "",
                  ["Value"] = 0,
                  ["Name"] = "blank line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "fillColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      1,
                  },
                  ["Name"] = "Fill Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Fill color.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Fill alpha.",
                  ["Min"] = 0,
                  ["Key"] = "fillAlpha",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Fill Alpha",
              },
          },
          ["NpcNames"] = {
              "197697",
              "59544",
              "186227",
              "184020",
              "91005",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["OptionsValues"] = {
              ["npcColor"] = {
                  {
                      "196548",
                      "forestgreen",
                  },
                  {
                      "195580",
                      "forestgreen",
                  },
                  {
                      "195820",
                      "forestgreen",
                  },
                  {
                      "195821",
                      "forestgreen",
                  },
                  {
                      "189886",
                      "forestgreen",
                  },
                  {
                      "75966",
                      "forestgreen",
                  },
                  {
                      "102019 ",
                      "forestgreen",
                  },
                  {
                      "187159",
                      "forestgreen",
                  },
                  {
                      "194897",
                      "forestgreen",
                  },
                  {
                      "104251",
                      "forestgreen",
                  },
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
          ["Time"] = 1711123197,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 579,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
          ["Author"] = "Izimode-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Important [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option6",
                  ["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
                  ["Name"] = "Option 6",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "changeNameplateColor",
                  ["Value"] = true,
                  ["Name"] = "Change Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "change to true to change the color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "nameplateColor",
                  ["Value"] = {
                      1,
                      0,
                      0.52549019607843,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Nameplate Color",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 6,
                  ["Desc"] = "increase the nameplate height by this value",
                  ["Min"] = 0,
                  ["Key"] = "nameplateSizeOffset",
                  ["Value"] = 3,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Nameplate Size Offset",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "dotsColor",
                  ["Value"] = {
                      1,
                      0.71372550725937,
                      0,
                      0.56313106417656,
                  },
                  ["Name"] = "Dot Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Dot Color",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option10",
                  ["Value"] = "Extra Texture",
                  ["Name"] = "Extra Texture",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "Extra Texture",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "showExtraTexture",
                  ["Value"] = false,
                  ["Name"] = "Show Extra Texture",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Show Extra Texture",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "skullColor",
                  ["Value"] = {
                      1,
                      0.46274509803922,
                      0,
                      1,
                  },
                  ["Name"] = "Texture Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Texture Color",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Alpha",
                  ["Min"] = 0,
                  ["Key"] = "skullAlpha",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 2,
                  ["Desc"] = "Scale",
                  ["Min"] = 0.4,
                  ["Key"] = "skullScale",
                  ["Value"] = 0.6,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Scale",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "npcColor",
                  ["Value"] = {
                      {
                          "196548",
                          "forestgreen",
                      },
                      {
                          "195580",
                          "forestgreen",
                      },
                      {
                          "195820",
                          "forestgreen",
                      },
                      {
                          "195821",
                          "forestgreen",
                      },
                      {
                          "189886",
                          "forestgreen",
                      },
                      {
                          "75966",
                          "forestgreen",
                      },
                      {
                          "102019 ",
                          "forestgreen",
                      },
                      {
                          "187159",
                          "forestgreen",
                      },
                      {
                          "194897",
                          "forestgreen",
                      },
                      {
                          "104251",
                          "forestgreen",
                      },
                  },
                  ["Name"] = "Npc Color By NpcID",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] = "Key is the npcID, value is the color name",
              },
          },
          ["NpcNames"] = {
              "196548",
              "195580",
              "195820",
              "195821",
              "189886",
              "75966",
              "102019",
              "187159",
              "194897",
              "104251",
              "101326",
              "189669",
              "192464",
              190381,
              92538,
              192464,
              131009,
              127315,
              133361,
              136330,
              214117,
              212483,
              101008,
              194745,
              190426,
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Time"] = 1701983056,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Icon"] = "interface/addons/plater/images/add_id_icon",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 162,
          ["semver"] = "",
          ["Temp_Initialization"] =
          "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] =
          "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Tag Number [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
          ["Options"] = {
          },
          ["NpcNames"] = {
              "195138",
              "192955",
              "190294",
              "76518",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Time"] = 1711197615,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 897,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              392640,
              397888,
              381517,
              385568,
              209033,
              385029,
              374563,
              377341,
              369675,
              369365,
              369411,
              278961,
              202108,
              88186,
              200630,
              255824,
              252781,
              250096,
              200248,
              197797,
              264520,
              418202,
              201839,
              412012,
              411958,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Quick Flash [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Play a very fast flash when the cast start",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option3",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Cast Bar Color Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "When enabled, changes the cast bar color,",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castBarColor",
                  ["Value"] = {
                      1,
                      0.43137254901961,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the cast bar.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                  ["Min"] = 0.05,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Increases the cast bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 0,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Cast Bar Height Mod",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.1,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 200,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 10,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 25,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 30,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
          ["OptionsValues"] = {
              ["npcColor"] = {
                  {
                      "189893",
                      "olivedrab",
                  },
                  {
                      "190187",
                      "olivedrab",
                  },
                  {
                      "99922",
                      "olivedrab",
                  },
                  {
                      "153285",
                      "olivedrab",
                  },
                  {
                      "104822",
                      "olivedrab",
                  },
              },
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
          ["Time"] = 1703179130,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
          ["Icon"] = "interface/addons/plater/media/exclamation_64",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 170,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Warning [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Change the color of  add",
          ["Options"] = {
              {
                  ["Type"] = 4,
                  ["Key"] = "useNameplateColor",
                  ["Value"] = true,
                  ["Name"] = "Change Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Change Nameplate Color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "healthBarColor",
                  ["Value"] = {
                      1,
                      0.43921571969986,
                      0.4588235616684,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Nameplate Color",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option5",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useFlash",
                  ["Value"] = true,
                  ["Name"] = "Flash Nameplate",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Flash Nameplate",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "npcColor",
                  ["Value"] = {
                      {
                          "189893",
                          "olivedrab",
                      },
                      {
                          "190187",
                          "olivedrab",
                      },
                      {
                          "99922",
                          "olivedrab",
                      },
                      {
                          "153285",
                          "olivedrab",
                      },
                      {
                          "104822",
                          "olivedrab",
                      },
                  },
                  ["Name"] = "NpcID to Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
              },
          },
          ["NpcNames"] = {
              "190187",
              "189893",
              "99922",
              "104822",
              129758,
              186696,
              101075,
              100818,
              98081,
              52019,
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
          ["OptionsValues"] = {
              ["nameplateColor"] = {
                  1,
                  0,
                  0.2666666805744171,
                  1,
              },
              ["useNameplateScale"] = true,
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
          ["Time"] = 1703369577,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "interface/addons/plater/media/duck_64",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 116,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Non Elite Trash [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "",
          ["Options"] = {
              {
                  ["Type"] = 4,
                  ["Key"] = "useNameplateColor",
                  ["Value"] = false,
                  ["Name"] = "Change Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Change Nameplate Color",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "nameplateColor",
                  ["Value"] = {
                      0.062745101749897,
                      0.062745101749897,
                      0.094117656350136,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Nameplate Color",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useNameplateScale",
                  ["Value"] = true,
                  ["Name"] = "Change Nameplate Scale",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Change Nameplate Scale",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Nameplate Scale",
                  ["Min"] = 0,
                  ["Key"] = "scale",
                  ["Value"] = 0.8,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Nameplate Scale",
              },
          },
          ["NpcNames"] = {
              "194622",
              "190205",
              "197398",
              "77006",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1711197538,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
          ["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 117,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
          ["SpellIds"] = {
              373688,
              391050,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Shield Interrupt [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "When the caster has a shield and only when the shield is removed the cast can be interrupted",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Time"] = 1711217056,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 516,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Author"] = "Terciob",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              377004,
              381516,
              196543,
              199726,
              200291,
              268202,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - Stop Casting [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "Just stop casting",
          ["Options"] = {
              {
                  ["Type"] = 2,
                  ["Max"] = 20,
                  ["Desc"] = "Need a /reload",
                  ["Min"] = 5,
                  ["Key"] = "segmentsAmount",
                  ["Value"] = 20,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Amount of Segments",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "sparkColor",
                  ["Value"] = {
                      0.95686274509804,
                      1,
                      0.98823529411765,
                      1,
                  },
                  ["Name"] = "Spark Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "glowColor",
                  ["Value"] = {
                      0.85882352941176,
                      0.43137254901961,
                      1,
                      1,
                  },
                  ["Name"] = "Glow Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
              ["useBackground"] = false,
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1699197024,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Icon"] = "interface/addons/plater/media/radio_64",
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 112,
          ["semver"] = "",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Huugg-Valdrakken",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
          ["SpellIds"] = {
          },
          ["Prio"] = 99,
          ["Name"] = "Add - Explode on Die [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] = "",
          ["Options"] = {
              {
                  ["Type"] = 4,
                  ["Key"] = "useReverse",
                  ["Value"] = false,
                  ["Name"] = "Reverse Health Bar",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option6",
                  ["Value"] = 0,
                  ["Name"] = "Option 6",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useShake",
                  ["Value"] = false,
                  ["Name"] = "Enable Shake",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 0.05,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Amplitude",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 70,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Frequency",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Option 7",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useBackground",
                  ["Value"] = true,
                  ["Name"] = "Show Red Background",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Show Red Background",
              },
          },
          ["NpcNames"] = {
              "194895",
              "105703",
              "59598",
              "58319",
              200388,
              189299,
              131402,
              135052,
          },
      },
      {
          ["ConstructorCode"] =
          "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable, modTable)\n    \n    --settings\n    envTable.TextAboveNameplate = modTable.config[\"textAboveNameplate\"]\n    envTable.NameplateColor = modTable.config[\"nameplateColor\"]\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    -- local spellList = {\n    --     [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n    --     [355389] = \"Relentless Haunt\",\n    --     [338610] = \"Morbid Fixation\",\n    --     [338606] = \"Morbid Fixation\",\n    --     [358711] = \"Rage\"\n    -- }\n    \n    local spellList = modTable.config[\"spellList\"];\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
          ["OptionsValues"] = {
              ["nameplateColor"] = {
                  0,
                  1,
                  0.63529413938522,
                  1,
              },
              ["spellList"] = {
                  {
                      "358711",
                      "Rage",
                  },
                  {
                      "338606",
                      "Morbid Fixation",
                  },
                  {
                      "338610",
                      "Morbid Fixation",
                  },
                  {
                      "355389",
                      "Relentless Haunt",
                  },
                  {
                      "321891",
                      "Freeze Tag Fixation",
                  },
              },
          },
          ["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \nend\n\n\n",
          ["ScriptType"] = 3,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            \n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Time"] = 1703205570,
          ["url"] = "https://wago.io/6KIY-sN-q/1",
          ["Temp_ConstructorCode"] =
          "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable, modTable)\n    \n    --settings\n    envTable.TextAboveNameplate = modTable.config[\"textAboveNameplate\"]\n    envTable.NameplateColor = modTable.config[\"nameplateColor\"]\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    -- local spellList = {\n    --     [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n    --     [355389] = \"Relentless Haunt\",\n    --     [338610] = \"Morbid Fixation\",\n    --     [338606] = \"Morbid Fixation\",\n    --     [358711] = \"Rage\"\n    -- }\n    \n    local spellList = modTable.config[\"spellList\"];\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
          ["Icon"] = 841383,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 401,
          ["semver"] = "1.0.0",
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            \n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["Author"] = "Tecno-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \nend\n\n\n",
          ["SpellIds"] = {
              "spawn of g'huun",
              "smuggled crawg",
              "sergeant bainbridge",
              "blacktooth scrapper",
              "irontide grenadier",
              "feral bloodswarmer",
              "earthrager",
              "crawler mine",
              "rezan",
          },
          ["Prio"] = 99,
          ["Name"] = "Fixate On You [Plater]",
          ["PlaterCore"] = 1,
          ["version"] = 1,
          ["Desc"] =
          "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
          ["Options"] = {
              {
                  ["Type"] = 1,
                  ["Key"] = "nameplateColor",
                  ["Value"] = {
                      1,
                      0,
                      1,
                      1,
                  },
                  ["Name"] = "Nameplate Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "The color you want to turn the nameplate.",
              },
              {
                  ["Type"] = 3,
                  ["Key"] = "textAboveNameplate",
                  ["Value"] = "\"** On You **\"",
                  ["Name"] = "Text Above Nameplate",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
                  ["Desc"] = "The text to be displayed above the nameplate.",
              },
              {
                  ["Type"] = 7,
                  ["Key"] = "spellList",
                  ["Value"] = {
                      {
                          "358711",
                          "Rage",
                      },
                      {
                          "338606",
                          "Morbid Fixation",
                      },
                      {
                          "338610",
                          "Morbid Fixation",
                      },
                      {
                          "355389",
                          "Relentless Haunt",
                      },
                      {
                          "321891",
                          "Freeze Tag Fixation",
                      },
                      {
                          "370597",
                          "Kill Order",
                      },
                  },
                  ["Name"] = "Spell List",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
                  ["Desc"] =
                  "The list of spells that will trigger the script. The key is the spell id and the value is the en-US name of the spell.",
              },
          },
          ["NpcNames"] = {
              "Frostbound Devoted",
              "Illusionary Vulpin",
              "Separation Assistant",
              "Dark Sentinel",
              "187638",
              "Flamescale Tarasek",
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["ScriptType"] = 1,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
          ["Time"] = 1699197389,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
          ["Icon"] = 236209,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
          ["Enabled"] = true,
          ["Revision"] = 23,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
          ["Author"] = "Tiranaa-Azralon",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["SpellIds"] = {
              372743,
              372749,
              384933,
          },
          ["Prio"] = 99,
          ["Name"] = "Aura While Casting [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
          ["Options"] = {
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Time"] = 1711197622,
          ["url"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
          ["Icon"] = 4038101,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
          ["Enabled"] = false,
          ["Revision"] = 77,
          ["semver"] = "",
          ["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["Author"] = "Ditador-Azralon",
          ["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
          ["SpellIds"] = {
              388886,
              209676,
              377912,
          },
          ["Prio"] = 99,
          ["Name"] = "Cast - On Going Cast [P]",
          ["PlaterCore"] = 1,
          ["version"] = -1,
          ["Desc"] =
          "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
          ["Options"] = {
              {
                  ["Type"] = 1,
                  ["Key"] = "dotColor",
                  ["Value"] = {
                      1,
                      1,
                      1,
                      0.41662168502808,
                  },
                  ["Name"] = "Dots Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Dots Color",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dots X Offset",
                  ["Min"] = -10,
                  ["Key"] = "xOffset",
                  ["Value"] = 0,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dots X Offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Dots Y Offset",
                  ["Min"] = -10,
                  ["Key"] = "yOffset",
                  ["Value"] = 0,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Dots Y Offset",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Adjust how fast the blinking occurs",
                  ["Min"] = 0.2,
                  ["Key"] = "speed",
                  ["Value"] = 0.4,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Blink Speed",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Min amount of transparency the blink can have",
                  ["Min"] = 0,
                  ["Key"] = "minAlpha",
                  ["Value"] = 0,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Blink Min Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Max amount of transparency the blink can have",
                  ["Min"] = 0,
                  ["Key"] = "maxAlpha",
                  ["Value"] = 0.5,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Blink Max Alpha",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "blinkColor",
                  ["Value"] = {
                      1,
                      0.019607843831182,
                      0,
                      1,
                  },
                  ["Name"] = "Blink Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the blinking texture",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
          ["ScriptType"] = 2,
          ["UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Time"] = 1722370360,
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["url"] = "",
          ["Icon"] = 1958262,
          ["Enabled"] = true,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
          ["Revision"] = 907,
          ["semver"] = "",
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
          ["Desc"] =
          "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
          ["Author"] = "Izimode-Azralon",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
          ["SpellIds"] = {
              388623,
              384699,
              153501,
              153686,
              154442,
              192018,
              219488,
              387067,
              391136,
              382233,
              209027,
              212031,
              207261,
              207979,
              198888,
              199805,
              199050,
              191508,
              152792,
              265540,
              226304,
              375327,
              372202,
              209495,
              260894,
              226406,
              193505,
              375348,
              257426,
              255952,
              257870,
              413147,
              383107,
              377559,
              390111,
              369791,
              369335,
              375727,
              265016,
              265019,
              260793,
              260292,
              272457,
              272609,
              269843,
              183465,
              226296,
              188169,
              183088,
              410873,
              411012,
              88308,
              373742,
              374533,
              377204,
              204667,
              255567,
              201226,
              200768,
              265372,
              413529,
              408141,
              412215,
              412129,
              412505,
              419351,
              200261,
              200345,
              197974,
              200913,
              164357,
              169179,
              426645,
              428293,
              169929,
              388976,
              385958,
              377383,
              377034,
              374361,
              370764,
              386660,
              391118,
              372222,
              385578,
              384696,
              384868,
              387629,
              382277,
              376892,
              375943,
              376683,
              372087,
              391726,
              391723,
              381525,
              388060,
              376170,
              393432,
              384524,
              375351,
              382708,
              375251,
              375439,
              372311,
              372201,
              369563,
              369573,
              369409,
              369061,
              382712,
              434824,
              453161,
              443500,
              434779,
              451496,
              451543,
              439621,
              440218,
              431494,
              450854,
              449130,
              448640,
              321968,
              331718,
              340160,
              324323,
              333488,
              333477,
              256627,
              269029,
              257862,
              462216,
              447395,
              448105,
              432198,
              441119,
              448619,
              449090,
              427323,
              426893,
              427616,
              445457,
              422414,
              427025,
          },
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Temp_UpdateCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
          ["Name"] = "CAST - FRONTALS",
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Option 1",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Produces an effect to indicate the spell will hit players in front of the enemy.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option4",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 4",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option3",
                  ["Value"] = 0,
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Set the alpha of the moving arrow",
                  ["Min"] = 0,
                  ["Key"] = "arrowAlpha",
                  ["Value"] = 0.73,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Arrow Alpha",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Time that takes for an arrow to travel from the to right.",
                  ["Min"] = 0,
                  ["Key"] = "animSpeed",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Animation Speed",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "desaturateArrow",
                  ["Value"] = false,
                  ["Name"] = "Use White Arrow",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "If enabled, the arrow color will be desaturated.",
              },
          },
          ["NpcNames"] = {
          },
      },
      {
          ["ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
          ["OptionsValues"] = {
          },
          ["Temp_OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["ScriptType"] = 2,
          ["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["Time"] = 1722438505,
          ["Temp_ConstructorCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
          ["url"] = "",
          ["NpcNames"] = {
          },
          ["Enabled"] = true,
          ["Temp_OnHideCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
          ["Revision"] = 1677,
          ["Options"] = {
              {
                  ["Type"] = 6,
                  ["Key"] = "option1",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option2",
                  ["Value"] =
                  "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
                  ["Name"] = "Option 2",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "option3",
                  ["Value"] =
                  "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
                  ["Name"] = "Option 3",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option4",
                  ["Value"] = 0,
                  ["Name"] = "Blank Space",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "useCastbarColor",
                  ["Value"] = true,
                  ["Name"] = "Cast Bar Color Enabled",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "When enabled, changes the cast bar color,",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "castbarColor",
                  ["Value"] = {
                      1,
                      0.4313725490196079,
                      0,
                      1,
                  },
                  ["Name"] = "Cast Bar Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Color of the cast bar.",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "option7",
                  ["Value"] = 0,
                  ["Name"] = "Blank Line",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
                  ["Min"] = 0.05,
                  ["Key"] = "flashDuration",
                  ["Value"] = 0.4,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Flash Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 10,
                  ["Desc"] = "Increases the cast bar height by this value",
                  ["Min"] = 0,
                  ["Key"] = "castBarHeight",
                  ["Value"] = 5,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Cast Bar Height Mod",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] =
                  "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
                  ["Min"] = 0.1,
                  ["Key"] = "shakeDuration",
                  ["Value"] = 0.2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Shake Duration",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "How strong is the shake.",
                  ["Min"] = 2,
                  ["Key"] = "shakeAmplitude",
                  ["Value"] = 8,
                  ["Name"] = "Shake Amplitude",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Fraction"] = false,
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 80,
                  ["Desc"] = "How fast the shake moves.",
                  ["Min"] = 1,
                  ["Key"] = "shakeFrequency",
                  ["Value"] = 40,
                  ["Name"] = "Shake Frequency",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Fraction"] = false,
              },
          },
          ["Desc"] =
          "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
          ["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
          ["Author"] = "Tercioo-Sylvanas",
          ["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
          ["OnShowCode"] =
          "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
          ["SpellIds"] = {
              387955,
              387615,
              387606,
              225100,
              211401,
              211470,
              192563,
              152818,
              156776,
              398206,
              153524,
              396073,
              396018,
              345202,
              263365,
              395859,
              395872,
              397914,
              209410,
              215433,
              392924,
              397889,
              153395,
              265089,
              278755,
              266106,
              272183,
              265523,
              202181,
              374080,
              400386,
              209413,
              207980,
              257397,
              257736,
              382787,
              369602,
              369465,
              381593,
              265091,
              265433,
              382791,
              376780,
              257784,
              88010,
              410870,
              266209,
              342797,
              413044,
              204243,
              279118,
              255041,
              259572,
              200630,
              225562,
              201399,
              264390,
              265346,
              263959,
              278444,
              265876,
              264407,
              266225,
              415770,
              415437,
              412922,
              417481,
              418200,
              411300,
              412378,
              412233,
              407891,
              416139,
              227913,
              164965,
              164887,
              168082,
              427460,
              429176,
              271174,
              165213,
              169839,
              413607,
              388392,
              388863,
              396640,
              377389,
              387975,
              387564,
              375596,
              386546,
              384365,
              386025,
              386024,
              386015,
              387125,
              387411,
              387596,
              384808,
              373395,
              397394,
              372743,
              384194,
              373017,
              367500,
              367503,
              377950,
              372711,
              374544,
              385029,
              384633,
              374339,
              374045,
              395694,
              374563,
              374699,
              376171,
              377341,
              377402,
              395427,
              372223,
              384161,
              378282,
              369675,
              369365,
              369411,
              436841,
              392451,
              434802,
              434793,
              436322,
              448248,
              448047,
              433841,
              443430,
              443433,
              442536,
              452162,
              453840,
              431309,
              450756,
              451097,
              431333,
              426283,
              449455,
              429545,
              445207,
              429109,
              322938,
              324914,
              326046,
              340544,
              337235,
              322450,
              335143,
              324293,
              327130,
              256957,
              275826,
              272571,
              454440,
              451871,
              76711,
              324776,
              427356,
              424419,
              424420,
              423051,
              444743,
              437721,
              440687,
              441627,
              430805,
              432959,
              426295,
              426145,
              427157,
          },
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Name"] = "CAST - MUST INTERRUPT",
          ["semver"] = "",
          ["Icon"] = 1305153,
          ["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
      },
  },
  ["url"] = "https://wago.io/xlCdA3th7/38",
  ["aura2_y_offset"] = 0,
  ["buffs_on_aura2"] = true,
  ["health_selection_overlay"] = "Cronix",
  ["expansion_triggerwipe"] = {
      [9] = true,
  },
  ["cast_statusbar_color_nointerrupt"] = {
      0.49411767721176,
      0.49803924560547,
      0.50196081399918,
      0.96000000089407,
  },
  ["color_override_colors"] = {
      [3] = {
          0.61568629741669,
          0.18823531270027,
          0.21176472306252,
      },
      [4] = {
          0.7764706611633301,
          0.6980392336845398,
          0.4666666984558106,
      },
      [5] = {
          0.3960784673690796,
          0.6509804129600525,
          0.3960784673690796,
      },
  },
  ["npc_cache"] = {
      [40788] = {
          "Mindbender Ghur'sha",
          "Throne of the Tides",
          "enUS",
      },
      [169421] = {
          "Felguard",
          "Brackenhide Hollow",
      },
      [194241] = {
          "Vile Rothexer",
          "Brackenhide Hollow",
          "enUS",
      },
      [190403] = {
          "Glacial Proto-Dragon",
          "Halls of Infusion",
          "enUS",
      },
      [195265] = {
          "Stormcaller Arynga",
          "The Nokhud Offensive",
          "enUS",
      },
      [183495] = {
          "Twisted Worldeater",
          "Sepulcher of the First Ones",
      },
      [99200] = {
          "Dresaron",
          "Darkheart Thicket",
          "enUS",
      },
      [190404] = {
          "Subterranean Proto-Dragon",
          "Halls of Infusion",
      },
      [190405] = {
          "Infuser Sariya",
          "Halls of Infusion",
          "enUS",
      },
      [133345] = {
          "Feckless Assistant",
          "The MOTHERLODE!!",
      },
      [164562] = {
          "Depraved Houndmaster",
          "Halls of Atonement",
      },
      [183497] = {
          "Foul Controller",
          "Sepulcher of the First Ones",
      },
      [164563] = {
          "Vicious Gargon",
          "Halls of Atonement",
      },
      [210109] = {
          "Earth Infused Golem",
          "The Stonevault",
      },
      [169425] = {
          "Felhound",
          "Brackenhide Hollow",
      },
      [196548] = {
          "Ancient Branch",
          "Algeth'ar Academy",
          "enUS",
      },
      [168658] = {
          "Forsworn Devastator",
          "Spires of Ascension",
      },
      [138465] = {
          "Ashvane Cannoneer",
          "Siege of Boralus",
      },
      [169426] = {
          "Infernal",
          "Brackenhide Hollow",
      },
      [200387] = {
          "Shambling Infester",
          "Temple of the Jade Serpent",
      },
      [180429] = {
          "Adorned Starseer",
          "Tazavesh, the Veiled Market",
      },
      [217531] = {
          "Ixin",
          "Ara-Kara, City of Echoes",
      },
      [98691] = {
          "Risen Scout",
          "Black Rook Hold",
          "enUS",
      },
      [169428] = {
          "Wrathguard",
          "Brackenhide Hollow",
      },
      [151773] = {
          "Junkyard D.0.G.",
          "Operation: Mechagon",
      },
      [217533] = {
          "Atik",
          "Ara-Kara, City of Echoes",
      },
      [164567] = {
          "Ingra Maloch",
          "Mists of Tirna Scithe",
      },
      [169429] = {
          "Shivarra",
          "Brackenhide Hollow",
      },
      [141283] = {
          "Kul Tiran Halberd",
          "Siege of Boralus",
      },
      [209090] = {
          "Tindral Sageswift",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [169430] = {
          "Ur'zul",
          "Brackenhide Hollow",
      },
      [136934] = {
          "Weapons Tester",
          "The MOTHERLODE!!",
      },
      [141284] = {
          "Kul Tiran Wavetender",
          "Siege of Boralus",
      },
      [180433] = {
          "Wandering Pulsar",
          "Tazavesh, the Veiled Market",
      },
      [131817] = {
          "Cragmaw the Infested",
          "The Underrot",
      },
      [102019] = {
          "Stormforged Obliterator",
          "Halls of Valor",
      },
      [189901] = {
          "Warlord Sargha",
          "Neltharus",
          "enUS",
      },
      [141285] = {
          "Kul Tiran Marksman",
          "Siege of Boralus",
      },
      [131818] = {
          "Marked Sister",
          "Waycrest Manor",
      },
      [98949] = {
          "Smashspite the Hateful",
          "Black Rook Hold",
          "enUS",
      },
      [200137] = {
          "Depraved Mistweaver",
          "Temple of the Jade Serpent",
      },
      [168153] = {
          "Plagueroc",
          "Plaguefall",
      },
      [131819] = {
          "Coven Diviner",
          "Waycrest Manor",
          "enUS",
      },
      [228540] = {
          "Nightfall Shadowmage",
          "The Dawnbreaker",
      },
      [196044] = {
          "Unruly Textbook",
          "Algeth'ar Academy",
          "enUS",
      },
      [184018] = {
          "Bromach",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [100485] = {
          "Soul-torn Vanguard",
          "Black Rook Hold",
          "enUS",
      },
      [176598] = {
          "Torment Golem",
          "Torghast, Tower of the Damned",
      },
      [102788] = {
          "Felspite Dominator",
          "Black Rook Hold",
          "enUS",
      },
      [129527] = {
          "Bilge Rat Buccaneer",
          "Freehold",
      },
      [196045] = {
          "Corrupted Manafiend",
          "Algeth'ar Academy",
          "enUS",
      },
      [101637] = {
          "Valarjar Aspirant",
          "Halls of Valor",
      },
      [131821] = {
          "Faceless Maiden",
          "Waycrest Manor",
          "enUS",
      },
      [187602] = {
          "Qalashi Scaleripper",
          "10.0 Dragon Isles",
      },
      [175576] = {
          "Containment Cell",
          "Tazavesh, the Veiled Market",
      },
      [184020] = {
          "Hulking Berserker",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [39960] = {
          "Deep Murloc Drudge",
          "Throne of the Tides",
          "enUS",
      },
      [100486] = {
          "Risen Arcanist",
          "Black Rook Hold",
          "enUS",
      },
      [44566] = {
          "Ozumat",
          "Throne of the Tides",
          "enUS",
      },
      [178392] = {
          "Gatewarden Zo'mazz",
          "Tazavesh, the Veiled Market",
      },
      [133870] = {
          "Diseased Lasher",
          "The Underrot",
      },
      [184022] = {
          "Stonevault Geomancer",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [98696] = {
          "Illysanna Ravencrest",
          "Black Rook Hold",
          "enUS",
      },
      [129529] = {
          "Blacktooth Scrapper",
          "Freehold",
      },
      [113537] = {
          "Emberhusk Dominator",
          "Neltharion's Lair",
      },
      [131825] = {
          "Sister Briar",
          "Waycrest Manor",
          "enUS",
      },
      [178139] = {
          "Murkbrine Shellcrusher",
          "Tazavesh, the Veiled Market",
      },
      [133361] = {
          "Wasting Servant",
          "Waycrest Manor",
          "enUS",
      },
      [164578] = {
          "Stitchflesh's Creation",
          "The Necrotic Wake",
      },
      [150250] = {
          "Pistonhead Blaster",
          "Operation: Mechagon",
      },
      [178141] = {
          "Murkbrine Scalebinder",
          "Tazavesh, the Veiled Market",
      },
      [137713] = {
          "Big Money Crab",
          "The MOTHERLODE!!",
      },
      [150251] = {
          "Pistonhead Mechanic",
          "Operation: Mechagon",
      },
      [178142] = {
          "Murkbrine Fishmancer",
          "Tazavesh, the Veiled Market",
      },
      [137458] = {
          "Rotting Spore",
          "The Underrot",
      },
      [199124] = {
          "Primalist Chillblaster",
          "Vault of the Incarnates",
          "enUS",
      },
      [126845] = {
          "Captain Jolly",
          "Freehold",
      },
      [131318] = {
          "Elder Leaxa",
          "The Underrot",
      },
      [168420] = {
          "Forsworn Champion",
          "Spires of Ascension",
      },
      [150253] = {
          "Weaponized Crawler",
          "Operation: Mechagon",
      },
      [168932] = {
          "Doomguard",
          "Brackenhide Hollow",
      },
      [82579] = {
          "Grom'kar Far Seer",
          "Grimrail Depot",
      },
      [129788] = {
          "Irontide Bonesaw",
          "Freehold",
      },
      [190426] = {
          "Decay Totem",
          "Brackenhide Hollow",
          "enUS",
      },
      [137716] = {
          "Bottom Feeder",
          "The MOTHERLODE!!",
      },
      [197847] = {
          "Gnawbone Splintershield",
          "10.0 Dragon Isles",
      },
      [177889] = {
          "Mawforged Souljudge",
          "Sanctum of Domination",
      },
      [168934] = {
          "Enraged Spirit",
          "De Other Side",
      },
      [45912] = {
          "Wild Vortex",
          "The Vortex Pinnacle",
      },
      [177891] = {
          "Mawforged Summoner",
          "Sanctum of Domination",
      },
      [86547] = {
          "Venom Sprayer",
          "The Everbloom",
      },
      [177892] = {
          "Mawforged Goliath",
          "Sanctum of Domination",
      },
      [168425] = {
          "Forsworn Annihilator",
          "Spires of Ascension",
      },
      [168681] = {
          "Forsworn Helion",
          "Spires of Ascension",
      },
      [197595] = {
          "Earthwrought Smasher",
          "Vault of the Incarnates",
          "enUS",
      },
      [40923] = {
          "Unstable Corruption",
          "Throne of the Tides",
          "enUS",
      },
      [94224] = {
          "Petrifying Totem",
          "Neltharion's Lair",
      },
      [202969] = {
          "Empty Recollection",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [134139] = {
          "Shrine Templar",
          "Shrine of the Storm",
      },
      [172265] = {
          "Remnant of Fury",
          "Sanguine Depths",
      },
      [160495] = {
          "Maniacal Soulbinder",
          "Theater of Pain",
      },
      [186339] = {
          "Teera",
          "The Nokhud Offensive",
          "enUS",
      },
      [193760] = {
          "Surging Ruiner",
          "Vault of the Incarnates",
          "enUS",
      },
      [192481] = {
          "Decaying Slime",
          "Brackenhide Hollow",
          "enUS",
      },
      [81432] = {
          "Grom'kar Technician",
          "Iron Docks",
      },
      [114312] = {
          "Moroes",
          "Return to Karazhan",
      },
      [196576] = {
          "Spellbound Scepter",
          "Algeth'ar Academy",
          "enUS",
      },
      [127106] = {
          "Irontide Officer",
          "Freehold",
      },
      [168942] = {
          "Death Speaker",
          "De Other Side",
      },
      [196577] = {
          "Spellbound Battleaxe",
          "Algeth'ar Academy",
          "enUS",
      },
      [131585] = {
          "Enthralled Guard",
          "Waycrest Manor",
          "enUS",
      },
      [134144] = {
          "Living Current",
          "Shrine of the Storm",
      },
      [197857] = {
          "Gutstabber",
          "Brackenhide Hollow",
      },
      [102287] = {
          "Emberhusk Dominator",
          "Neltharion's Lair",
      },
      [131586] = {
          "Banquet Steward",
          "Waycrest Manor",
          "enUS",
      },
      [205790] = {
          "Time-Lost Smack-o-Tron",
          "Dawn of the Infinite",
          "enUS",
      },
      [101008] = {
          "Stinging Swarm",
          "Black Rook Hold",
          "enUS",
      },
      [135169] = {
          "Spirit Drain Totem",
          "The Underrot",
      },
      [131587] = {
          "Bewitched Captain",
          "Waycrest Manor",
          "enUS",
      },
      [191206] = {
          "Primalist Mage",
          "Vault of the Incarnates",
          "enUS",
      },
      [57109] = {
          "Minion of Doubt",
          "Temple of the Jade Serpent",
      },
      [40925] = {
          "Tainted Sentry",
          "Throne of the Tides",
          "enUS",
      },
      [98706] = {
          "Commander Shemdah'sohn",
          "Black Rook Hold",
          "enUS",
      },
      [86552] = {
          "Gorged Burster",
          "The Everbloom",
      },
      [162038] = {
          "Regal Mistdancer",
          "Sanguine Depths",
      },
      [130435] = {
          "Addled Thug",
          "The MOTHERLODE!!",
      },
      [45915] = {
          "Armored Mistral",
          "The Vortex Pinnacle",
      },
      [81819] = {
          "Everbloom Naturalist",
          "The Everbloom",
          "enUS",
      },
      [184300] = {
          "Ebonstone Golem",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [162039] = {
          "Wicked Oppressor",
          "Sanguine Depths",
      },
      [170483] = {
          "Atal'ai Deathwalker's Spirit",
          "De Other Side",
      },
      [76446] = {
          "Shadowmoon Enslaver",
          "Shadowmoon Burial Grounds",
      },
      [184301] = {
          "Cavern Seeker",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [162040] = {
          "Grand Overseer",
          "Sanguine Depths",
      },
      [130436] = {
          "Off-Duty Laborer",
          "The MOTHERLODE!!",
      },
      [134150] = {
          "Runecarver Sorn",
          "Shrine of the Storm",
      },
      [114316] = {
          "Baroness Dorothea Millstipe",
          "Return to Karazhan",
      },
      [81820] = {
          "Everbloom Mender",
          "The Everbloom",
          "enUS",
      },
      [213216] = {
          "Speaker Dorlita",
          "The Stonevault",
      },
      [173044] = {
          "Stitching Assistant",
          "The Necrotic Wake",
      },
      [224731] = {
          "Web Marauder",
          "City of Threads",
      },
      [184303] = {
          "Skittering Crawler",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [137478] = {
          "Queen Wasi",
          "Kings' Rest",
      },
      [156157] = {
          "Coldheart Ascendant",
          "Torghast, Tower of the Damned",
      },
      [131849] = {
          "Crazed Marksman",
          "Waycrest Manor",
          "enUS",
      },
      [95766] = {
          "Crazed Razorbeak",
          "Darkheart Thicket",
          "enUS",
      },
      [114317] = {
          "Lady Catriona Von'Indi",
          "Return to Karazhan",
      },
      [224732] = {
          "Covert Webmancer",
          "City of Threads",
      },
      [127111] = {
          "Irontide Oarsman",
          "Freehold",
      },
      [131850] = {
          "Maddened Survivalist",
          "Waycrest Manor",
          "enUS",
      },
      [191469] = {
          "Streamside Scythid",
          "10.0 Dragon Isles",
      },
      [98965] = {
          "Kur'talos Ravencrest",
          "Black Rook Hold",
          "enUS",
      },
      [127879] = {
          "Shieldbearer of Zul",
          "Atal'Dazar",
          "enUS",
      },
      [83613] = {
          "Koramar",
          "Iron Docks",
      },
      [178165] = {
          "Coastwalker Goliath",
          "Tazavesh, the Veiled Market",
      },
      [199659] = {
          "Warlord Kagni",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [86684] = {
          "Feral Lasher",
          "The Everbloom",
          "enUS",
      },
      [212453] = {
          "Ghastly Voidsoul",
          "The Stonevault",
      },
      [170490] = {
          "Atal'ai High Priest",
          "De Other Side",
      },
      [150276] = {
          "Heavy Scrapbot",
          "Operation: Mechagon",
      },
      [164861] = {
          "Spriggan Barkbinder",
          "De Other Side",
      },
      [114319] = {
          "Lady Keira Berrybuck",
          "Return to Karazhan",
      },
      [162047] = {
          "Insatiable Brute",
          "Sanguine Depths",
      },
      [96664] = {
          "Valarjar Runecarver",
          "Halls of Valor",
      },
      [134157] = {
          "Shadow-Borne Warrior",
          "Kings' Rest",
      },
      [216293] = {
          "Trilling Attendant",
          "Ara-Kara, City of Echoes",
      },
      [56792] = {
          "Figment of Doubt",
          "Temple of the Jade Serpent",
      },
      [137484] = {
          "King A'akul",
          "Kings' Rest",
      },
      [95769] = {
          "Mindshattered Screecher",
          "Darkheart Thicket",
          "enUS",
      },
      [171772] = {
          "Mistveil Defender",
          "Mists of Tirna Scithe",
      },
      [162049] = {
          "Vestige of Doubt",
          "Sanguine Depths",
      },
      [168446] = {
          "Skeletal Monstrosity",
          "The Necrotic Wake",
      },
      [174843] = {
          "Stoneborn Maitre D'",
          "Castle Nathria",
      },
      [205804] = {
          "Risen Dragon",
          "Dawn of the Infinite",
          "enUS",
      },
      [208363] = {
          "Urctos",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [137486] = {
          "Queen Patlaa",
          "Kings' Rest",
      },
      [102295] = {
          "Emberhusk Dominator",
          "Neltharion's Lair",
      },
      [178171] = {
          "Stormforged Guardian",
          "Tazavesh, the Veiled Market",
      },
      [180474] = {
          "Soul Reaver",
          "Sanctum of Domination",
      },
      [131858] = {
          "Thornguard",
          "Waycrest Manor",
          "enUS",
      },
      [138255] = {
          "Ashvane Spotter",
          "Siege of Boralus",
      },
      [134417] = {
          "Deepsea Ritualist",
          "Shrine of the Storm",
      },
      [208365] = {
          "Aerwynn",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [182778] = {
          "Collapsing Quasar",
          "Sepulcher of the First Ones",
      },
      [95771] = {
          "Dreadsoul Ruiner",
          "Darkheart Thicket",
          "enUS",
      },
      [134418] = {
          "Drowned Depthbringer",
          "Shrine of the Storm",
      },
      [59544] = {
          "The Nodding Tiger",
          "Temple of the Jade Serpent",
      },
      [129547] = {
          "Blacktooth Knuckleduster",
          "Freehold",
      },
      [98970] = {
          "Latosius",
          "Black Rook Hold",
          "enUS",
      },
      [187897] = {
          "Defier Draghar",
          "Ruby Life Pools",
          "enUS",
      },
      [95772] = {
          "Frenzied Nightclaw",
          "Darkheart Thicket",
          "enUS",
      },
      [206065] = {
          "Interval",
          "Dawn of the Infinite",
          "enUS",
      },
      [186107] = {
          "Vault Keeper",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [129548] = {
          "Blacktooth Brute",
          "Freehold",
      },
      [206066] = {
          "Timestream Leech",
          "Dawn of the Infinite",
          "enUS",
      },
      [127757] = {
          "Reanimated Honor Guard",
          "Atal'Dazar",
          "enUS",
      },
      [131863] = {
          "Raal the Gluttonous",
          "Waycrest Manor",
          "enUS",
      },
      [104217] = {
          "Talixae Flamewreath",
          "Court of Stars",
      },
      [162057] = {
          "Chamber Sentinel",
          "Sanguine Depths",
      },
      [59545] = {
          "The Golden Beetle",
          "Temple of the Jade Serpent",
      },
      [131864] = {
          "Gorak Tul",
          "Waycrest Manor",
          "enUS",
      },
      [220141] = {
          "Royal Jelly Purveyor",
          "Cinderbrew Meadery",
      },
      [136470] = {
          "Refreshment Vendor",
          "The MOTHERLODE!!",
      },
      [107288] = {
          "Vilethorn Sapling",
          "Darkheart Thicket",
          "enUS",
      },
      [80805] = {
          "Makogg Emberblade",
          "Iron Docks",
      },
      [184319] = {
          "Refti Custodian",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [133912] = {
          "Bloodsworn Defiler",
          "The Underrot",
      },
      [164873] = {
          "Runestag Elderhorn",
          "De Other Side",
      },
      [43873] = {
          "Altairus",
          "The Vortex Pinnacle",
      },
      [82597] = {
          "Grom'kar Captain",
          "Grimrail Depot",
      },
      [190206] = {
          "Primalist Flamedancer",
          "Ruby Life Pools",
          "enUS",
      },
      [191230] = {
          "Dragonspawn Flamebender",
          "Vault of the Incarnates",
          "enUS",
      },
      [190207] = {
          "Primalist Cinderweaver",
          "Ruby Life Pools",
          "enUS",
      },
      [59546] = {
          "The Talking Fish",
          "Temple of the Jade Serpent",
      },
      [212981] = {
          "Hapless Assistant",
          "The Everbloom",
          "enUS",
      },
      [192767] = {
          "Primal Icebulk",
          "Vault of the Incarnates",
          "enUS",
      },
      [191232] = {
          "Drakonid Stormbringer",
          "Vault of the Incarnates",
          "enUS",
      },
      [163086] = {
          "Rancid Gasbag",
          "Theater of Pain",
      },
      [184580] = {
          "Olaf",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [129552] = {
          "Monzumi",
          "Atal'Dazar",
          "enUS",
      },
      [206074] = {
          "Pendule",
          "Dawn of the Infinite",
          "enUS",
      },
      [186116] = {
          "Gutshot",
          "Brackenhide Hollow",
          "enUS",
      },
      [80936] = {
          "Grom'kar Grenadier",
          "Grimrail Depot",
      },
      [194816] = {
          "Forgewrought Monstrosity",
          "Neltharus",
          "enUS",
      },
      [168717] = {
          "Forsworn Justicar",
          "Spires of Ascension",
      },
      [134174] = {
          "Shadow-Borne Witch Doctor",
          "Kings' Rest",
      },
      [114584] = {
          "Phantom Crew",
          "Return to Karazhan",
      },
      [184582] = {
          "Eric \"The Swift\"",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [59547] = {
          "Jiang",
          "Temple of the Jade Serpent",
      },
      [150295] = {
          "Tank Buster MK1",
          "Operation: Mechagon",
      },
      [129553] = {
          "Dinomancer Kish'o",
          "Atal'Dazar",
          "enUS",
      },
      [214264] = {
          "Cursedforge Honor Guard",
          "The Stonevault",
      },
      [222964] = {
          "Flavor Scientist",
          "Cinderbrew Meadery",
      },
      [80937] = {
          "Grom'kar Gunner",
          "Grimrail Depot",
      },
      [176395] = {
          "Overloaded Mailemental",
          "Tazavesh, the Veiled Market",
      },
      [77483] = {
          "Grom'kar Gunner",
          "Grimrail Depot",
      },
      [176396] = {
          "Defective Sorter",
          "Tazavesh, the Veiled Market",
      },
      [150297] = {
          "Mechagon Renormalizer",
          "Operation: Mechagon",
      },
      [84520] = {
          "Pitwarden Gwarnok",
          "Iron Docks",
      },
      [186120] = {
          "Treemouth",
          "Brackenhide Hollow",
          "enUS",
      },
      [80938] = {
          "Grom'kar Hulk",
          "Grimrail Depot",
      },
      [95779] = {
          "Festerhide Grizzly",
          "Darkheart Thicket",
          "enUS",
      },
      [186121] = {
          "Decatriarch Wratheye",
          "Brackenhide Hollow",
          "enUS",
      },
      [186122] = {
          "Rira Hackclaw",
          "Brackenhide Hollow",
          "enUS",
      },
      [184331] = {
          "Infinite Timereaver",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [153882] = {
          "Deadsoul Spirit",
          "Torghast, Tower of the Damned",
      },
      [193799] = {
          "Rotchanting Totem",
          "Brackenhide Hollow",
      },
      [196102] = {
          "Conjured Lasher",
          "The Azure Vault",
          "enUS",
      },
      [167956] = {
          "Dark Acolyte",
          "Sanguine Depths",
      },
      [224249] = {
          "Twilight Lavabender",
          "Grim Batol",
      },
      [189706] = {
          "Chaotic Essence",
          "Castle Nathria",
      },
      [186124] = {
          "Gashtooth",
          "Brackenhide Hollow",
          "enUS",
      },
      [180495] = {
          "Enraged Direhorn",
          "Tazavesh, the Veiled Market",
      },
      [223994] = {
          "Nightfall Shadowmage",
          "The Dawnbreaker",
      },
      [186125] = {
          "Tricktotem",
          "Brackenhide Hollow",
          "enUS",
      },
      [165911] = {
          "Loyal Creation",
          "The Necrotic Wake",
      },
      [201222] = {
          "Valow, Timesworn Keeper",
          "Dawn of the Infinite",
          "enUS",
      },
      [184335] = {
          "Infinite Agent",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [201223] = {
          "Infinite Twilight Magus",
          "Dawn of the Infinite",
          "enUS",
      },
      [193291] = {
          "Apex Blazewing",
          "Neltharus",
          "enUS",
      },
      [45924] = {
          "Turbulent Squall",
          "The Vortex Pinnacle",
      },
      [194315] = {
          "Stormcaller Solongo",
          "The Nokhud Offensive",
          "enUS",
      },
      [165913] = {
          "Ghastly Parishioner",
          "Halls of Atonement",
      },
      [137511] = {
          "Bilge Rat Cutthroat",
          "Siege of Boralus",
      },
      [40167] = {
          "Twilight Beguiler",
          "Grim Batol",
      },
      [195851] = {
          "Ukhel Deathspeaker",
          "The Nokhud Offensive",
          "enUS",
      },
      [194316] = {
          "Stormcaller Zarii",
          "The Nokhud Offensive",
          "enUS",
      },
      [193293] = {
          "Qalashi Warden",
          "Neltharus",
          "enUS",
      },
      [114334] = {
          "Damaged Golem",
          "Return to Karazhan",
      },
      [194317] = {
          "Stormcaller Boroo",
          "The Nokhud Offensive",
          "enUS",
      },
      [138281] = {
          "Faceless Corruptor",
          "The Underrot",
      },
      [45477] = {
          "Gust Soldier",
          "The Vortex Pinnacle",
      },
      [167963] = {
          "Headless Client",
          "De Other Side",
      },
      [187154] = {
          "Unstable Curator",
          "The Azure Vault",
          "enUS",
      },
      [167964] = {
          "4.RF-4.RF",
          "De Other Side",
      },
      [187155] = {
          "Rune Seal Keeper",
          "The Azure Vault",
          "enUS",
      },
      [195855] = {
          "Risen Warrior",
          "The Nokhud Offensive",
          "enUS",
      },
      [134701] = {
          "Blood Effigy",
          "The Underrot",
      },
      [80816] = {
          "Ahri'ok Dugru",
          "Iron Docks",
      },
      [167965] = {
          "Lubricator",
          "De Other Side",
      },
      [137516] = {
          "Ashvane Invader",
          "Siege of Boralus",
      },
      [216326] = {
          "Ascended Neophyte",
          "City of Threads",
      },
      [40936] = {
          "Faceless Watcher",
          "Throne of the Tides",
          "enUS",
      },
      [165919] = {
          "Skeletal Marauder",
          "The Necrotic Wake",
      },
      [137517] = {
          "Ashvane Destroyer",
          "Siege of Boralus",
      },
      [197904] = {
          "Spellbound Battleaxe",
          "Algeth'ar Academy",
      },
      [115488] = {
          "Infused Pyromancer",
          "Return to Karazhan",
      },
      [171805] = {
          "Research Scribe",
          "Sanguine Depths",
      },
      [167967] = {
          "Sentient Oil",
          "De Other Side",
      },
      [192787] = {
          "Qalashi Spinecrusher",
          "Neltharus",
          "enUS",
      },
      [197905] = {
          "Spellbound Scepter",
          "Algeth'ar Academy",
      },
      [163618] = {
          "Zolramus Necromancer",
          "The Necrotic Wake",
      },
      [192788] = {
          "Qalashi Thaumaturge",
          "Neltharus",
          "enUS",
      },
      [205326] = {
          "Gust Soldier",
          "The Vortex Pinnacle",
      },
      [213770] = {
          "Ink of Ozumat",
          "Throne of the Tides",
          "enUS",
      },
      [168992] = {
          "Risen Cultist",
          "De Other Side",
      },
      [220423] = {
          "Retired Lord Vul'azak",
          "City of Threads",
      },
      [196115] = {
          "Arcane Tender",
          "The Azure Vault",
          "enUS",
      },
      [192789] = {
          "Nokhud Longbow",
          "The Nokhud Offensive",
          "enUS",
      },
      [187160] = {
          "Crystal Fury",
          "The Azure Vault",
          "enUS",
      },
      [114338] = {
          "Mana Confluence",
          "Return to Karazhan",
      },
      [206351] = {
          "Alliance Conjuror",
          "Dawn of the Infinite",
          "enUS",
      },
      [204560] = {
          "Incorporeal Being",
          "Freehold",
          "enUS",
      },
      [137521] = {
          "Irontide Powdershot",
          "Siege of Boralus",
      },
      [59552] = {
          "The Crybaby Hozen",
          "Temple of the Jade Serpent",
      },
      [189464] = {
          "Qalashi Irontorch",
          "Neltharus",
          "enUS",
      },
      [206352] = {
          "Alliance Archer",
          "Dawn of the Infinite",
          "enUS",
      },
      [163621] = {
          "Goregrind",
          "The Necrotic Wake",
      },
      [182045] = {
          "Necrotic Ritualist",
          "Sepulcher of the First Ones",
      },
      [198933] = {
          "Iridikron",
          "Dawn of the Infinite",
          "enUS",
      },
      [133685] = {
          "Befouled Spirit",
          "The Underrot",
      },
      [189466] = {
          "Irontorch Commander",
          "Neltharus",
          "enUS",
      },
      [189722] = {
          "Gulping Goliath",
          "Halls of Infusion",
          "enUS",
      },
      [165414] = {
          "Depraved Obliterator",
          "Halls of Atonement",
      },
      [133430] = {
          "Venture Co. Mastermind",
          "The MOTHERLODE!!",
      },
      [135989] = {
          "Shieldbearer of Zul",
          "Atal'Dazar",
          "enUS",
      },
      [189467] = {
          "Qalashi Bonesplitter",
          "Neltharus",
          "enUS",
      },
      [83763] = {
          "Grom'kar Technician",
          "Iron Docks",
      },
      [59553] = {
          "The Songbird Queen",
          "Temple of the Jade Serpent",
      },
      [199703] = {
          "Magma Mystic",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [59873] = {
          "Corrupt Living Water",
          "UNKNOWN",
      },
      [133432] = {
          "Venture Co. Alchemist",
          "The MOTHERLODE!!",
      },
      [45928] = {
          "Executor of the Caliph",
          "The Vortex Pinnacle",
      },
      [83892] = {
          "Life Warden Gola",
          "The Everbloom",
          "enUS",
      },
      [163882] = {
          "Decaying Flesh Giant",
          "Plaguefall",
      },
      [192796] = {
          "Nokhud Hornsounder",
          "The Nokhud Offensive",
          "enUS",
      },
      [189470] = {
          "Lava Flare",
          "Neltharus",
          "enUS",
      },
      [188703] = {
          "Protoform Barrier",
          "Castle Nathria",
      },
      [189471] = {
          "Qalashi Blacksmith",
          "Neltharus",
          "enUS",
      },
      [189727] = {
          "Khajin the Unyielding",
          "Halls of Infusion",
          "enUS",
      },
      [83765] = {
          "Grom'kar Footsoldier",
          "Iron Docks",
      },
      [83893] = {
          "Earthshaper Telu",
          "The Everbloom",
          "enUS",
      },
      [201754] = {
          "Sarkareth",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [216339] = {
          "Sureki Unnaturaler",
          "City of Threads",
      },
      [89011] = {
          "Rylak Skyterror",
          "Iron Docks",
      },
      [210966] = {
          "Sureki Webmage",
          "The Dawnbreaker",
      },
      [101549] = {
          "Arcane Minion",
          "Black Rook Hold",
          "enUS",
      },
      [205337] = {
          "Infinite Timebender",
          "Dawn of the Infinite",
          "enUS",
      },
      [168747] = {
          "Venomfang",
          "Plaguefall",
      },
      [83894] = {
          "Dulhu",
          "The Everbloom",
          "enUS",
      },
      [192800] = {
          "Nokhud Lancemaster",
          "The Nokhud Offensive",
          "enUS",
      },
      [197406] = {
          "Aggravated Skitterfly",
          "Algeth'ar Academy",
          "enUS",
      },
      [201756] = {
          "Whiiskeyz",
          "Dawn of the Infinite",
          "enUS",
      },
      [216342] = {
          "Skittering Assistant",
          "City of Threads",
      },
      [100527] = {
          "Dreadfire Imp",
          "Darkheart Thicket",
          "enUS",
      },
      [59555] = {
          "Haunting Sha",
          "Temple of the Jade Serpent",
      },
      [163121] = {
          "Stitched Vanguard",
          "The Necrotic Wake",
      },
      [45930] = {
          "Minister of Air",
          "The Vortex Pinnacle",
      },
      [186151] = {
          "Balakar Khan",
          "The Nokhud Offensive",
          "enUS",
      },
      [223253] = {
          "Bloodstained Webmage",
          "Ara-Kara, City of Echoes",
      },
      [162099] = {
          "General Kaal",
          "Sanguine Depths",
      },
      [189478] = {
          "Forgemaster Gorek",
          "Neltharus",
          "enUS",
      },
      [97202] = {
          "Olmyr the Enlightened",
          "Halls of Valor",
      },
      [163891] = {
          "Rotmarrow Slime",
          "Plaguefall",
      },
      [186664] = {
          "Stonevault Ambusher",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [195876] = {
          "Desecrated Ohuna",
          "The Nokhud Offensive",
          "enUS",
      },
      [135234] = {
          "Diseased Mastiff",
          "Waycrest Manor",
          "enUS",
      },
      [195877] = {
          "Risen Mystic",
          "The Nokhud Offensive",
          "enUS",
      },
      [103344] = {
          "Oakheart",
          "Darkheart Thicket",
          "enUS",
      },
      [135235] = {
          "Spectral Beastmaster",
          "Kings' Rest",
      },
      [195878] = {
          "Ukhel Beastcaller",
          "The Nokhud Offensive",
          "enUS",
      },
      [163894] = {
          "Blighted Spinebreaker",
          "Plaguefall",
      },
      [75966] = {
          "Defiled Spirit",
          "Shadowmoon Burial Grounds",
      },
      [199717] = {
          "Nokhud Defender",
          "The Nokhud Offensive",
          "enUS",
      },
      [165430] = {
          "Malignant Spawn",
          "Plaguefall",
      },
      [180015] = {
          "Burly Deckhand",
          "Tazavesh, the Veiled Market",
      },
      [81212] = {
          "Grimrail Overseer",
          "Grimrail Depot",
      },
      [189227] = {
          "Qalashi Hunter",
          "Neltharus",
          "enUS",
      },
      [197671] = {
          "Volatile Infuser",
          "Vault of the Incarnates",
          "enUS",
      },
      [163128] = {
          "Zolramus Sorcerer",
          "The Necrotic Wake",
      },
      [100531] = {
          "Bloodtainted Fury",
          "Darkheart Thicket",
          "enUS",
      },
      [136006] = {
          "Rowdy Reveler",
          "The MOTHERLODE!!",
      },
      [102962] = {
          "Nightmare Abomination",
          "Darkheart Thicket",
          "enUS",
      },
      [135239] = {
          "Spectral Witch Doctor",
          "Kings' Rest",
      },
      [164921] = {
          "Drust Harvester",
          "Mists of Tirna Scithe",
      },
      [45932] = {
          "Skyfall Star",
          "The Vortex Pinnacle",
      },
      [135240] = {
          "Soul Essence",
          "Waycrest Manor",
          "enUS",
      },
      [100532] = {
          "Bloodtainted Burster",
          "Darkheart Thicket",
          "enUS",
      },
      [166969] = {
          "Baroness Frieda",
          "Castle Nathria",
      },
      [208165] = {
          "Alliance Knight",
          "Dawn of the Infinite",
          "enUS",
      },
      [177716] = {
          "So' Cartel Assassin",
          "Tazavesh, the Veiled Market",
      },
      [135241] = {
          "Bilge Rat Pillager",
          "Siege of Boralus",
      },
      [83389] = {
          "Ironwing Flamespitter",
          "Iron Docks",
      },
      [166970] = {
          "Lord Stavros",
          "Castle Nathria",
      },
      [40943] = {
          "Gilgoblin Aquamage",
          "Throne of the Tides",
          "enUS",
      },
      [189232] = {
          "Kokia Blazehoof",
          "Ruby Life Pools",
          "enUS",
      },
      [166971] = {
          "Castellan Niklaus",
          "Castle Nathria",
      },
      [152898] = {
          "Deadsoul Chorus",
          "Torghast, Tower of the Damned",
      },
      [223776] = {
          "Blazing Fiend",
          "Darkflame Cleft",
      },
      [83390] = {
          "Thunderlord Wrangler",
          "Iron Docks",
      },
      [164414] = {
          "Reanimated Mage",
          "The Necrotic Wake",
      },
      [189234] = {
          "Frostbreath Arachnid",
          "Vault of the Incarnates",
          "enUS",
      },
      [164926] = {
          "Drust Boughbreaker",
          "Mists of Tirna Scithe",
      },
      [212775] = {
          "Faceless Seer",
          "Throne of the Tides",
          "enUS",
      },
      [186420] = {
          "Earthen Weaver",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [189235] = {
          "Overseer Lahar",
          "Neltharus",
          "enUS",
      },
      [220196] = {
          "Herald of Ansurek",
          "City of Threads",
      },
      [75459] = {
          "Plagued Bat",
          "Shadowmoon Burial Grounds",
      },
      [134990] = {
          "Charged Dust Devil",
          "Temple of Sethraliss",
      },
      [81984] = {
          "Gnarlroot",
          "The Everbloom",
          "enUS",
      },
      [138061] = {
          "Venture Co. Longshoreman",
          "The MOTHERLODE!!",
      },
      [220197] = {
          "Royal Swarmguard",
          "City of Threads",
      },
      [95674] = {
          "Fenryr",
          "Halls of Valor",
      },
      [164929] = {
          "Tirnenn Villager",
          "Mists of Tirna Scithe",
      },
      [104246] = {
          "Duskwatch Guard",
          "Court of Stars",
      },
      [212778] = {
          "Minion of Ghur'sha",
          "Throne of the Tides",
          "enUS",
      },
      [81985] = {
          "Everbloom Cultivator",
          "The Everbloom",
          "enUS",
      },
      [131666] = {
          "Coven Thornshaper",
          "Waycrest Manor",
          "enUS",
      },
      [138063] = {
          "Posh Vacationer",
          "The MOTHERLODE!!",
      },
      [185656] = {
          "Filth Caller",
          "Brackenhide Hollow",
          "enUS",
      },
      [131667] = {
          "Soulbound Goliath",
          "Waycrest Manor",
          "enUS",
      },
      [138064] = {
          "Posh Vacationer",
          "The MOTHERLODE!!",
      },
      [65317] = {
          "Xiang",
          "Temple of the Jade Serpent",
      },
      [152905] = {
          "Tower Sentinel",
          "Torghast, Tower of the Damned",
      },
      [104247] = {
          "Duskwatch Arcanist",
          "Court of Stars",
      },
      [97083] = {
          "King Ranulf",
          "Halls of Valor",
      },
      [131669] = {
          "Jagged Hound",
          "Waycrest Manor",
          "enUS",
      },
      [176959] = {
          "Mawsworn Soulmage",
          "Sanctum of Domination",
      },
      [45935] = {
          "Temple Adept",
          "The Vortex Pinnacle",
      },
      [131670] = {
          "Heartsbane Vinetwister",
          "Waycrest Manor",
      },
      [213806] = {
          "Splotch",
          "Throne of the Tides",
          "enUS",
      },
      [167493] = {
          "Venomous Sniper",
          "Plaguefall",
      },
      [184125] = {
          "Chrono-Lord Deios",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [205363] = {
          "Time-Lost Waveshaper",
          "Dawn of the Infinite",
          "enUS",
      },
      [100539] = {
          "Taintheart Deadeye",
          "Darkheart Thicket",
          "enUS",
      },
      [168007] = {
          "Empowered Mawsworn Soulbinder",
          "Torghast, Tower of the Damned",
      },
      [179010] = {
          "Fatespawn Anomaly",
          "Sanctum of Domination",
      },
      [134232] = {
          "Hired Assassin",
          "The MOTHERLODE!!",
      },
      [218671] = {
          "Venture Co. Pyromaniac",
          "Cinderbrew Meadery",
      },
      [212786] = {
          "Cursed Stormrider",
          "The Rookery",
      },
      [96574] = {
          "Stormforged Sentinel",
          "Halls of Valor",
      },
      [214066] = {
          "Cursedforge Stoneshaper",
          "The Stonevault",
      },
      [115765] = {
          "Abstract Nullifier",
          "Return to Karazhan",
      },
      [189247] = {
          "Tamed Phoenix",
          "Neltharus",
          "enUS",
      },
      [104251] = {
          "Duskwatch Sentry",
          "Court of Stars",
      },
      [184130] = {
          "Earthen Custodian",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [135258] = {
          "Irontide Marauder",
          "Siege of Boralus",
      },
      [41139] = {
          "Naz'jar Oracle",
          "Throne of the Tides",
      },
      [179269] = {
          "Oasis Security",
          "Tazavesh, the Veiled Market",
      },
      [187969] = {
          "Flashfrost Earthshaper",
          "Ruby Life Pools",
          "enUS",
      },
      [184131] = {
          "Earthen Guardian",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [101437] = {
          "Burning Geode",
          "Neltharion's Lair",
      },
      [131677] = {
          "Heartsbane Runeweaver",
          "Waycrest Manor",
          "enUS",
      },
      [165197] = {
          "Skeletal Monstrosity",
          "The Necrotic Wake",
      },
      [208440] = {
          "Infinite Slayer",
          "Dawn of the Infinite",
          "enUS",
      },
      [184132] = {
          "Earthen Warder",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [195135] = {
          "Bracken Warscourge",
          "Brackenhide Hollow",
      },
      [92610] = {
          "Understone Drummer",
          "Neltharion's Lair",
      },
      [84550] = {
          "Xeri'tac",
          "The Everbloom",
      },
      [101438] = {
          "Vileshard Chunk",
          "Neltharion's Lair",
      },
      [170572] = {
          "Atal'ai Hoodoo Hexxer",
          "De Other Side",
      },
      [136541] = {
          "Bile Oozeling",
          "Waycrest Manor",
          "enUS",
      },
      [81864] = {
          "Dreadpetal",
          "The Everbloom",
          "enUS",
      },
      [98368] = {
          "Ghostly Protector",
          "Black Rook Hold",
          "enUS",
      },
      [75979] = {
          "Exhumed Spirit",
          "Shadowmoon Burial Grounds",
      },
      [156244] = {
          "Winged Automaton",
          "Torghast, Tower of the Damned",
      },
      [201790] = {
          "Loszkeleth",
          "Dawn of the Infinite",
          "enUS",
      },
      [171341] = {
          "Bladebeak Hatchling",
          "De Other Side",
      },
      [151127] = {
          "Lord of Torment",
          "Torghast, Tower of the Damned",
      },
      [135007] = {
          "Orb Guardian",
          "Temple of Sethraliss",
      },
      [135263] = {
          "Ashvane Spotter",
          "Siege of Boralus",
      },
      [156245] = {
          "Grand Automaton",
          "Torghast, Tower of the Damned",
      },
      [128434] = {
          "Feasting Skyscreamer",
          "Atal'Dazar",
          "enUS",
      },
      [197697] = {
          "Flamegullet",
          "Ruby Life Pools",
          "enUS",
      },
      [199233] = {
          "Flamescale Captain",
          "Vault of the Incarnates",
          "enUS",
      },
      [92612] = {
          "Mightstone Breaker",
          "Neltharion's Lair",
      },
      [197698] = {
          "Thunderhead",
          "Ruby Life Pools",
          "enUS",
      },
      [171343] = {
          "Bladebeak Matriarch",
          "De Other Side",
      },
      [208445] = {
          "Larodar, Keeper of the Flame",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [186696] = {
          "Quaking Totem",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [128435] = {
          "Toxic Saurid",
          "Atal'Dazar",
          "enUS",
      },
      [98370] = {
          "Ghostly Councilor",
          "Black Rook Hold",
          "enUS",
      },
      [162133] = {
          "General Kaal",
          "Sanguine Depths",
      },
      [176974] = {
          "Soul Reaver",
          "Sanctum of Domination",
      },
      [163157] = {
          "Amarth",
          "The Necrotic Wake",
      },
      [97219] = {
          "Solsten",
          "Halls of Valor",
      },
      [131685] = {
          "Runic Disciple",
          "Waycrest Manor",
          "enUS",
      },
      [138338] = {
          "Reanimated Guardian",
          "The Underrot",
      },
      [157017] = {
          "Lithic Watcher",
          "Torghast, Tower of the Damned",
      },
      [220730] = {
          "Royal Venomshell",
          "City of Threads",
      },
      [98243] = {
          "Soul-Torn Champion",
          "Black Rook Hold",
          "enUS",
      },
      [211263] = {
          "Deathscreamer Iken'tak",
          "The Dawnbreaker",
      },
      [184908] = {
          "Vy Interceptor",
          "The Necrotic Wake",
      },
      [195399] = {
          "Curious Swoglet",
          "Halls of Infusion",
          "enUS",
      },
      [84554] = {
          "Venom-Crazed Pale One",
          "The Everbloom",
      },
      [44404] = {
          "Naz'jar Frost Witch",
          "Throne of the Tides",
          "enUS",
      },
      [136549] = {
          "Ashvane Cannoneer",
          "Siege of Boralus",
      },
      [184910] = {
          "Wo Drifter",
          "The Necrotic Wake",
      },
      [207939] = {
          "Baron Braunpyke",
          "Priory of the Sacred Flame",
      },
      [115388] = {
          "King",
          "Return to Karazhan",
      },
      [164185] = {
          "Echelon",
          "Halls of Atonement",
      },
      [137830] = {
          "Pallid Gorger",
          "Waycrest Manor",
          "enUS",
      },
      [130485] = {
          "Mechanized Peacekeeper",
          "The MOTHERLODE!!",
      },
      [136295] = {
          "Sunken Denizen",
          "Shrine of the Storm",
      },
      [186191] = {
          "Decay Speaker",
          "Brackenhide Hollow",
          "enUS",
      },
      [107073] = {
          "Duskwatch Reinforcement",
          "Court of Stars",
      },
      [185680] = {
          "Vy Relic",
          "The Necrotic Wake",
      },
      [127799] = {
          "Dazar'ai Honor Guard",
          "Atal'Dazar",
          "enUS",
      },
      [192333] = {
          "Alpha Eagle",
          "Algeth'ar Academy",
          "enUS",
      },
      [151649] = {
          "Defense Bot Mk I",
          "Operation: Mechagon",
      },
      [133482] = {
          "Crawler Mine",
          "The MOTHERLODE!!",
      },
      [208198] = {
          "Whiiskeyz",
          "Scarlet Monastery",
      },
      [173655] = {
          "Mistveil Matriarch",
          "Mists of Tirna Scithe",
      },
      [131436] = {
          "Chosen Blood Matron",
          "The Underrot",
      },
      [205384] = {
          "Infinite Chronoweaver",
          "Dawn of the Infinite",
          "enUS",
      },
      [134251] = {
          "Seneschal M'bara",
          "Kings' Rest",
      },
      [194894] = {
          "Primalist Stormspeaker",
          "The Nokhud Offensive",
          "enUS",
      },
      [189265] = {
          "Qalashi Bonetender",
          "Neltharus",
          "enUS",
      },
      [185683] = {
          "Wo Relic",
          "The Necrotic Wake",
      },
      [208456] = {
          "Shuffling Horror",
          "Darkflame Cleft",
      },
      [207177] = {
          "Infinite Watchkeeper",
          "Dawn of the Infinite",
          "enUS",
      },
      [189266] = {
          "Qalashi Trainee",
          "Neltharus",
          "enUS",
      },
      [190034] = {
          "Blazebound Destroyer",
          "Ruby Life Pools",
          "enUS",
      },
      [178008] = {
          "Decrepit Orb",
          "Sanctum of Domination",
      },
      [194896] = {
          "Primal Stormshield",
          "The Nokhud Offensive",
          "enUS",
      },
      [130488] = {
          "Mech Jockey",
          "The MOTHERLODE!!",
      },
      [207946] = {
          "Captain Dailcry",
          "Priory of the Sacred Flame",
      },
      [185685] = {
          "Urh Relic",
          "The Necrotic Wake",
      },
      [165471] = {
          "Nathrian Duelist",
          "Castle Nathria",
      },
      [114624] = {
          "Arcane Warden",
          "Return to Karazhan",
      },
      [194897] = {
          "Stormsurge Totem",
          "The Nokhud Offensive",
          "enUS",
      },
      [194898] = {
          "Primalist Arcblade",
          "The Nokhud Offensive",
          "enUS",
      },
      [52019] = {
          "Skyfall Star",
          "The Vortex Pinnacle",
      },
      [190294] = {
          "Nokhud Stormcaster",
          "The Nokhud Offensive",
          "enUS",
      },
      [151657] = {
          "Bomb Tonk",
          "Operation: Mechagon",
      },
      [225605] = {
          "Nightfall Darkcaster",
          "The Dawnbreaker",
      },
      [40633] = {
          "Naz'jar Honor Guard",
          "Throne of the Tides",
          "enUS",
      },
      [187224] = {
          "Vile Rothexer",
          "Brackenhide Hollow",
          "enUS",
      },
      [134514] = {
          "Abyssal Cultist",
          "Shrine of the Storm",
      },
      [114626] = {
          "Forlorn Spirit",
          "Return to Karazhan",
      },
      [174175] = {
          "Loyal Stoneborn",
          "Halls of Atonement",
      },
      [198995] = {
          "Chronikar",
          "Dawn of the Infinite",
          "enUS",
      },
      [96587] = {
          "Felsworn Infester",
          "Vault of the Wardens",
      },
      [203857] = {
          "Horde Warlock",
          "Dawn of the Infinite",
          "enUS",
      },
      [83026] = {
          "Siegemaster Olugar",
          "Iron Docks",
      },
      [198996] = {
          "Manifested Timeways",
          "Dawn of the Infinite",
          "enUS",
      },
      [170850] = {
          "Raging Bloodhorn",
          "Theater of Pain",
      },
      [114627] = {
          "Shrieking Terror",
          "Return to Karazhan",
      },
      [161895] = {
          "Thing From Beyond",
          "Horrific Vision of Orgrimmar",
      },
      [198997] = {
          "Blight of Galakrond",
          "Dawn of the Infinite",
          "enUS",
      },
      [195927] = {
          "Soulharvester Galtmaa",
          "The Nokhud Offensive",
          "enUS",
      },
      [207186] = {
          "Unruly Stormrook",
          "The Rookery",
      },
      [81236] = {
          "Grimrail Technician",
          "Grimrail Depot",
      },
      [189531] = {
          "Decayed Elder",
          "Brackenhide Hollow",
          "enUS",
      },
      [195928] = {
          "Soulharvester Duuren",
          "The Nokhud Offensive",
          "enUS",
      },
      [165479] = {
          "Court Enforcer",
          "Castle Nathria",
      },
      [114628] = {
          "Skeletal Waiter",
          "Return to Karazhan",
      },
      [198999] = {
          "Morchie",
          "Dawn of the Infinite",
          "enUS",
      },
      [203861] = {
          "Horde Destroyer",
          "Dawn of the Infinite",
          "enUS",
      },
      [195929] = {
          "Soulharvester Tumen",
          "The Nokhud Offensive",
          "enUS",
      },
      [214608] = {
          "Screaming Soul",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [186206] = {
          "Cruel Bonecrusher",
          "Brackenhide Hollow",
          "enUS",
      },
      [199000] = {
          "Chrono-Lord Deios",
          "Dawn of the Infinite",
          "enUS",
      },
      [195930] = {
          "Soulharvester Mandakh",
          "The Nokhud Offensive",
          "enUS",
      },
      [114629] = {
          "Spectral Retainer",
          "Return to Karazhan",
      },
      [186208] = {
          "Rotbow Ranger",
          "Brackenhide Hollow",
          "enUS",
      },
      [180323] = {
          "Fatespawn Monstrosity",
          "Sanctum of Domination",
      },
      [219984] = {
          "Xeph'itik",
          "City of Threads",
      },
      [116549] = {
          "Backup Singer",
          "Return to Karazhan",
      },
      [87252] = {
          "Unruly Ogron",
          "Iron Docks",
      },
      [164461] = {
          "Sathel the Accursed",
          "Theater of Pain",
      },
      [134012] = {
          "Taskmaster Askari",
          "The MOTHERLODE!!",
      },
      [181861] = {
          "Magmatusk",
          "Neltharus",
          "enUS",
      },
      [180070] = {
          "Mawsworn Scryer",
          "Sanctum of Domination",
      },
      [129600] = {
          "Bilge Rat Brinescale",
          "Freehold",
      },
      [210264] = {
          "Bee Wrangler",
          "Cinderbrew Meadery",
      },
      [167533] = {
          "Advent Nevermore",
          "Theater of Pain",
      },
      [101326] = {
          "Honored Ancestor",
          "Halls of Valor",
      },
      [157810] = {
          "Mawsworn Endbringer",
          "Torghast, Tower of the Damned",
      },
      [164463] = {
          "Paceran the Virulent",
          "Theater of Pain",
      },
      [102094] = {
          "Risen Swordsman",
          "Black Rook Hold",
          "enUS",
      },
      [114632] = {
          "Spectral Attendant",
          "Return to Karazhan",
      },
      [184422] = {
          "Emberon",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [211289] = {
          "Taener Duelmal",
          "Priory of the Sacred Flame",
      },
      [129601] = {
          "Cutwater Harpooner",
          "Freehold",
      },
      [211290] = {
          "Elaena Emberlanz",
          "Priory of the Sacred Flame",
      },
      [99664] = {
          "Restless Soul",
          "Black Rook Hold",
          "enUS",
      },
      [197985] = {
          "Flame Channeler",
          "Ruby Life Pools",
          "enUS",
      },
      [167536] = {
          "Harugia the Bloodthirsty",
          "Theater of Pain",
      },
      [114633] = {
          "Spectral Valet",
          "Return to Karazhan",
      },
      [135552] = {
          "Deathtouched Slaver",
          "Waycrest Manor",
          "enUS",
      },
      [129602] = {
          "Irontide Enforcer",
          "Freehold",
      },
      [111563] = {
          "Duskwatch Guard",
          "Court of Stars",
      },
      [205151] = {
          "Tyr's Vanguard",
          "Dawn of the Infinite",
          "enUS",
      },
      [197219] = {
          "Vile Lasher",
          "Algeth'ar Academy",
          "enUS",
      },
      [187240] = {
          "Drakonid Breaker",
          "The Azure Vault",
          "enUS",
      },
      [154744] = {
          "Toxic Monstrosity",
          "Operation: Mechagon",
      },
      [171376] = {
          "Head Custodian Javlin",
          "Sanguine Depths",
      },
      [114634] = {
          "Undying Servant",
          "Return to Karazhan",
      },
      [205152] = {
          "Lerai, Timesworn Maiden",
          "Dawn of the Infinite",
          "enUS",
      },
      [205408] = {
          "Infinite Timeslicer",
          "Dawn of the Infinite",
          "enUS",
      },
      [191847] = {
          "Nokhud Plainstomper",
          "The Nokhud Offensive",
          "enUS",
      },
      [179821] = {
          "Commander Zo'far",
          "Tazavesh, the Veiled Market",
      },
      [196198] = {
          "Algeth'ar Security",
          "Algeth'ar Academy",
      },
      [115019] = {
          "Coldmist Widow",
          "Return to Karazhan",
      },
      [207969] = {
          "Horde Raider",
          "Dawn of the Infinite",
          "enUS",
      },
      [188011] = {
          "Primal Terrasentry",
          "Ruby Life Pools",
          "enUS",
      },
      [186220] = {
          "Brackenhide Shaper",
          "Brackenhide Hollow",
          "enUS",
      },
      [180335] = {
          "Cartel Smuggler",
          "Tazavesh, the Veiled Market",
      },
      [207202] = {
          "Void Fragment",
          "The Rookery",
      },
      [150142] = {
          "Scrapbone Trashtosser",
          "Operation: Mechagon",
      },
      [196200] = {
          "Algeth'ar Echoknight",
          "Algeth'ar Academy",
          "enUS",
      },
      [114636] = {
          "Phantom Guardsman",
          "Return to Karazhan",
      },
      [180336] = {
          "Cartel Wiseguy",
          "Tazavesh, the Veiled Market",
      },
      [168310] = {
          "Plagueroc",
          "Plaguefall",
      },
      [150143] = {
          "Scrapbone Grinder",
          "Operation: Mechagon",
      },
      [101075] = {
          "Wormspeaker Devout",
          "Neltharion's Lair",
      },
      [134024] = {
          "Devouring Maggot",
          "Waycrest Manor",
          "enUS",
      },
      [104274] = {
          "Baalgar the Watchful",
          "Court of Stars",
      },
      [135048] = {
          "Gorestained Piglet",
          "Waycrest Manor",
          "enUS",
      },
      [174197] = {
          "Battlefield Ritualist",
          "Theater of Pain",
      },
      [205158] = {
          "Spurlok, Timesworn Sentinel",
          "Dawn of the Infinite",
          "enUS",
      },
      [187503] = {
          "Ambitious Underboss",
          "10.0 Dragon Isles",
      },
      [196203] = {
          "Ethereal Restorer",
          "Algeth'ar Academy",
          "enUS",
      },
      [135049] = {
          "Dreadwing Raven",
          "Waycrest Manor",
          "enUS",
      },
      [113998] = {
          "Mightstone Breaker",
          "Neltharion's Lair",
      },
      [128455] = {
          "T'lonja",
          "Atal'Dazar",
          "enUS",
      },
      [171384] = {
          "Research Scribe",
          "Sanguine Depths",
      },
      [104275] = {
          "Imacu'tya",
          "Court of Stars",
      },
      [128967] = {
          "Ashvane Sniper",
          "Siege of Boralus",
      },
      [168058] = {
          "Infused Quill-feather",
          "Sanguine Depths",
      },
      [136330] = {
          "Soul Thorns",
          "Waycrest Manor",
          "enUS",
      },
      [115406] = {
          "Knight",
          "Return to Karazhan",
      },
      [84957] = {
          "Putrid Pyromancer",
          "The Everbloom",
          "enUS",
      },
      [186738] = {
          "Umbrelskul",
          "The Azure Vault",
          "enUS",
      },
      [39616] = {
          "Naz'jar Invader",
          "Throne of the Tides",
          "enUS",
      },
      [95832] = {
          "Valarjar Shieldmaiden",
          "Halls of Valor",
      },
      [135052] = {
          "Blight Toad",
          "Waycrest Manor",
          "enUS",
      },
      [186739] = {
          "Azureblade",
          "The Azure Vault",
          "enUS",
      },
      [168572] = {
          "Fungi Stormer",
          "Plaguefall",
      },
      [136076] = {
          "Agitated Nimbus",
          "Temple of Sethraliss",
      },
      [115407] = {
          "Rook",
          "Return to Karazhan",
      },
      [206698] = {
          "Fanatical Mage",
          "Priory of the Sacred Flame",
      },
      [186740] = {
          "Arcane Construct",
          "The Azure Vault",
          "enUS",
      },
      [213607] = {
          "Deep Sea Murloc",
          "Throne of the Tides",
          "enUS",
      },
      [195696] = {
          "Primalist Thunderbeast",
          "The Nokhud Offensive",
          "enUS",
      },
      [133007] = {
          "Unbound Abomination",
          "The Underrot",
      },
      [186741] = {
          "Arcane Elemental",
          "The Azure Vault",
          "enUS",
      },
      [162689] = {
          "Surgeon Stitchflesh",
          "The Necrotic Wake",
      },
      [183671] = {
          "Monstrous Soul",
          "Sepulcher of the First Ones",
      },
      [157572] = {
          "Mawsworn Firecaller",
          "Torghast, Tower of the Damned",
      },
      [223844] = {
          "Covert Webmancer",
          "City of Threads",
      },
      [164737] = {
          "Brood Ambusher",
          "Plaguefall",
      },
      [187510] = {
          "Duskpaw Trapper",
          "10.0 Dragon Isles",
      },
      [163458] = {
          "Forsworn Castigator",
          "Spires of Ascension",
      },
      [137103] = {
          "Blood Visage",
          "The Underrot",
      },
      [98521] = {
          "Lord Etheldrin Ravencrest",
          "Black Rook Hold",
          "enUS",
      },
      [162691] = {
          "Blightbone",
          "The Necrotic Wake",
      },
      [163459] = {
          "Forsworn Mender",
          "Spires of Ascension",
      },
      [180091] = {
          "Ancient Core Hound",
          "Tazavesh, the Veiled Market",
      },
      [40577] = {
          "Naz'jar Sentinel",
          "Throne of the Tides",
          "enUS",
      },
      [109908] = {
          "Nightmare Abomination",
          "Darkheart Thicket",
          "enUS",
      },
      [162692] = {
          "Amarth",
          "The Necrotic Wake",
      },
      [187768] = {
          "Dathea Stormlash",
          "Vault of the Incarnates",
          "enUS",
      },
      [102232] = {
          "Rockbound Trapper",
          "Neltharion's Lair",
      },
      [165763] = {
          "Vile Occultist",
          "Castle Nathria",
      },
      [180348] = {
          "Cartel Muscle",
          "Tazavesh, the Veiled Market",
      },
      [129227] = {
          "Azerokk",
          "The MOTHERLODE!!",
      },
      [168578] = {
          "Fungalmancer",
          "Plaguefall",
      },
      [189816] = {
          "Dathea Stormlash",
          "Vault of the Incarnates",
          "enUS",
      },
      [165764] = {
          "Rockbound Vanquisher",
          "Castle Nathria",
      },
      [166276] = {
          "Mistveil Guardian",
          "Mists of Tirna Scithe",
      },
      [170882] = {
          "Bone Magus",
          "Theater of Pain",
      },
      [188026] = {
          "Frost Tomb",
          "Vault of the Incarnates",
          "enUS",
      },
      [187771] = {
          "Kadros Icewrath",
          "Vault of the Incarnates",
          "enUS",
      },
      [174210] = {
          "Blighted Sludge-Spewer",
          "Theater of Pain",
      },
      [169861] = {
          "Ickor Bileflesh",
          "Plaguefall",
      },
      [180864] = {
          "High Torturer",
          "Sanctum of Domination",
      },
      [183423] = {
          "Reformed Bachelor",
          "Return to Karazhan",
      },
      [179841] = {
          "Veteran Sparkcaster",
          "Tazavesh, the Veiled Market",
      },
      [150160] = {
          "Scrapbone Bully",
          "Operation: Mechagon",
      },
      [173189] = {
          "Nathrian Hawkeye",
          "Castle Nathria",
      },
      [179842] = {
          "Commerce Enforcer",
          "Tazavesh, the Veiled Market",
      },
      [204918] = {
          "Iridikron's Creation",
          "Dawn of the Infinite",
          "enUS",
      },
      [134041] = {
          "Infected Peasant",
          "Waycrest Manor",
          "enUS",
      },
      [183425] = {
          "Wholesome Host",
          "Return to Karazhan",
      },
      [171656] = {
          "Venomous Sniper Captain",
          "Plaguefall",
      },
      [126928] = {
          "Irontide Corsair",
          "Freehold",
      },
      [88163] = {
          "Grom'kar Cinderseer",
          "Grimrail Depot",
      },
      [86372] = {
          "Melded Berserker",
          "The Everbloom",
          "enUS",
      },
      [199547] = {
          "Frostforged Zealot",
          "Vault of the Incarnates",
          "enUS",
      },
      [186242] = {
          "Skulking Gutstabber",
          "Brackenhide Hollow",
          "enUS",
      },
      [179334] = {
          "Portalmancer Zo'nyy",
          "Tazavesh, the Veiled Market",
      },
      [79720] = {
          "Grom'kar Boomer",
          "Grimrail Depot",
      },
      [122963] = {
          "Rezan",
          "Atal'Dazar",
          "enUS",
      },
      [199037] = {
          "Primalist Shocktrooper",
          "Halls of Infusion",
          "enUS",
      },
      [150165] = {
          "Slime Elemental",
          "Operation: Mechagon",
      },
      [199549] = {
          "Flamesworn Herald",
          "Vault of the Incarnates",
          "enUS",
      },
      [187523] = {
          "Duskpaw Stalker",
          "10.0 Dragon Isles",
      },
      [179847] = {
          "Shadowsteel Horror",
          "Sanctum of Domination",
      },
      [176521] = {
          "Stygian Abductor",
          "Sanctum of Domination",
      },
      [205435] = {
          "Epoch Ripper",
          "Dawn of the Infinite",
          "enUS",
      },
      [205691] = {
          "Iridikron's Creation",
          "Dawn of the Infinite",
          "enUS",
      },
      [180104] = {
          "Tangling Bloom",
          "The Shadowlands",
      },
      [190340] = {
          "Refti Defender",
          "Halls of Infusion",
          "enUS",
      },
      [176523] = {
          "Painsmith Raznal",
          "Sanctum of Domination",
      },
      [150168] = {
          "Toxic Monstrosity",
          "Operation: Mechagon",
      },
      [95842] = {
          "Valarjar Thundercaller",
          "Halls of Valor",
      },
      [77803] = {
          "Railmaster Rocketspark",
          "Grimrail Depot",
      },
      [139422] = {
          "Scaled Krolusk Tamer",
          "Temple of Sethraliss",
      },
      [150169] = {
          "Toxic Lurker",
          "Operation: Mechagon",
      },
      [165010] = {
          "Congealed Slime",
          "Plaguefall",
      },
      [190342] = {
          "Containment Apparatus",
          "Halls of Infusion",
          "enUS",
      },
      [135329] = {
          "Matron Bryndle",
          "Waycrest Manor",
          "enUS",
      },
      [134137] = {
          "Temple Attendant",
          "Shrine of the Storm",
      },
      [131823] = {
          "Sister Malady",
          "Waycrest Manor",
          "enUS",
      },
      [136353] = {
          "Colossal Tentacle",
          "Shrine of the Storm",
      },
      [185032] = {
          "Taskmaster Xy'pro",
          "Sepulcher of the First Ones",
      },
      [194181] = {
          "Vexamus",
          "Algeth'ar Academy",
          "enUS",
      },
      [100991] = {
          "Strangling Roots",
          "Darkheart Thicket",
          "enUS",
      },
      [200126] = {
          "Fallen Waterspeaker",
          "Temple of the Jade Serpent",
      },
      [131492] = {
          "Devout Blood Priest",
          "The Underrot",
      },
      [168594] = {
          "Chamber Sentinel",
          "Sanguine Depths",
      },
      [111068] = {
          "Archmage Galeorn",
          "Black Rook Hold",
          "enUS",
      },
      [84767] = {
          "Twisted Abomination",
          "The Everbloom",
          "enUS",
      },
      [115418] = {
          "Spider",
          "Return to Karazhan",
      },
      [156226] = {
          "Coldheart Binder",
          "Torghast, Tower of the Damned",
      },
      [207199] = {
          "Cursed Rooktender",
          "The Rookery",
      },
      [139425] = {
          "Crazed Incubator",
          "Temple of Sethraliss",
      },
      [223423] = {
          "Careless Hopgoblin",
          "Cinderbrew Meadery",
      },
      [221760] = {
          "Risen Mage",
          "Priory of the Sacred Flame",
      },
      [213885] = {
          "Nightfall Dark Architect",
          "The Dawnbreaker",
      },
      [168396] = {
          "Plaguebelcher",
          "Plaguefall",
      },
      [118489] = {
          "Corrupted Risen Soldier",
          "Black Rook Hold - Artifact Challenge",
      },
      [216338] = {
          "Hulking Bloodguard",
          "Ara-Kara, City of Echoes",
      },
      [98275] = {
          "Risen Archer",
          "Black Rook Hold",
          "enUS",
      },
      [200836] = {
          "Obsidian Guard",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [99358] = {
          "Rotheart Dryad",
          "Darkheart Thicket",
          "enUS",
      },
      [206697] = {
          "Devout Priest",
          "Priory of the Sacred Flame",
      },
      [189472] = {
          "Qalashi Lavabearer",
          "Neltharus",
          "enUS",
      },
      [156212] = {
          "Coldheart Agent",
          "Torghast, Tower of the Damned",
      },
      [115419] = {
          "Ancient Tome",
          "Return to Karazhan",
      },
      [177808] = {
          "Armored Overseer",
          "Tazavesh, the Veiled Market",
      },
      [196117] = {
          "Crystal Thrasher",
          "The Azure Vault",
          "enUS",
      },
      [204931] = {
          "Fyrakk",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [133852] = {
          "Living Rot",
          "The Underrot",
      },
      [210812] = {
          "Royal Wicklighter",
          "Darkflame Cleft",
      },
      [135167] = {
          "Spectral Berserker",
          "Kings' Rest",
      },
      [204030] = {
          "Goblin Sapper",
          "Dawn of the Infinite",
          "enUS",
      },
      [129699] = {
          "Ludwig Von Tortollan",
          "Freehold",
      },
      [190345] = {
          "Primalist Geomancer",
          "Halls of Infusion",
          "enUS",
      },
      [196482] = {
          "Overgrown Ancient",
          "Algeth'ar Academy",
          "enUS",
      },
      [122968] = {
          "Yazma",
          "Atal'Dazar",
          "enUS",
      },
      [59598] = {
          "Lesser Sha",
          "Temple of the Jade Serpent",
      },
      [81297] = {
          "Dreadfang",
          "Iron Docks",
      },
      [174802] = {
          "Venomous Sniper",
          "Plaguefall",
      },
      [214350] = {
          "Turned Speaker",
          "The Stonevault",
      },
      [136249] = {
          "Guardian Elemental",
          "Shrine of the Storm",
      },
      [200131] = {
          "Sha-Touched Guardian",
          "Temple of the Jade Serpent",
      },
      [210818] = {
          "Lowly Moleherd",
          "Darkflame Cleft",
      },
      [173016] = {
          "Corpse Collector",
          "The Necrotic Wake",
      },
      [154014] = {
          "Imprisoned Cabalist",
          "Torghast, Tower of the Damned",
      },
      [115757] = {
          "Wrathguard Flamebringer",
          "Return to Karazhan",
      },
      [40935] = {
          "Gilgoblin Hunter",
          "Throne of the Tides",
          "enUS",
      },
      [218324] = {
          "Nakt",
          "Ara-Kara, City of Echoes",
      },
      [118491] = {
          "Corrupted Risen Mage",
          "Black Rook Hold - Artifact Challenge",
      },
      [165529] = {
          "Depraved Collector",
          "Halls of Atonement",
      },
      [188302] = {
          "Reconfiguration Emitter",
          "Castle Nathria",
      },
      [200840] = {
          "Flamebound Huntsman",
          "Aberrus, the Shadowed Crucible",
          "enUS",
      },
      [168393] = {
          "Plaguebelcher",
          "Plaguefall",
      },
      [129366] = {
          "Bilge Rat Buccaneer",
          "Siege of Boralus",
      },
      [45922] = {
          "Empyrean Assassin",
          "The Vortex Pinnacle",
      },
      [206068] = {
          "Temporal Fusion",
          "Dawn of the Infinite",
          "enUS",
      },
      [206214] = {
          "Infinite Infiltrator",
          "Dawn of the Infinite",
          "enUS",
      },
      [98366] = {
          "Ghostly Retainer",
          "Black Rook Hold",
          "enUS",
      },
      [189886] = {
          "Blazebound Firestorm",
          "Ruby Life Pools",
          "enUS",
      },
      [101476] = {
          "Molten Charskin",
          "Neltharion's Lair",
      },
      [195119] = {
          "Primalist Shockcaster",
          "Ruby Life Pools",
          "enUS",
      },
      [162763] = {
          "Soulforged Bonereaver",
          "Theater of Pain",
      },
      [144293] = {
          "Waste Processing Unit",
          "Operation: Mechagon",
      },
      [134629] = {
          "Scaled Krolusk Rider",
          "Temple of Sethraliss",
      },
      [228539] = {
          "Nightfall Darkcaster",
          "The Dawnbreaker",
      },
      [114526] = {
          "Ghostly Understudy",
          "Return to Karazhan",
      },
      [169875] = {
          "Shackled Soul",
          "Theater of Pain",
      },
      [98406] = {
          "Embershard Scorpion",
          "Neltharion's Lair",
      },
      [166299] = {
          "Mistveil Tender",
          "Mists of Tirna Scithe",
      },
      [129367] = {
          "Bilge Rat Tempest",
          "Siege of Boralus",
      },
      [144294] = {
          "Mechagon Tinkerer",
          "Operation: Mechagon",
      },
      [169927] = {
          "Putrid Butcher",
          "Theater of Pain",
      },
      [168418] = {
          "Forsworn Inquisitor",
          "Spires of Ascension",
      },
      [184581] = {
          "Baelog",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [213892] = {
          "Nightfall Shadowmage",
          "The Dawnbreaker",
      },
      [207796] = {
          "Burning Colossus",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [213893] = {
          "Nightfall Darkcaster",
          "The Dawnbreaker",
      },
      [131545] = {
          "Lady Waycrest",
          "Waycrest Manor",
          "enUS",
      },
      [144295] = {
          "Mechagon Mechanic",
          "Operation: Mechagon",
      },
      [206063] = {
          "Temporal Deviation",
          "Dawn of the Infinite",
          "enUS",
      },
      [75506] = {
          "Shadowmoon Loyalist",
          "Shadowmoon Burial Grounds",
      },
      [80935] = {
          "Grom'kar Boomer",
          "Grimrail Depot",
      },
      [164510] = {
          "Shambling Arbalest",
          "Theater of Pain",
      },
      [190609] = {
          "Echo of Doragosa",
          "Algeth'ar Academy",
          "enUS",
      },
      [166301] = {
          "Mistveil Stalker",
          "Mists of Tirna Scithe",
      },
      [123227] = {
          "Keystone Vendor",
          "Kalimdor",
      },
      [144296] = {
          "Spider Tank",
          "Operation: Mechagon",
      },
      [177816] = {
          "Interrogation Specialist",
          "Tazavesh, the Veiled Market",
      },
      [167111] = {
          "Spinemaw Staghorn",
          "Mists of Tirna Scithe",
      },
      [208521] = {
          "Pumpkin Soldier",
          "Scarlet Monastery",
      },
      [199220] = {
          "Violetwing Stagbeetle",
          "10.0 Dragon Isles",
      },
      [154020] = {
          "Prisonbreak Cursewalker",
          "Torghast, Tower of the Damned",
      },
      [166302] = {
          "Corpse Harvester",
          "The Necrotic Wake",
      },
      [188252] = {
          "Melidrussa Chillworn",
          "Ruby Life Pools",
          "enUS",
      },
      [114804] = {
          "Spectral Charger",
          "Return to Karazhan",
      },
      [45572] = {
          "Howling Gale",
          "The Vortex Pinnacle",
      },
      [162317] = {
          "Gorechop",
          "Theater of Pain",
      },
      [177817] = {
          "Support Officer",
          "Tazavesh, the Veiled Market",
      },
      [98280] = {
          "Risen Arcanist",
          "Black Rook Hold",
          "enUS",
      },
      [122972] = {
          "Dazar'ai Augur",
          "Atal'Dazar",
          "enUS",
      },
      [41096] = {
          "Naz'jar Oracle",
          "Throne of the Tides",
          "enUS",
      },
      [129369] = {
          "Irontide Raider",
          "Siege of Boralus",
      },
      [98792] = {
          "Wyrmtongue Scavenger",
          "Black Rook Hold",
          "enUS",
      },
      [168718] = {
          "Forsworn Warden",
          "Spires of Ascension",
      },
      [164506] = {
          "Ancient Captain",
          "Theater of Pain",
      },
      [165076] = {
          "Gluttonous Tick",
          "Sanguine Depths",
      },
      [97068] = {
          "Storm Drake",
          "Halls of Valor",
      },
      [126919] = {
          "Irontide Stormcaller",
          "Freehold",
      },
      [204536] = {
          "Blight Chunk",
          "Dawn of the Infinite",
          "enUS",
      },
      [139949] = {
          "Plague Doctor",
          "Temple of Sethraliss",
      },
      [187192] = {
          "Rageclaw",
          "Brackenhide Hollow",
          "enUS",
      },
      [101991] = {
          "Nightmare Dweller",
          "Darkheart Thicket",
          "enUS",
      },
      [153292] = {
          "Training Dummy",
          "Eastern Kingdoms",
      },
      [114266] = {
          "Shoreline Tidespeaker",
          "Return to Karazhan",
      },
      [40634] = {
          "Naz'jar Tempest Witch",
          "Throne of the Tides",
          "enUS",
      },
      [122973] = {
          "Dazar'ai Confessor",
          "Atal'Dazar",
          "enUS",
      },
      [45919] = {
          "Young Storm Dragon",
          "The Vortex Pinnacle",
      },
      [129370] = {
          "Irontide Waveshaper",
          "Siege of Boralus",
      },
      [155221] = {
          "Faeleaf Tender",
          "Torghast, Tower of the Damned",
      },
      [204262] = {
          "Necrofrost",
          "Dawn of the Infinite",
          "enUS",
      },
      [175517] = {
          "Symbiotic Faerie",
          "9.0 Bastion Arena - Path of Ascension",
      },
      [96934] = {
          "Valarjar Trapper",
          "Halls of Valor",
      },
      [194487] = {
          "Vile Rothexer",
          "Brackenhide Hollow",
          "enUS",
      },
      [115642] = {
          "Umbral Imp",
          "Faronaar",
      },
      [189555] = {
          "Astral Attendant",
          "The Azure Vault",
          "enUS",
      },
      [208193] = {
          "Paladin of the Silver Hand",
          "Dawn of the Infinite",
          "enUS",
      },
      [196202] = {
          "Spectral Invoker",
          "Algeth'ar Academy",
          "enUS",
      },
      [81522] = {
          "Witherbark",
          "The Everbloom",
          "enUS",
      },
      [81283] = {
          "Grom'kar Footsoldier",
          "Iron Docks",
      },
      [104295] = {
          "Blazing Imp",
          "Court of Stars",
      },
      [190359] = {
          "Skulking Zealot",
          "Halls of Infusion",
          "enUS",
      },
      [98538] = {
          "Lady Velandras Ravencrest",
          "Black Rook Hold",
          "enUS",
      },
      [211341] = {
          "Manifested Shadow",
          "The Dawnbreaker",
      },
      [187033] = {
          "Stinkbreath",
          "Brackenhide Hollow",
          "enUS",
      },
      [99891] = {
          "Storm Drake",
          "Halls of Valor",
      },
      [135204] = {
          "Spectral Hex Priest",
          "Kings' Rest",
      },
      [183707] = {
          "Xy Spellslinger",
          "Sepulcher of the First Ones",
      },
      [132820] = {
          "Mudsnout Piglet",
          "Skittering Hollow (Islands 5)",
      },
      [130011] = {
          "Irontide Buccaneer",
          "Freehold",
      },
      [186226] = {
          "Fetid Rotsinger",
          "Brackenhide Hollow",
          "enUS",
      },
      [45917] = {
          "Cloud Prince",
          "The Vortex Pinnacle",
      },
      [193462] = {
          "Batak",
          "The Nokhud Offensive",
          "enUS",
      },
      [150292] = {
          "Mechagon Cavalry",
          "Operation: Mechagon",
      },
      [81603] = {
          "Champion Druna",
          "Iron Docks",
      },
      [208698] = {
          "Infinite Riftmage",
          "Dawn of the Infinite",
          "enUS",
      },
      [173729] = {
          "Manifestation of Pride",
          "Theater of Pain",
      },
      [99359] = {
          "Rotheart Keeper",
          "Darkheart Thicket",
          "enUS",
      },
      [211087] = {
          "Speaker Shadowcrown",
          "The Dawnbreaker",
      },
      [163524] = {
          "Kyrian Dark-Praetor",
          "Spires of Ascension",
      },
      [76104] = {
          "Monstrous Corpse Spider",
          "Shadowmoon Burial Grounds",
      },
      [189338] = {
          "Riverbend Chomper",
          "Dragon Isles",
      },
      [179388] = {
          "Hourglass Tidesage",
          "Tazavesh, the Veiled Market",
      },
      [193944] = {
          "Qalashi Lavamancer",
          "Neltharus",
          "enUS",
      },
      [122970] = {
          "Shadowblade Stalker",
          "Atal'Dazar",
          "enUS",
      },
      [190362] = {
          "Dazzling Dragonfly",
          "Halls of Infusion",
          "enUS",
      },
      [168357] = {
          "Zolramus Sorcerer",
          "The Necrotic Wake",
      },
      [40586] = {
          "Lady Naz'jar",
          "Throne of the Tides",
          "enUS",
      },
      [176573] = {
          "Mawsworn Woebringer",
          "Torghast, Tower of the Damned",
      },
      [136005] = {
          "Rowdy Reveler",
          "The MOTHERLODE!!",
      },
      [114783] = {
          "Reformed Maiden",
          "Return to Karazhan",
      },
      [184107] = {
          "Runic Protector",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [83392] = {
          "Rampaging Clefthoof",
          "Iron Docks",
      },
      [169893] = {
          "Nefarious Darkspeaker",
          "Theater of Pain",
      },
      [115395] = {
          "Queen",
          "Return to Karazhan",
      },
      [184911] = {
          "Urh Dismantler",
          "The Necrotic Wake",
      },
      [175861] = {
          "Glacial Spike",
          "Sanctum of Domination",
      },
      [189340] = {
          "Chargath, Bane of Scales",
          "Neltharus",
          "enUS",
      },
      [76407] = {
          "Ner'zhul",
          "Shadowmoon Burial Grounds",
      },
      [200926] = {
          "Igira the Cruel",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [122969] = {
          "Zanchuli Witch-Doctor",
          "Atal'Dazar",
          "enUS",
      },
      [132126] = {
          "Gilded Priestess",
          "Atal'Dazar",
          "enUS",
      },
      [45704] = {
          "Lurking Tempest",
          "The Vortex Pinnacle",
      },
      [105705] = {
          "Bound Energy",
          "Court of Stars",
      },
      [132491] = {
          "Kul Tiran Marksman",
          "Siege of Boralus",
      },
      [166396] = {
          "Noble Skirmisher",
          "Sanguine Depths",
      },
      [115486] = {
          "Erudite Slayer",
          "Return to Karazhan",
      },
      [154758] = {
          "Toxic Monstrosity",
          "Operation: Mechagon",
      },
      [130909] = {
          "Fetid Maggot",
          "The Underrot",
      },
      [58319] = {
          "Lesser Sha",
          "Temple of the Jade Serpent",
      },
      [168443] = {
          "Zolramus Necromancer",
          "The Necrotic Wake",
      },
      [164266] = {
          "Domina Venomblade",
          "Plaguefall",
      },
      [129374] = {
          "Scrimshaw Enforcer",
          "Siege of Boralus",
      },
      [136214] = {
          "Windspeaker Heldis",
          "Shrine of the Storm",
      },
      [129758] = {
          "Irontide Grenadier",
          "Freehold",
      },
      [206230] = {
          "Infinite Diversionist",
          "Dawn of the Infinite",
          "enUS",
      },
      [220815] = {
          "Blazing Fiend",
          "Darkflame Cleft",
      },
      [127315] = {
          "Reanimation Totem",
          "Atal'Dazar",
          "enUS",
      },
      [193373] = {
          "Nokhud Thunderfist",
          "The Nokhud Offensive",
          "enUS",
      },
      [208438] = {
          "Infinite Saboteur",
          "Dawn of the Infinite",
          "enUS",
      },
      [207438] = {
          "Headless Horseman",
          "Scarlet Monastery",
      },
      [198998] = {
          "Tyr, the Infinite Keeper",
          "Dawn of the Infinite",
          "enUS",
      },
      [187552] = {
          "Stormfang Shaman",
          "10.0 Dragon Isles",
      },
      [186644] = {
          "Leymor",
          "The Azure Vault",
          "enUS",
      },
      [65362] = {
          "Minion of Doubt",
          "Temple of the Jade Serpent",
      },
      [163520] = {
          "Forsworn Squad-Leader",
          "Spires of Ascension",
      },
      [114790] = {
          "Viz'aduum the Watcher",
          "Return to Karazhan",
      },
      [98542] = {
          "Amalgam of Souls",
          "Black Rook Hold",
          "enUS",
      },
      [115640] = {
          "Fuming Imp",
          "Faronaar",
      },
      [134284] = {
          "Fallen Deathspeaker",
          "The Underrot",
      },
      [134331] = {
          "King Rahu'ai",
          "Kings' Rest",
      },
      [191739] = {
          "Scalebane Lieutenant",
          "The Azure Vault",
          "enUS",
      },
      [126969] = {
          "Trothak",
          "Freehold",
      },
      [190368] = {
          "Flamecaller Aymi",
          "Halls of Infusion",
          "enUS",
      },
      [206140] = {
          "Coalesced Time",
          "Dawn of the Infinite",
          "enUS",
      },
      [176551] = {
          "Vault Purifier",
          "Tazavesh, the Veiled Market",
      },
      [104300] = {
          "Shadow Mistress",
          "Court of Stars",
      },
      [157634] = {
          "Flameforge Enforcer",
          "Torghast, Tower of the Damned",
      },
      [165805] = {
          "Shade of Kael'thas",
          "Castle Nathria",
      },
      [214421] = {
          "Corrupted Thunderer",
          "The Rookery",
      },
      [102253] = {
          "Understone Demolisher",
          "Neltharion's Lair",
      },
      [151476] = {
          "Blastatron X-80",
          "Operation: Mechagon",
      },
      [82039] = {
          "Rockspine Stinger",
          "The Everbloom",
          "enUS",
      },
      [104273] = {
          "Jazshariu",
          "Court of Stars",
      },
      [199325] = {
          "Nokhud Stormcaller",
          "The Nokhud Offensive",
      },
      [205723] = {
          "Time-Lost Aerobot",
          "Dawn of the Infinite",
          "enUS",
      },
      [185508] = {
          "Claw Fighter",
          "Brackenhide Hollow",
          "enUS",
      },
      [138187] = {
          "Grotesque Horror",
          "The Underrot",
      },
      [188067] = {
          "Flashfrost Chillweaver",
          "Ruby Life Pools",
          "enUS",
      },
      [190370] = {
          "Squallbringer Cyraz",
          "Halls of Infusion",
          "enUS",
      },
      [168109] = {
          "Empowered Mawsworn Ritualist",
          "Torghast, Tower of the Damned",
      },
      [166589] = {
          "Animated Weapon",
          "Sanguine Depths",
      },
      [130400] = {
          "Irontide Crusher",
          "Freehold",
      },
      [197535] = {
          "High Channeler Ryvati",
          "Ruby Life Pools",
          "enUS",
      },
      [165410] = {
          "High Adjudicator Aleez",
          "Halls of Atonement",
      },
      [198047] = {
          "Tempest Channeler",
          "Ruby Life Pools",
          "enUS",
      },
      [164707] = {
          "Congealed Slime",
          "Plaguefall",
      },
      [190371] = {
          "Primalist Earthshaker",
          "Halls of Infusion",
          "enUS",
      },
      [114792] = {
          "Virtuous Lady",
          "Return to Karazhan",
      },
      [205212] = {
          "Infinite Keeper",
          "Dawn of the Infinite",
          "enUS",
      },
      [99366] = {
          "Taintheart Summoner",
          "Darkheart Thicket",
          "enUS",
      },
      [128969] = {
          "Ashvane Commander",
          "Siege of Boralus",
      },
      [84400] = {
          "Flourishing Ancient",
          "The Everbloom",
          "enUS",
      },
      [168318] = {
          "Forsworn Goliath",
          "Spires of Ascension",
      },
      [136139] = {
          "Mechanized Peacekeeper",
          "The MOTHERLODE!!",
      },
      [144071] = {
          "Irontide Waveshaper",
          "Siege of Boralus",
      },
      [194990] = {
          "Stormseeker Acolyte",
          "Vault of the Incarnates",
          "enUS",
      },
      [131812] = {
          "Heartsbane Soulcharmer",
          "Waycrest Manor",
          "enUS",
      },
      [203678] = {
          "Grommash Hellscream",
          "Dawn of the Infinite",
          "enUS",
      },
      [213913] = {
          "Kobold Flametender",
          "Darkflame Cleft",
      },
      [150712] = {
          "Trixie Tazer",
          "Operation: Mechagon",
      },
      [190128] = {
          "Zul'gamux",
          "Tazavesh, the Veiled Market",
      },
      [177787] = {
          "Mawsworn Hopebreaker",
          "Sanctum of Domination",
      },
      [190373] = {
          "Primalist Galesinger",
          "Halls of Infusion",
          "enUS",
      },
      [155830] = {
          "Mawsworn Disciple",
          "Torghast, Tower of the Damned",
      },
      [188244] = {
          "Primal Juggernaut",
          "Ruby Life Pools",
          "enUS",
      },
      [199368] = {
          "Hardened Crystal",
          "The Azure Vault",
          "enUS",
      },
      [196043] = {
          "Primalist Infuser",
          "Halls of Infusion",
          "enUS",
      },
      [139269] = {
          "Gloom Horror",
          "Waycrest Manor",
          "enUS",
      },
      [190174] = {
          "Hypnosis Bat",
          "Operation: Mechagon",
      },
      [90997] = {
          "Mightstone Breaker",
          "Neltharion's Lair",
      },
      [75451] = {
          "Defiled Spirit",
          "Shadowmoon Burial Grounds",
      },
      [155831] = {
          "Mawsworn Soulbinder",
          "Torghast, Tower of the Damned",
      },
      [199749] = {
          "Timestream Anomaly",
          "Dawn of the Infinite",
          "enUS",
      },
      [134338] = {
          "Tidesage Enforcer",
          "Shrine of the Storm",
      },
      [205727] = {
          "Time-Lost Rocketeer",
          "Dawn of the Infinite",
          "enUS",
      },
      [171184] = {
          "Mythresh, Sky's Talons",
          "De Other Side",
      },
      [193352] = {
          "Hextrick Totem",
          "Brackenhide Hollow",
          "enUS",
      },
      [205366] = {
          "Time-Lost Wakethrasher",
          "Dawn of the Infinite",
          "enUS",
      },
      [194469] = {
          "Wither Slasher",
          "Brackenhide Hollow",
          "enUS",
      },
      [173190] = {
          "Court Hawkeye",
          "Castle Nathria",
      },
      [192934] = {
          "Volatile Infuser",
          "Vault of the Incarnates",
          "enUS",
      },
      [136186] = {
          "Tidesage Spiritualist",
          "Shrine of the Storm",
      },
      [168882] = {
          "Fleeting Manifestation",
          "Sanguine Depths",
      },
      [131847] = {
          "Waycrest Reveler",
          "Waycrest Manor",
          "enUS",
      },
      [82682] = {
          "Archmage Sol",
          "The Everbloom",
          "enUS",
      },
      [90998] = {
          "Blightshard Shaper",
          "Neltharion's Lair",
      },
      [198308] = {
          "Frostwrought Dominator",
          "Vault of the Incarnates",
          "enUS",
      },
      [199748] = {
          "Timeline Marauder",
          "Dawn of the Infinite",
          "enUS",
      },
      [214209] = {
          "Naz'jar Tempest Witch",
          "Throne of the Tides",
      },
      [168627] = {
          "Plaguebinder",
          "Plaguefall",
      },
      [180432] = {
          "Devoted Accomplice",
          "Tazavesh, the Veiled Market",
      },
      [83578] = {
          "Ogron Laborer",
          "Iron Docks",
      },
      [80808] = {
          "Neesa Nox",
          "Iron Docks",
      },
      [184023] = {
          "Vicious Basilisk",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [190377] = {
          "Primalist Icecaller",
          "Halls of Infusion",
          "enUS",
      },
      [192680] = {
          "Guardian Sentry",
          "Algeth'ar Academy",
          "enUS",
      },
      [155824] = {
          "Lumbering Creation",
          "Torghast, Tower of the Damned",
      },
      [120651] = {
          "Explosives",
          "Atal'Dazar",
      },
      [104278] = {
          "Felbound Enforcer",
          "Court of Stars",
      },
      [99360] = {
          "Vilethorn Blossom",
          "Darkheart Thicket",
          "enUS",
      },
      [83761] = {
          "Ogron Laborer",
          "Iron Docks",
      },
      [196263] = {
          "Nokhud Neophyte",
          "The Nokhud Offensive",
          "enUS",
      },
      [186284] = {
          "Gutchewer Bear",
          "Brackenhide Hollow",
          "enUS",
      },
      [135365] = {
          "Matron Alma",
          "Waycrest Manor",
          "enUS",
      },
      [131527] = {
          "Lord Waycrest",
          "Waycrest Manor",
          "enUS",
      },
      [130404] = {
          "Vermin Trapper",
          "Freehold",
      },
      [162744] = {
          "Nekthara the Mangler",
          "Theater of Pain",
      },
      [130661] = {
          "Venture Co. Earthshaper",
          "The MOTHERLODE!!",
      },
      [165222] = {
          "Zolramus Bonemender",
          "The Necrotic Wake",
      },
      [198311] = {
          "Flamewrought Eradicator",
          "Vault of the Incarnates",
          "enUS",
      },
      [171799] = {
          "Depths Warden",
          "Sanguine Depths",
      },
      [122984] = {
          "Dazar'ai Colossus",
          "Atal'Dazar",
          "enUS",
      },
      [126918] = {
          "Irontide Crackshot",
          "Freehold",
      },
      [192464] = {
          "Raging Ember",
          "Neltharus",
          "enUS",
      },
      [168886] = {
          "Virulax Blightweaver",
          "Plaguefall",
      },
      [167607] = {
          "Stoneborn Slasher",
          "Halls of Atonement",
      },
      [134599] = {
          "Imbued Stormcaller",
          "Temple of Sethraliss",
      },
      [91000] = {
          "Vileshard Hulk",
          "Neltharion's Lair",
      },
      [40825] = {
          "Erunak Stonespeaker",
          "Throne of the Tides",
          "enUS",
      },
      [102095] = {
          "Risen Lancer",
          "Black Rook Hold",
          "enUS",
      },
      [104270] = {
          "Guardian Construct",
          "Court of Stars",
      },
      [114796] = {
          "Wholesome Hostess",
          "Return to Karazhan",
      },
      [172981] = {
          "Kyrian Stitchwerk",
          "The Necrotic Wake",
      },
      [187566] = {
          "Hyena Matriarch",
          "10.0 Dragon Isles",
      },
      [134600] = {
          "Sandswept Marksman",
          "Temple of Sethraliss",
      },
      [122967] = {
          "Priestess Alun'za",
          "Atal'Dazar",
          "enUS",
      },
      [190381] = {
          "Rotburst Totem",
          "Brackenhide Hollow",
          "enUS",
      },
      [162103] = {
          "Executor Tarvold",
          "Sanguine Depths",
      },
      [115020] = {
          "Arcanid",
          "Return to Karazhan",
      },
      [174773] = {
          "Spiteful Shade",
          "Black Rook Hold",
          "enUS",
      },
      [206064] = {
          "Coalesced Moment",
          "Dawn of the Infinite",
          "enUS",
      },
      [75899] = {
          "Possessed Soul",
          "Shadowmoon Burial Grounds",
      },
      [184140] = {
          "Xy Acolyte",
          "Sepulcher of the First Ones",
      },
      [91001] = {
          "Tarspitter Lurker",
          "Neltharion's Lair",
      },
      [196671] = {
          "Arcane Ravager",
          "Algeth'ar Academy",
          "enUS",
      },
      [165556] = {
          "Fleeting Manifestation",
          "Sanguine Depths",
      },
      [176565] = {
          "Disruptive Patron",
          "Tazavesh, the Veiled Market",
      },
      [168156] = {
          "Remornia",
          "Castle Nathria",
      },
      [169905] = {
          "Risen Warlord",
          "De Other Side",
      },
      [165483] = {
          "Court Hierarch",
          "Castle Nathria",
      },
      [40765] = {
          "Commander Ulthok",
          "Throne of the Tides",
          "enUS",
      },
      [114542] = {
          "Ghostly Philanthropist",
          "Return to Karazhan",
      },
      [194467] = {
          "Disease Slasher",
          "Brackenhide Hollow",
          "enUS",
      },
      [192786] = {
          "Qalashi Plunderer",
          "Neltharus",
          "enUS",
      },
      [175992] = {
          "Dutiful Attendant",
          "Castle Nathria",
      },
      [133835] = {
          "Feral Bloodswarmer",
          "The Underrot",
      },
      [199595] = {
          "Nokhud Defender",
          "The Nokhud Offensive",
      },
      [98810] = {
          "Wrathguard Bladelord",
          "Black Rook Hold",
          "enUS",
      },
      [212389] = {
          "Cursedheart Invader",
          "The Stonevault",
      },
      [91002] = {
          "Rotdrool Grabber",
          "UNKNOWN",
      },
      [84989] = {
          "Infested Icecaller",
          "The Everbloom",
          "enUS",
      },
      [166275] = {
          "Mistveil Shaper",
          "Mists of Tirna Scithe",
      },
      [105715] = {
          "Watchful Inquisitor",
          "Court of Stars",
      },
      [133836] = {
          "Reanimated Guardian",
          "The Underrot",
      },
      [81407] = {
          "Grimrail Bombardier",
          "Grimrail Depot",
      },
      [163862] = {
          "Defender of Many Eyes",
          "Plaguefall",
      },
      [130012] = {
          "Irontide Ravager",
          "Freehold",
      },
      [167612] = {
          "Stoneborn Reaver",
          "Halls of Atonement",
      },
      [186229] = {
          "Wilted Oak",
          "Brackenhide Hollow",
          "enUS",
      },
      [201788] = {
          "Dazhak",
          "Dawn of the Infinite",
          "enUS",
      },
      [183424] = {
          "Virtuous Gentleman",
          "Return to Karazhan",
      },
      [92538] = {
          "Tarspitter Grub",
          "Neltharion's Lair",
      },
      [187315] = {
          "Disease Slasher",
          "Brackenhide Hollow",
          "enUS",
      },
      [163503] = {
          "Etherdiver",
          "Spires of Ascension",
      },
      [75713] = {
          "Shadowmoon Bone-Mender",
          "Shadowmoon Burial Grounds",
      },
      [91003] = {
          "Rokmora",
          "Neltharion's Lair",
          "enUS",
      },
      [84990] = {
          "Addled Arcanomancer",
          "The Everbloom",
          "enUS",
      },
      [194895] = {
          "Unstable Squall",
          "The Nokhud Offensive",
          "enUS",
      },
      [134158] = {
          "Shadow-Borne Champion",
          "Kings' Rest",
      },
      [150146] = {
          "Scrapbone Shaman",
          "Operation: Mechagon",
      },
      [193457] = {
          "Balara",
          "The Nokhud Offensive",
          "enUS",
      },
      [205265] = {
          "Time-Displaced Trooper",
          "Dawn of the Infinite",
          "enUS",
      },
      [122965] = {
          "Vol'kaal",
          "Atal'Dazar",
          "enUS",
      },
      [114544] = {
          "Skeletal Usher",
          "Return to Karazhan",
      },
      [95834] = {
          "Valarjar Mystic",
          "Halls of Valor",
      },
      [155908] = {
          "Deathspeaker",
          "Torghast, Tower of the Damned",
      },
      [157571] = {
          "Mawsworn Flametender",
          "Torghast, Tower of the Damned",
      },
      [97197] = {
          "Valarjar Purifier",
          "Halls of Valor",
      },
      [86526] = {
          "Grom'kar Chainmaster",
          "Iron Docks",
      },
      [201792] = {
          "Ahnzon",
          "Dawn of the Infinite",
          "enUS",
      },
      [47238] = {
          "Whipping Wind",
          "The Vortex Pinnacle",
      },
      [99192] = {
          "Shade of Xavius",
          "Darkheart Thicket",
          "enUS",
      },
      [165824] = {
          "Nar'zudah",
          "The Necrotic Wake",
      },
      [165137] = {
          "Zolramus Gatekeeper",
          "The Necrotic Wake",
      },
      [165946] = {
          "Mordretha, the Endless Empress",
          "Theater of Pain",
      },
      [214673] = {
          "Flavor Scientist",
          "Cinderbrew Meadery",
      },
      [133436] = {
          "Venture Co. Skyscorcher",
          "The MOTHERLODE!!",
      },
      [179386] = {
          "Corsair Officer",
          "Tazavesh, the Veiled Market",
      },
      [204206] = {
          "Horde Farseer",
          "Dawn of the Infinite",
          "enUS",
      },
      [75652] = {
          "Void Spawn",
          "Shadowmoon Burial Grounds",
      },
      [212793] = {
          "Void Ascendant",
          "The Rookery",
      },
      [100526] = {
          "Tormented Bloodseeker",
          "Darkheart Thicket",
          "enUS",
      },
      [168384] = {
          "Flesh Construct",
          "The Necrotic Wake",
      },
      [98681] = {
          "Rook Spinner",
          "Black Rook Hold",
          "enUS",
      },
      [186658] = {
          "Stonevault Geomancer",
          "Uldaman: Legacy of Tyr",
          "enUS",
      },
      [185528] = {
          "Trickclaw Mystic",
          "Brackenhide Hollow",
          "enUS",
      },
      [189878] = {
          "Nathrezim Infiltrator",
          "Tazavesh, the Veiled Market",
      },
      [155812] = {
          "Mawsworn Ritualist",
          "Torghast, Tower of the Damned",
      },
      [144298] = {
          "Defense Bot Mk III",
          "Operation: Mechagon",
      },
      [212681] = {
          "Vicious Snap Dragon",
          "Throne of the Tides",
          "enUS",
      },
      [152009] = {
          "Malfunctioning Scrapbot",
          "Operation: Mechagon",
      },
      [105704] = {
          "Arcane Manifestation",
          "Court of Stars",
      },
      [163620] = {
          "Rotspew",
          "The Necrotic Wake",
      },
      [185529] = {
          "Bracken Warscourge",
          "Brackenhide Hollow",
          "enUS",
      },
      [175550] = {
          "Volatile Faerie",
          "9.0 Bastion Arena - Path of Ascension",
      },
      [77700] = {
          "Shadowmoon Exhumer",
          "Shadowmoon Burial Grounds",
      },
      [164804] = {
          "Droman Oulfarran",
          "Mists of Tirna Scithe",
      },
      [183033] = {
          "Grim Reflection",
          "Sepulcher of the First Ones",
      },
      [190348] = {
          "Primalist Ravager",
          "Halls of Infusion",
          "enUS",
      },
      [83025] = {
          "Grom'kar Battlemaster",
          "Iron Docks",
      },
      [213932] = {
          "Sureki Militant",
          "The Dawnbreaker",
      },
      [76518] = {
          "Ritual of Bones",
          "Shadowmoon Burial Grounds",
      },
      [129559] = {
          "Cutwater Duelist",
          "Freehold",
      },
      [91006] = {
          "Rockback Gnasher",
          "Neltharion's Lair",
      },
      [132532] = {
          "Kul Tiran Marksman",
          "Siege of Boralus",
      },
      [97720] = {
          "Blightshard Skitter",
          "Neltharion's Lair",
      },
      [176575] = {
          "Mawsworn Soulwarden",
          "Torghast, Tower of the Damned",
      },
      [170690] = {
          "Diseased Horror",
          "Theater of Pain",
      },
      [113398] = {
          "Bloodtainted Fury",
          "Darkheart Thicket",
      },
      [180473] = {
          "Unstoppable Abomination",
          "Sanctum of Domination",
      },
      [131824] = {
          "Sister Solena",
          "Waycrest Manor",
          "enUS",
      },
      [167998] = {
          "Portal Guardian",
          "Theater of Pain",
      },
      [167876] = {
          "Inquisitor Sigar",
          "Halls of Atonement",
      },
      [114803] = {
          "Spectral Stable Hand",
          "Return to Karazhan",
      },
      [165762] = {
          "Soul Infuser",
          "Castle Nathria",
      },
      [126848] = {
          "Captain Eudora",
          "Freehold",
      },
      [213934] = {
          "Nightfall Tactician",
          "The Dawnbreaker",
      },
      [212673] = {
          "Naz'jar Ravager",
          "Throne of the Tides",
          "enUS",
      },
      [196712] = {
          "Nullification Device",
          "Halls of Infusion",
          "enUS",
      },
      [198326] = {
          "Stormwrought Despoiler",
          "Vault of the Incarnates",
          "enUS",
      },
      [169924] = {
          "Veteran Stoneguard",
          "Castle Nathria",
      },
      [151325] = {
          "Alarm-o-Bot",
          "Operation: Mechagon",
      },
      [203799] = {
          "Horde Axe Thrower",
          "Dawn of the Infinite",
          "enUS",
      },
      [179733] = {
          "Invigorating Fish Stick",
          "Tazavesh, the Veiled Market",
      },
      [97788] = {
          "Storm Drake",
          "Halls of Valor",
      },
      [45926] = {
          "Servant of Asaad",
          "The Vortex Pinnacle",
      },
      [125977] = {
          "Reanimation Totem",
          "Atal'Dazar",
          "enUS",
      },
      [165872] = {
          "Flesh Crafter",
          "The Necrotic Wake",
      },
      [135474] = {
          "Thistle Acolyte",
          "Waycrest Manor",
          "enUS",
      },
      [194745] = {
          "Rotfang Hyena",
          "Brackenhide Hollow",
          "enUS",
      },
      [206070] = {
          "Chronaxie",
          "Dawn of the Infinite",
          "enUS",
      },
      [164552] = {
          "Rotmarrow Slime",
          "Plaguefall",
      },
      [129517] = {
          "Reanimated Raptor",
          "Atal'Dazar",
          "enUS",
      },
      [185534] = {
          "Bonebolt Hunter",
          "Brackenhide Hollow",
          "enUS",
      },
      [82590] = {
          "Grimrail Scout",
          "Grimrail Depot",
      },
      [91008] = {
          "Rockbound Pelter",
          "Neltharion's Lair",
      },
      [122971] = {
          "Dazar'ai Juggernaut",
          "Atal'Dazar",
          "enUS",
      },
      [214117] = {
          "Stormflurry Totem",
          "Throne of the Tides",
          "enUS",
      },
      [192955] = {
          "Draconic Illusion",
          "The Azure Vault",
          "enUS",
      },
      [191164] = {
          "Arcane Tender",
          "The Azure Vault",
          "enUS",
      },
      [213937] = {
          "Rasha'nan",
          "The Dawnbreaker",
      },
      [169159] = {
          "Unstable Canister",
          "Plaguefall",
      },
      [195842] = {
          "Ukhel Corruptor",
          "The Nokhud Offensive",
          "enUS",
      },
      [208367] = {
          "Pip",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [221102] = {
          "Elder Shadeweaver",
          "City of Threads",
      },
      [180431] = {
          "Focused Ritualist",
          "Tazavesh, the Veiled Market",
      },
      [133593] = {
          "Expert Technician",
          "The MOTHERLODE!!",
      },
      [190407] = {
          "Aqua Rager",
          "Halls of Infusion",
          "enUS",
      },
      [98813] = {
          "Bloodscent Felhound",
          "Black Rook Hold",
          "enUS",
      },
      [167113] = {
          "Spinemaw Acidgullet",
          "Mists of Tirna Scithe",
      },
      [212403] = {
          "Cursedheart Invader",
          "The Stonevault",
      },
      [213338] = {
          "Forgebound Mender",
          "The Stonevault",
      },
      [131009] = {
          "Spirit of Gold",
          "Atal'Dazar",
          "enUS",
      },
      [213217] = {
          "Speaker Brokk",
          "The Stonevault",
      },
      [209333] = {
          "Gnarlroot",
          "Amirdrassil, the Dream's Hope",
          "enUS",
      },
      [207198] = {
          "Cursed Thunderer",
          "The Rookery",
      },
      [220195] = {
          "Sureki Silkbinder",
          "City of Threads",
      },
      [185537] = {
          "Foul Controller",
          "Sepulcher of the First Ones",
      },
      [224271] = {
          "Twilight Warlock",
          "Grim Batol",
      },
      [221979] = {
          "Void Bound Howler",
          "The Stonevault",
      },
      [165111] = {
          "Drust Spiteclaw",
          "Mists of Tirna Scithe",
      },
      [186246] = {
          "Fleshripper Vulture",
          "Brackenhide Hollow",
          "enUS",
      },
      [220003] = {
          "Eye of the Queen",
          "City of Threads",
      },
      [224219] = {
          "Twilight Earthcaller",
          "Grim Batol",
      },
      [216364] = {
          "Blood Overseer",
          "Ara-Kara, City of Echoes",
      },
      [207940] = {
          "Prioress Murrpray",
          "Priory of the Sacred Flame",
      },
      [163126] = {
          "Brittlebone Mage",
          "The Necrotic Wake",
      },
      [210108] = {
          "E.D.N.A",
          "The Stonevault",
      },
      [212412] = {
          "Sootsnout",
          "Darkflame Cleft",
      },
      [170480] = {
          "Atal'ai Deathwalker",
          "De Other Side",
      },
      [178630] = {
          "Mawsworn Seeker",
          "Sanctum of Domination",
      },
      [164557] = {
          "Shard of Halkias",
          "Halls of Atonement",
      },
      [213343] = {
          "Forge Loader",
          "The Stonevault",
      },
      [134364] = {
          "Faithless Tender",
          "Temple of Sethraliss",
      },
      [155090] = {
          "Anodized Coilbearer",
          "Operation: Mechagon",
      },
      [83846] = {
          "Yalnu",
          "The Everbloom",
          "enUS",
      },
      [190401] = {
          "Gusting Proto-Dragon",
          "Halls of Infusion",
      },
      [196798] = {
          "Corrupted Manafiend",
          "Algeth'ar Academy",
      },
      [96512] = {
          "Archdruid Glaidalis",
          "Darkheart Thicket",
          "enUS",
      },
      [96640] = {
          "Valarjar Marksman",
          "Halls of Valor",
      },
      [213942] = {
          "Sludge",
          "Throne of the Tides",
          "enUS",
      },
      [196116] = {
          "Crystal Fury",
          "The Azure Vault",
          "enUS",
      },
      [189719] = {
          "Watcher Irideus",
          "Halls of Infusion",
          "enUS",
      },
      [179852] = {
          "Soulless Vengeance",
          "The Shadowlands",
      },
      [199027] = {
          "Magmas",
          "Vault of the Incarnates",
          "enUS",
      },
      [224962] = {
          "Cursedforge Mender",
          "The Stonevault",
      },
      [191736] = {
          "Crawth",
          "Algeth'ar Academy",
          "enUS",
      },
      [43875] = {
          "Asaad",
          "The Vortex Pinnacle",
          "enUS",
      },
      [190484] = {
          "Kyrakka",
          "Ruby Life Pools",
          "enUS",
      },
  },
  ["aura_cooldown_reverse"] = false,
  ["health_selection_overlay_alpha"] = 0.29999998211861,
  ["aura_stack_shadow_color"] = {
      nil,
      nil,
      nil,
      0,
  },
  ["minor_height_scale"] = 0.99999994039536,
  ["aura_padding"] = 2,
  ["indicator_worldboss"] = false,
  ["last_news_time"] = 1551553489,
  ["cast_statusbar_fadeout_time"] = 0.48999997973442,
  ["aura_stack_size"] = 7,
  ["plater_resources_align"] = "horizontal",
  ["aura_height2"] = 13,
  ["cast_colors"] = {
      [384524] = {
          true,
          "orangered",
          "",
      },
      [376683] = {
          true,
          "orangered",
          "",
      },
      [375727] = {
          true,
          "orangered",
          "",
      },
      [412129] = {
          true,
          "orangered",
          "",
      },
      [265568] = {
          false,
          "orchid",
          "",
      },
      [372222] = {
          true,
          "orangered",
          "",
      },
      [372223] = {
          false,
          "darkorange",
          "",
      },
      [427176] = {
          true,
          "orchid",
          "",
      },
      [199151] = {
          true,
          "blue",
          "",
      },
      [323137] = {
          true,
          "orangered",
          "",
      },
      [372735] = {
          true,
          "orchid",
          "",
      },
      [266209] = {
          true,
          "white",
          "",
      },
      [269843] = {
          true,
          "orangered",
          "",
      },
      [388801] = {
          true,
          "orchid",
          "",
      },
      [426860] = {
          true,
          "orangered",
          "",
      },
      [260894] = {
          true,
          "orangered",
          "",
      },
      [375351] = {
          true,
          "orangered",
          "",
      },
      [387910] = {
          true,
          "orchid",
          "",
      },
      [226406] = {
          true,
          "orangered",
          "",
      },
      [183088] = {
          true,
          "orangered",
          "",
      },
      [412200] = {
          true,
          "orchid",
          "",
      },
      [197974] = {
          true,
          "orangered",
          "",
      },
      [384597] = {
          false,
          "white",
      },
      [370764] = {
          true,
          "orchid",
          "",
      },
      [201226] = {
          true,
          "orangered",
          "",
      },
      [377204] = {
          true,
          "orangered",
          "",
      },
      [412012] = {
          true,
          "orchid",
          "",
      },
      [427376] = {
          true,
          "orchid",
          "",
      },
      [413607] = {
          false,
          "orchid",
          "",
      },
      [432031] = {
          true,
          "orchid",
          "",
      },
      [369365] = {
          false,
          "darkorange",
          "",
      },
      [372107] = {
          true,
          "orangered",
          "",
      },
      [257870] = {
          true,
          "orchid",
          "",
      },
      [256627] = {
          true,
          "orangered",
          "",
      },
      [333477] = {
          true,
          "orangered",
          "",
      },
      [439621] = {
          true,
          "orangered",
          "",
      },
      [451543] = {
          true,
          "orangered",
          "",
      },
      [376892] = {
          true,
          "orangered",
          "",
      },
      [367521] = {
          true,
          "orchid",
          "",
      },
      [200784] = {
          true,
          "orchid",
          "",
      },
      [257426] = {
          true,
          "orangered",
          "",
      },
      [397931] = {
          true,
          "mediumturquoise",
          "",
      },
      [269029] = {
          true,
          "orangered",
          "",
      },
      [369563] = {
          true,
          "orangered",
          "",
      },
      [200913] = {
          true,
          "orangered",
          "",
      },
      [422541] = {
          true,
          "orchid",
          "",
      },
      [448105] = {
          true,
          "orangered",
          "",
      },
      [422414] = {
          true,
          "orangered",
          "",
      },
      [427323] = {
          true,
          "orangered",
          "",
      },
      [429427] = {
          true,
          "orchid",
          "",
      },
      [412215] = {
          true,
          "orangered",
          "",
      },
      [257397] = {
          true,
          "darkorange",
          "",
      },
      [375943] = {
          true,
          "orangered",
          "",
      },
      [448619] = {
          true,
          "orangered",
          "",
      },
      [372311] = {
          true,
          "orangered",
          "",
      },
      [449130] = {
          true,
          "orangered",
          "",
      },
      [437719] = {
          true,
          "orchid",
          "",
      },
      [333488] = {
          true,
          "orangered",
          "",
      },
      [369061] = {
          true,
          "orangered",
          "",
      },
      [396665] = {
          true,
          "orangered",
          "",
      },
      [377732] = {
          true,
          "orchid",
          "",
      },
      [408141] = {
          true,
          "orangered",
          "",
      },
      [388060] = {
          true,
          "orangered",
          "",
      },
      [450854] = {
          true,
          "orangered",
          "",
      },
      [369573] = {
          true,
          "orangered",
          "",
      },
      [164357] = {
          true,
          "orangered",
          "",
      },
      [375439] = {
          true,
          "orangered",
          "",
      },
      [378818] = {
          true,
          "orchid",
          "",
      },
      [411012] = {
          true,
          "orangered",
          "",
      },
      [386660] = {
          true,
          "orangered",
          "",
      },
      [253544] = {
          false,
          "lime",
          "",
      },
      [382708] = {
          true,
          "orangered",
          "",
      },
      [200345] = {
          true,
          "orchid",
          "",
      },
      [188169] = {
          true,
          "orangered",
          "",
      },
      [385578] = {
          true,
          "orangered",
          "",
      },
      [375251] = {
          true,
          "orangered",
          "",
      },
      [428293] = {
          true,
          "orangered",
          "",
      },
      [382712] = {
          true,
          "orangered",
          "",
      },
      [374361] = {
          true,
          "orangered",
          "",
      },
      [371875] = {
          false,
          "orangered",
          "",
      },
      [426893] = {
          true,
          "orangered",
          "",
      },
      [369675] = {
          false,
          "darkorange",
          "",
      },
      [375065] = {
          false,
          "orangered",
          "",
      },
      [265540] = {
          true,
          "orchid",
          "",
      },
      [440218] = {
          true,
          "orangered",
          "",
      },
      [384868] = {
          true,
          "orangered",
          "",
      },
      [272609] = {
          true,
          "orangered",
          "",
      },
      [226296] = {
          true,
          "orangered",
          "",
      },
      [397889] = {
          true,
          "mediumturquoise",
          "",
      },
      [257756] = {
          true,
          "orchid",
          "",
      },
      [409492] = {
          false,
          "darkorange",
          "",
      },
      [453161] = {
          true,
          "orangered",
          "",
      },
      [253517] = {
          false,
          "white",
          "",
      },
      [257862] = {
          true,
          "orangered",
          "",
      },
      [331718] = {
          true,
          "orangered",
          "",
      },
      [388392] = {
          true,
          "darkorange",
          "",
      },
      [377034] = {
          true,
          "orangered",
          "",
      },
      [427025] = {
          true,
          "orangered",
          "",
      },
      [419351] = {
          true,
          "orangered",
          "",
      },
      [451496] = {
          true,
          "orangered",
          "",
      },
      [372225] = {
          true,
          "orchid",
          "",
      },
      [372201] = {
          true,
          "orangered",
          "",
      },
      [381525] = {
          true,
          "orangered",
          "",
      },
      [367484] = {
          true,
          "orchid",
          "",
      },
      [427616] = {
          true,
          "orangered",
          "",
      },
      [447395] = {
          true,
          "orangered",
          "",
      },
      [265721] = {
          true,
          "orangered",
          "",
      },
      [426645] = {
          true,
          "orangered",
          "",
      },
      [87618] = {
          true,
          "orangered",
          "",
      },
      [321968] = {
          true,
          "orangered",
          "",
      },
      [375327] = {
          true,
          "orangered",
          "",
      },
      [387950] = {
          true,
          "orangered",
          "",
      },
      [448640] = {
          true,
          "orangered",
          "",
      },
      [377559] = {
          true,
          "orangered",
          "",
      },
      [209628] = {
          true,
          "blue",
          "",
      },
      [382277] = {
          true,
          "orangered",
          "",
      },
      [383823] = {
          true,
          "orchid",
          "",
      },
      [441119] = {
          true,
          "orangered",
          "",
      },
      [169179] = {
          true,
          "orangered",
          "",
      },
      [416139] = {
          true,
          "orangered",
          "",
      },
      [427359] = {
          true,
          "orchid",
          "",
      },
      [382233] = {
          true,
          "orangered",
          "",
      },
      [369465] = {
          true,
          "orchid",
          "",
      },
      [431494] = {
          true,
          "orangered",
          "",
      },
      [200768] = {
          true,
          "orangered",
          "",
      },
      [433662] = {
          true,
          "orchid",
          "",
      },
      [265019] = {
          true,
          "orangered",
          "",
      },
      [449090] = {
          true,
          "orangered",
          "",
      },
      [385958] = {
          true,
          "orangered",
          "",
      },
      [188404] = {
          true,
          "orangered",
          "",
      },
      [445457] = {
          true,
          "orangered",
          "",
      },
      [388911] = {
          true,
          "orchid",
          "",
      },
      [340160] = {
          true,
          "orangered",
          "",
      },
      [432198] = {
          true,
          "orangered",
          "",
      },
      [200291] = {
          true,
          "orchid",
          "",
      },
      [156718] = {
          true,
          "darkorange",
          "",
      },
      [388976] = {
          true,
          "orangered",
          "",
      },
      [369828] = {
          true,
          "orchid",
          "",
      },
      [434779] = {
          true,
          "orangered",
          "",
      },
      [391118] = {
          true,
          "orangered",
          "",
      },
      [323496] = {
          true,
          "orangered",
          "",
      },
      [324323] = {
          true,
          "orangered",
          "",
      },
      [427342] = {
          true,
          "orchid",
          "",
      },
      [443500] = {
          true,
          "orangered",
          "",
      },
      [88194] = {
          false,
          "orangered",
          "",
      },
      [373742] = {
          true,
          "orangered",
          "",
      },
      [385536] = {
          true,
          "orchid",
          "",
      },
      [432520] = {
          true,
          "orchid",
          "",
      },
      [384978] = {
          true,
          "orchid",
          "",
      },
      [200261] = {
          true,
          "orangered",
          "",
      },
      [432967] = {
          true,
          "orchid",
          "",
      },
      [375348] = {
          true,
          "orangered",
          "",
      },
      [396812] = {
          true,
          "orchid",
          "",
      },
      [411994] = {
          true,
          "darkorange",
          "",
      },
      [369409] = {
          true,
          "orangered",
          "",
      },
      [372087] = {
          true,
          "orangered",
          "",
      },
      [462216] = {
          true,
          "orangered",
          "",
      },
      [412505] = {
          true,
          "orangered",
          "",
      },
      [226304] = {
          true,
          "orangered",
          "",
      },
      [391723] = {
          true,
          "orangered",
          "",
      },
      [260793] = {
          true,
          "orangered",
          "",
      },
      [193505] = {
          true,
          "orangered",
          "",
      },
      [320822] = {
          true,
          "orchid",
          "",
      },
      [434824] = {
          true,
          "orangered",
          "",
      },
      [393432] = {
          true,
          "orangered",
          "",
      },
      [265372] = {
          true,
          "orangered",
          "",
      },
      [183465] = {
          true,
          "orangered",
          "",
      },
      [376170] = {
          true,
          "orangered",
          "",
      },
      [268202] = {
          true,
          "orchid",
          "",
      },
      [88308] = {
          true,
          "orangered",
          "",
      },
      [435012] = {
          true,
          "orangered",
          "",
      },
      [376171] = {
          false,
          "orchid",
          "",
      },
      [255567] = {
          true,
          "orangered",
          "",
      },
      [413529] = {
          true,
          "orangered",
          "",
      },
      [377383] = {
          true,
          "orangered",
          "",
      },
      [169929] = {
          true,
          "orangered",
          "",
      },
      [253721] = {
          true,
          "orchid",
          "",
      },
      [200630] = {
          false,
          "darkorange",
          "",
      },
  },
  ["castbar_target_anchor"] = {
      ["side"] = 9,
  },
  ["class_colors"] = {
      ["DEATHKNIGHT"] = {
          ["colorStr"] = "ffc31d3a",
      },
      ["WARRIOR"] = {
          ["colorStr"] = "ffc69a6d",
      },
      ["PALADIN"] = {
          ["colorStr"] = "fff48bb9",
      },
      ["WARLOCK"] = {
          ["colorStr"] = "ff8687ed",
      },
      ["DEMONHUNTER"] = {
          ["colorStr"] = "ffa22fc8",
      },
      ["ROGUE"] = {
          ["colorStr"] = "fffff467",
      },
      ["DRUID"] = {
          ["colorStr"] = "ffff7c09",
      },
      ["EVOKER"] = {
          ["colorStr"] = "ff33937e",
      },
      ["SHAMAN"] = {
          ["colorStr"] = "ff006fdd",
      },
  },
  ["script_auto_imported"] = {
      ["Relics 9.2 M Dungeons"] = 2,
      ["Cast - Effect After Cast [P]"] = 2,
      ["Cast - Circular Swipe"] = 4,
      ["Aura - Debuff Alert"] = 12,
      ["Cast - Castbar is Timer [P]"] = 2,
      ["Cast - Ultra Important"] = 14,
      ["Add - Health Markers [P]"] = 2,
      ["Cast - Small Alert"] = 12,
      ["Aura - Invalidate Unit"] = 1,
      ["Add - Important [P]"] = 4,
      ["Unit - Main Target"] = 11,
      ["Aura - Blink Time Left"] = 13,
      ["Add - Tag Number [P]"] = 2,
      ["Unit Power"] = 1,
      ["Cast - Glowing [P]"] = 10,
      ["Cast - Important Target [P]"] = 2,
      ["Unit - Show Energy"] = 11,
      ["Blink by Time Left"] = 1,
      ["Cast - Shield Interrupt"] = 2,
      ["Cast - Alert + Timer [P]"] = 4,
      ["Explosion Affix M+"] = 14,
      ["Unit - Health Markers"] = 12,
      ["Aura is Shield [P]"] = 2,
      ["Add - Warning [P]"] = 5,
      ["Add - Explode on Die [P]"] = 1,
      ["Aura While Casting [P]"] = 1,
      ["Cast - Big Alert"] = 14,
      ["Cast - On Going Cast [P]"] = 2,
      ["Spiteful Affix"] = 3,
      ["Cast - Stop Casting"] = 4,
      ["Auto Set Skull"] = 11,
      ["Color Change"] = 1,
      ["Cast - Quick Flash"] = 2,
      ["Add - Non Elite Trash [P]"] = 4,
      ["Cast - Tank Interrupt"] = 12,
      ["Aura Border Color"] = 1,
      ["Countdown"] = 11,
      ["Fixate by Unit Buff [P]"] = 2,
      ["Cast - Frontal Cone"] = 15,
      ["Fixate"] = 11,
      ["Unit - Important"] = 11,
      ["Aura - Buff Alert"] = 15,
      ["Cast - Very Important"] = 15,
      ["Fixate On You"] = 11,
  },
  ["extra_icon_anchor"] = {
      ["x"] = 0,
      ["side"] = 9,
  },
  ["range_check_alpha"] = 0.7999999523162842,
  ["semver"] = "1.0.37",
  ["plater_resources_padding"] = 2,
  ["aura_frame2_anchor"] = {
      ["y"] = 0,
      ["x"] = 2.5,
      ["side"] = 6,
  },
  ["cast_statusbar_texture"] = "Cronix",
  ["auto_toggle_friendly"] = {
      ["world"] = false,
  },
  ["indicator_faction"] = false,
  ["show_healthbars_on_not_attackable"] = true,
  ["plater_resources_show_number"] = false,
  ["debuff_show_cc_border"] = {
      0.090196080505848,
      0.090196080505848,
      0.090196080505848,
  },
  ["aura_consolidate"] = true,
  ["extra_icon_width"] = 12,
  ["health_statusbar_texture"] = "Cronix",
  ["hook_auto_imported"] = {
      ["Color Automation"] = 1,
      ["Blockade Encounter"] = 1,
      ["Cast Bar Icon Config"] = 2,
      ["Hide Neutral Units"] = 1,
      ["Aura Reorder"] = 3,
      ["Reorder Nameplate"] = 4,
      ["Dont Have Aura"] = 1,
      ["Players Targetting Amount"] = 4,
      ["Bwonsamdi Reaping"] = 1,
      ["Jaina Encounter"] = 6,
      ["Monk Statue"] = 2,
      ["Combo Points"] = 6,
      ["Extra Border"] = 2,
      ["Targetting Alpha"] = 3,
      ["Target Color"] = 3,
      ["Attacking Specific Unit"] = 2,
      ["Execute Range"] = 1,
  },
  ["extra_icon_border_color"] = {
      0.090196080505848,
      0.090196080505848,
      0.090196080505848,
  },
  ["minor_width_scale"] = 0.99999994039536,
  ["indicator_pet"] = false,
  ["captured_spells"] = {
      [384524] = {
          ["encounterName"] = "Watcher Irideus",
          ["source"] = "Watcher Irideus",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189719,
      },
      [376683] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186151,
      },
      [375727] = {
          ["encounterName"] = "Chrono-Lord Deios",
          ["source"] = "Chrono-Lord Deios",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184125,
      },
      [88308] = {
          ["encounterName"] = "Altairus",
          ["source"] = "Altairus",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 43873,
      },
      [372222] = {
          ["encounterName"] = "Azureblade",
          ["source"] = "Azureblade",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186739,
      },
      [427176] = {
          ["encounterName"] = "The Darkness",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 213008,
      },
      [253721] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 127879,
      },
      [323137] = {
          ["encounterName"] = "Ingra Maloch",
          ["source"] = "Droman Oulfarran",
          ["npcID"] = 164804,
          ["isChanneled"] = false,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["encounterID"] = 2397,
      },
      [372735] = {
          ["encounterName"] = "",
          ["source"] = "Flashfrost Earthshaper",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 187969,
      },
      [266209] = {
          ["encounterName"] = "",
          ["source"] = "Fallen Deathspeaker",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 134284,
      },
      [269843] = {
          ["encounterName"] = "Unbound Abomination",
          ["source"] = "Unbound Abomination",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 133007,
      },
      [388801] = {
          ["encounterName"] = "",
          ["source"] = "Risen Warrior",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 195855,
      },
      [426860] = {
          ["encounterName"] = "Anub'ikkaj",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 211089,
      },
      [260894] = {
          ["encounterName"] = "Elder Leaxa",
          ["source"] = "Elder Leaxa",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 131318,
      },
      [375351] = {
          ["encounterName"] = "",
          ["source"] = "Glacial Proto-Dragon",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190403,
      },
      [387910] = {
          ["encounterName"] = "",
          ["source"] = "Algeth'ar Echoknight",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196200,
      },
      [226406] = {
          ["encounterName"] = "",
          ["source"] = "Emberhusk Dominator",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 102287,
      },
      [183088] = {
          ["encounterName"] = "",
          ["source"] = "Mightstone Breaker",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 90997,
      },
      [412200] = {
          ["encounterName"] = "",
          ["source"] = "Time-Lost Aerobot",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205723,
      },
      [197974] = {
          ["encounterName"] = "Ilysanna Ravencrest",
          ["source"] = "Soul-torn Vanguard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 100485,
      },
      [370764] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196116,
      },
      [201226] = {
          ["encounterName"] = "",
          ["source"] = "Bloodtainted Fury",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 100531,
      },
      [377204] = {
          ["encounterName"] = "Warlord Sargha",
          ["source"] = "Warlord Sargha",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189901,
      },
      [412012] = {
          ["encounterName"] = "",
          ["source"] = "Infinite Timeslicer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205408,
      },
      [427376] = {
          ["encounterName"] = "",
          ["source"] = "Gilgoblin Hunter",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 40935,
      },
      [432031] = {
          ["encounterName"] = "Ki'katal the Harvester",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 215968,
      },
      [447395] = {
          ["encounterName"] = "Forgemaster Throngus",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 40177,
      },
      [372107] = {
          ["encounterName"] = "Kokia Blazehoof",
          ["source"] = "Kokia Blazehoof",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189232,
      },
      [257870] = {
          ["encounterName"] = "",
          ["source"] = "Irontide Buccaneer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 130011,
      },
      [256627] = {
          ["encounterName"] = "",
          ["source"] = "Scrimshaw Enforcer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 129374,
      },
      [333477] = {
          ["encounterName"] = "",
          ["source"] = "Goregrind",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 163621,
      },
      [439621] = {
          ["encounterName"] = "Fangs of the Queen",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216648,
      },
      [451543] = {
          ["encounterName"] = "",
          ["source"] = "Eye of the Queen",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 220003,
      },
      [376892] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186151,
      },
      [367521] = {
          ["encounterName"] = "",
          ["source"] = "Bonebolt Hunter",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 185534,
      },
      [200784] = {
          ["encounterName"] = "",
          ["source"] = "Wyrmtongue Scavenger",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 98792,
      },
      [257426] = {
          ["encounterName"] = "",
          ["source"] = "Irontide Enforcer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 129602,
      },
      [397931] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 57109,
      },
      [269029] = {
          ["encounterName"] = "Dread Captain Lockwood",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 129208,
      },
      [369563] = {
          ["encounterName"] = "The Lost Dwarves",
          ["source"] = "Baelog",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184581,
      },
      [268202] = {
          ["encounterName"] = "Gorak Tul",
          ["source"] = "Deathtouched Slaver",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 135552,
      },
      [422541] = {
          ["encounterName"] = "",
          ["source"] = "Shuffling Horror",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 208456,
      },
      [448105] = {
          ["encounterName"] = "Drahga Shadowburner",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 40320,
      },
      [422414] = {
          ["encounterName"] = "",
          ["source"] = "Shuffling Horror",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 208456,
      },
      [427323] = {
          ["encounterName"] = "",
          ["source"] = "Cursed Stormrider",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 212786,
      },
      [429427] = {
          ["encounterName"] = "",
          ["source"] = "Cursedforge Stoneshaper",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 214066,
      },
      [412215] = {
          ["encounterName"] = "",
          ["source"] = "Spurlok, Timesworn Sentinel",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205158,
      },
      [257397] = {
          ["encounterName"] = "",
          ["source"] = "Irontide Bonesaw",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 129788,
      },
      [375943] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186151,
      },
      [448619] = {
          ["encounterName"] = "",
          ["source"] = "Careless Hopgoblin",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 223423,
      },
      [372311] = {
          ["encounterName"] = "",
          ["source"] = "Qalashi Trainee",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189266,
      },
      [449130] = {
          ["encounterName"] = "",
          ["source"] = "Forge Loader",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 213343,
      },
      [437719] = {
          ["encounterName"] = "",
          ["source"] = "Primalist Galesinger",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190373,
      },
      [333488] = {
          ["encounterName"] = "Amarth, The Harvester",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 163157,
      },
      [369061] = {
          ["encounterName"] = "Emberon",
          ["source"] = "Emberon",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184422,
      },
      [396665] = {
          ["encounterName"] = "",
          ["source"] = "Magmas",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 199027,
      },
      [377732] = {
          ["encounterName"] = "",
          ["source"] = "Refti Custodian",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184319,
      },
      [408141] = {
          ["encounterName"] = "Blight of Galakrond",
          ["source"] = "Dazhak",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 201788,
      },
      [388060] = {
          ["encounterName"] = "",
          ["source"] = "Stinkbreath",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 187033,
      },
      [450854] = {
          ["encounterName"] = "",
          ["source"] = "Deathscreamer Iken'tak",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 211263,
      },
      [369573] = {
          ["encounterName"] = "The Lost Dwarves",
          ["source"] = "Baelog",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184581,
      },
      [164357] = {
          ["encounterName"] = "Witherbark",
          ["source"] = "Witherbark",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 81522,
      },
      [375439] = {
          ["encounterName"] = "Magmatusk",
          ["source"] = "Magmatusk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 181861,
      },
      [378818] = {
          ["encounterName"] = "",
          ["source"] = "Qalashi Thaumaturge",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 192788,
      },
      [411012] = {
          ["encounterName"] = "",
          ["source"] = "Young Storm Dragon",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 45919,
      },
      [386660] = {
          ["encounterName"] = "Leymor",
          ["source"] = "Leymor",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186644,
      },
      [377034] = {
          ["encounterName"] = "Crawth",
          ["source"] = "Crawth",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 191736,
      },
      [382708] = {
          ["encounterName"] = "",
          ["source"] = "Qalashi Warden",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 193293,
      },
      [200345] = {
          ["encounterName"] = "",
          ["source"] = "Risen Archer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 98275,
      },
      [188169] = {
          ["encounterName"] = "Rokmora",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 91003,
      },
      [385578] = {
          ["encounterName"] = "Azureblade",
          ["source"] = "Azureblade",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186739,
      },
      [375251] = {
          ["encounterName"] = "Magmatusk",
          ["source"] = "Magmatusk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 181861,
      },
      [428293] = {
          ["encounterName"] = "Lady Naz'jar",
          ["source"] = "Naz'jar Honor Guard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 40633,
      },
      [382712] = {
          ["encounterName"] = "",
          ["source"] = "Wilted Oak",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186229,
      },
      [374361] = {
          ["encounterName"] = "Echo of Doragosa",
          ["source"] = "Echo of Doragosa",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190609,
      },
      [265540] = {
          ["encounterName"] = "",
          ["source"] = "Fetid Maggot",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 130909,
      },
      [426893] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 209801,
      },
      [440218] = {
          ["encounterName"] = "Fangs of the Queen",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216649,
      },
      [397889] = {
          ["encounterName"] = "",
          ["source"] = "Fallen Waterspeaker",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 200126,
      },
      [257756] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 129527,
      },
      [427342] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 206705,
      },
      [453161] = {
          ["encounterName"] = "",
          ["source"] = "Hulking Bloodguard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216338,
      },
      [331718] = {
          ["encounterName"] = "",
          ["source"] = "Mistveil Defender",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 171772,
      },
      [388392] = {
          ["encounterName"] = "",
          ["source"] = "Unruly Textbook",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196044,
      },
      [427025] = {
          ["encounterName"] = "The Darkness",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 208747,
      },
      [226296] = {
          ["encounterName"] = "",
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 91000,
      },
      [199151] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 96611,
      },
      [372201] = {
          ["encounterName"] = "",
          ["source"] = "Qalashi Irontorch",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189464,
      },
      [412129] = {
          ["encounterName"] = "",
          ["source"] = "Lerai, Timesworn Maiden",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205152,
      },
      [367484] = {
          ["encounterName"] = "",
          ["source"] = "Claw Fighter",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 185508,
      },
      [434824] = {
          ["encounterName"] = "",
          ["source"] = "Ixin",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 217531,
      },
      [451496] = {
          ["encounterName"] = "",
          ["source"] = "Eye of the Queen",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 220003,
      },
      [255567] = {
          ["encounterName"] = "",
          ["source"] = "T'lonja",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 128455,
      },
      [426645] = {
          ["encounterName"] = "",
          ["source"] = "Naz'jar Ravager",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 212673,
      },
      [87618] = {
          ["encounterName"] = "Asaad",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 43875,
      },
      [321968] = {
          ["isChanneled"] = false,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Tirnenn Villager",
          ["npcID"] = 164929,
      },
      [393432] = {
          ["encounterName"] = "",
          ["source"] = "Refti Defender",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190340,
      },
      [375327] = {
          ["encounterName"] = "",
          ["source"] = "Subterranean Proto-Dragon",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190404,
      },
      [387950] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 187919,
      },
      [377559] = {
          ["encounterName"] = "Treemouth",
          ["source"] = "Treemouth",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186120,
      },
      [320822] = {
          ["encounterName"] = "",
          ["source"] = "Zolramus Bonemender",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 165222,
      },
      [209628] = {
          ["encounterName"] = "Advisor Melandrus",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 104218,
      },
      [169929] = {
          ["encounterName"] = "Yalnu",
          ["source"] = "Flourishing Ancient",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 84400,
      },
      [382277] = {
          ["encounterName"] = "",
          ["source"] = "Balara",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 193457,
      },
      [441119] = {
          ["encounterName"] = "",
          ["source"] = "Bee Wrangler",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 210264,
      },
      [376170] = {
          ["encounterName"] = "Decatriarch Wratheye",
          ["source"] = "Decatriarch Wratheye",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186121,
      },
      [183465] = {
          ["encounterName"] = "",
          ["source"] = "Tarspitter Lurker",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 91001,
      },
      [169179] = {
          ["encounterName"] = "Yalnu",
          ["source"] = "Yalnu",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 83846,
      },
      [369465] = {
          ["encounterName"] = "",
          ["source"] = "Earthen Weaver",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186420,
      },
      [431494] = {
          ["encounterName"] = "",
          ["source"] = "Nightfall Tactician",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 213934,
      },
      [272609] = {
          ["encounterName"] = "",
          ["source"] = "Faceless Corruptor",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 138281,
      },
      [200768] = {
          ["encounterName"] = "",
          ["source"] = "Crazed Razorbeak",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 95766,
      },
      [265019] = {
          ["encounterName"] = "",
          ["source"] = "Chosen Blood Matron",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 131436,
      },
      [449090] = {
          ["encounterName"] = "",
          ["source"] = "Careless Hopgoblin",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 223423,
      },
      [369828] = {
          ["encounterName"] = "",
          ["source"] = "Vicious Basilisk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184023,
      },
      [433662] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216856,
      },
      [445457] = {
          ["encounterName"] = "Skardyn Monstrosity",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 207207,
      },
      [388911] = {
          ["encounterName"] = "",
          ["source"] = "Spellbound Battleaxe",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196577,
      },
      [385958] = {
          ["encounterName"] = "Vexamus",
          ["source"] = "Vexamus",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 194181,
      },
      [226304] = {
          ["encounterName"] = "",
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 91000,
      },
      [432198] = {
          ["encounterName"] = "Brewmaster Aldryr",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 210271,
      },
      [156718] = {
          ["encounterName"] = "",
          ["source"] = "Monstrous Corpse Spider",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 76104,
      },
      [388976] = {
          ["encounterName"] = "",
          ["source"] = "Arcane Ravager",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196671,
      },
      [427359] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 206705,
      },
      [434779] = {
          ["encounterName"] = "Orator Krix'vizk",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216619,
      },
      [340160] = {
          ["isChanneled"] = false,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Mistveil Matriarch",
          ["npcID"] = 173655,
      },
      [200291] = {
          ["encounterName"] = "",
          ["source"] = "Risen Scout",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 98691,
      },
      [419351] = {
          ["encounterName"] = "",
          ["source"] = "Infinite Saboteur",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 208438,
      },
      [411994] = {
          ["encounterName"] = "",
          ["source"] = "Infinite Chronoweaver",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205384,
      },
      [384978] = {
          ["encounterName"] = "Umbrelskul",
          ["source"] = "Umbrelskul",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 186738,
      },
      [391118] = {
          ["encounterName"] = "",
          ["source"] = "Scalebane Lieutenant",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 191739,
      },
      [373742] = {
          ["encounterName"] = "Chargath, Bane of Scales",
          ["source"] = "Chargath, Bane of Scales",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189340,
      },
      [385536] = {
          ["encounterName"] = "",
          ["source"] = "Primalist Flamedancer",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190206,
      },
      [432520] = {
          ["encounterName"] = "",
          ["source"] = "Nightfall Darkcaster",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 213893,
      },
      [443500] = {
          ["encounterName"] = "",
          ["source"] = "Royal Swarmguard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 220197,
      },
      [200261] = {
          ["encounterName"] = "",
          ["source"] = "Soul-Torn Champion",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 98243,
      },
      [432967] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216340,
      },
      [324323] = {
          ["encounterName"] = "",
          ["source"] = "Skeletal Marauder",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 165919,
      },
      [323496] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 165872,
      },
      [188404] = {
          ["encounterName"] = "Hymdall",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 97788,
      },
      [369409] = {
          ["encounterName"] = "",
          ["source"] = "Earthen Custodian",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 184130,
      },
      [372087] = {
          ["encounterName"] = "",
          ["source"] = "Defier Draghar",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 187897,
      },
      [383823] = {
          ["encounterName"] = "",
          ["source"] = "Nokhud Hornsounder",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 192796,
      },
      [412505] = {
          ["encounterName"] = "",
          ["source"] = "Tyr's Vanguard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 205151,
      },
      [416139] = {
          ["encounterName"] = "Chrono-Lord Deios",
          ["source"] = "Chrono-Lord Deios",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 199000,
      },
      [391723] = {
          ["encounterName"] = "",
          ["source"] = "Flamegullet",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 197697,
      },
      [260793] = {
          ["encounterName"] = "Cragmaw the Infested",
          ["source"] = "Cragmaw the Infested",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 131817,
      },
      [193505] = {
          ["encounterName"] = "",
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 91000,
      },
      [462216] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 224240,
      },
      [396812] = {
          ["encounterName"] = "",
          ["source"] = "Spellbound Scepter",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 196576,
      },
      [375348] = {
          ["encounterName"] = "",
          ["source"] = "Gusting Proto-Dragon",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190401,
      },
      [265372] = {
          ["encounterName"] = "",
          ["source"] = "Bewitched Captain",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 131587,
      },
      [427616] = {
          ["encounterName"] = "",
          ["source"] = "Unruly Stormrook",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 207186,
      },
      [381525] = {
          ["encounterName"] = "Kyrakka and Erkhart Stormvein",
          ["source"] = "Kyrakka",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 190484,
      },
      [448640] = {
          ["encounterName"] = "",
          ["source"] = "Cursedforge Honor Guard",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 214264,
      },
      [265721] = {
          ["encounterName"] = "",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 200349,
      },
      [435012] = {
          ["encounterName"] = "Anub'zekt",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 215405,
      },
      [372225] = {
          ["encounterName"] = "",
          ["source"] = "Qalashi Bonesplitter",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 189467,
      },
      [257862] = {
          ["encounterName"] = "Hadal Darkfathom",
          ["source"] = "",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 128651,
      },
      [413529] = {
          ["encounterName"] = "",
          ["source"] = "Timestream Anomaly",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 199749,
      },
      [377383] = {
          ["encounterName"] = "",
          ["source"] = "Alpha Eagle",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 192333,
      },
      [382233] = {
          ["encounterName"] = "",
          ["source"] = "Batak",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 193462,
      },
      [200913] = {
          ["encounterName"] = "",
          ["source"] = "Wyrmtongue Scavenger",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 98792,
      },
      [384868] = {
          ["encounterName"] = "",
          ["source"] = "Nokhud Longbow",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 192789,
      },
  },
  ["aura_frame1_anchor"] = {
      ["y"] = 8,
      ["side"] = 1,
  },
  ["aura_timer_text_font"] = "Cronix-Bold",
  ["cast_statusbar_color_finished"] = {
      0.52156865596771,
      0.83921575546265,
      0.58431375026703,
  },
  ["extra_icon_stack_font"] = "Cronix",
  ["aura_height"] = 13,
  ["cast_statusbar_bgtexture"] = "Cronix",
  ["aura2_x_offset"] = 2.5,
  ["target_indicator"] = "NONE",
  ["extra_icon_stack_size"] = 7,
  ["aura_show_buff_by_the_unit"] = false,
  ["saved_cvars"] = {
      ["nameplateShowOnlyNames"] = "1",
      ["nameplateOverlapV"] = "1.2000000476837",
      ["nameplateLargeTopInset"] = "0.089999996125698",
      ["nameplateShowEnemyMinus"] = "1",
      ["NamePlateClassificationScale"] = "1",
      ["nameplateShowFriendlyTotems"] = "0",
      ["nameplatePersonalHideDelaySeconds"] = "0.2",
      ["nameplateShowFriendlyPets"] = "0",
      ["nameplatePersonalShowInCombat"] = "1",
      ["nameplateTargetRadialPosition"] = "1",
      ["nameplateMinAlpha"] = "0.90135484",
      ["nameplateResourceOnTarget"] = "0",
      ["nameplateShowAll"] = "1",
      ["nameplateMaxDistance"] = "60",
      ["nameplateShowFriendlyMinions"] = "0",
      ["nameplateSelfScale"] = "1.0",
      ["nameplateOtherBottomInset"] = "0.070000000298023",
      ["nameplateTargetBehindMaxDistance"] = "30",
      ["nameplateShowEnemies"] = "1",
      ["NamePlateVerticalScale"] = "1",
      ["nameplateSelectedAlpha"] = "1",
      ["nameplateShowSelf"] = "0",
      ["nameplatePersonalShowAlways"] = "0",
      ["nameplateMotionSpeed"] = "0.05",
      ["nameplateGlobalScale"] = "1",
      ["nameplateShowEnemyMinions"] = "1",
      ["nameplateShowFriendlyNPCs"] = "1",
      ["nameplateSelectedScale"] = "1.1000000238419",
      ["ShowNamePlateLoseAggroFlash"] = "1",
      ["ShowClassColorInNameplate"] = "1",
      ["nameplateLargeBottomInset"] = "0.070000000298023",
      ["nameplateMotion"] = "1",
      ["nameplateSelfTopInset"] = "0.5",
      ["nameplateMinScale"] = "1",
      ["nameplateOccludedAlphaMult"] = "1",
      ["nameplateOtherTopInset"] = "0.089999996125698",
      ["nameplateOtherAtBase"] = "0",
      ["nameplateSelfBottomInset"] = "0.2",
      ["nameplatePlayerMaxDistance"] = "60",
      ["nameplateShowFriendlyGuardians"] = "0",
      ["NamePlateHorizontalScale"] = "1",
      ["nameplateSelfAlpha"] = "0.75",
      ["nameplateMinAlphaDistance"] = "-158489.31924611",
      ["nameplateShowFriends"] = "0",
      ["nameplatePersonalShowWithTarget"] = "0",
  },
  ["login_counter"] = 17923,
  ["click_space_friendly"] = {
      135,
      38,
  },
  ["aura_stack_font"] = "Cronix-Bold",
  ["blizzard_nameplate_font"] = "Cronix-Bold",
  ["auto_toggle_combat"] = {
      ["blizz_healthbar_ooc"] = true,
  },
  ["hide_friendly_castbars"] = true,
  ["OptionsPanelDB"] = {
      ["PlaterOptionsPanelFrame"] = {
          ["scale"] = 1.1000000238419,
      },
  },
  ["aura_timer_text_shadow_color"] = {
      nil,
      nil,
      nil,
      0,
  },
  ["auras_per_row_amount"] = 7,
  ["plater_resources_show_depleted"] = false,
  ["blizzard_nameplate_large_font"] = "Cronix-Bold",
  ["aura_stack_anchor"] = {
      ["y"] = 4.8999996185303,
      ["x"] = 2.7999992370605,
      ["side"] = 5,
  },
  ["usePlaterWidget"] = false,
  ["plate_config"] = {
      ["player"] = {
          ["spellpercent_text_font"] = "Cronix-Bold",
          ["power_percent_text_enabled"] = false,
          ["level_text_font"] = "Accidental Presidency",
          ["actorname_text_font"] = "Accidental Presidency",
          ["big_actortitle_text_font"] = "Accidental Presidency",
          ["spellname_text_font"] = "Cronix-Bold",
          ["click_through"] = true,
          ["big_actorname_text_font"] = "Accidental Presidency",
          ["power_percent_text_color"] = {
              1,
              1,
              1,
          },
          ["percent_text_font"] = "Cronix-Bold",
          ["power_percent_text_font"] = "Cronix-Bold",
      },
      ["friendlyplayer"] = {
          ["spellpercent_text_font"] = "ViklunD's SexFont",
          ["level_text_size"] = 7,
          ["actorname_use_class_color"] = true,
          ["cast"] = {
              120,
          },
          ["percent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellpercent_text_anchor"] = {
              ["y"] = -0.8000030517578125,
              ["x"] = 3.899993896484375,
              ["side"] = 5,
          },
          ["percent_text_show_decimals"] = false,
          ["spellname_text_outline"] = "OUTLINE",
          ["big_actorname_text_shadow_color"] = {
              0,
              0,
              0,
              1,
          },
          ["level_text_font"] = "Cronix-Bold",
          ["actorname_text_font"] = "Cronix-Bold",
          ["big_actorname_text_shadow_color_offset"] = {
              1,
              -1,
          },
          ["mana_incombat"] = {
              nil,
              4,
          },
          ["actorname_use_guild_color"] = false,
          ["all_names"] = true,
          ["big_actortitle_text_outline"] = "OUTLINE",
          ["actorname_text_spacing"] = 7,
          ["only_damaged"] = false,
          ["quest_color_enemy"] = {
              0.63921570777893,
              1,
              0.31764706969261,
              1,
          },
          ["only_thename"] = true,
          ["big_actortitle_text_font"] = "Cronix",
          ["spellpercent_text_size"] = 7,
          ["level_text_anchor"] = {
              ["y"] = 100,
              ["x"] = 1,
              ["side"] = 5,
          },
          ["percent_show_percent"] = false,
          ["big_actortitle_text_shadow_color_offset"] = {
              1,
              -1,
          },
          ["cast_incombat"] = {
              120,
              8,
          },
          ["mana"] = {
              nil,
              4,
          },
          ["actorname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_anchor"] = {
              ["side"] = 3,
          },
          ["big_actortitle_text_shadow_color"] = {
              0,
              0,
              0,
              1,
          },
          ["percent_text_anchor"] = {
              ["side"] = 11,
          },
          ["big_actorname_text_size"] = 8,
          ["spellpercent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["big_actorname_text_outline"] = "OUTLINE",
          ["quest_color_neutral"] = {
              0.63921570777893,
              1,
              0.31764706969261,
              1,
          },
          ["actorname_text_size"] = 8,
          ["big_actorname_text_font"] = "Cronix",
          ["actorname_use_friends_color"] = false,
          ["actorname_text_anchor"] = {
              ["y"] = -3,
          },
          ["percent_text_size"] = 7,
          ["big_actortitle_text_size"] = 8,
          ["percent_text_font"] = "Cronix-Bold",
          ["buff_frame_y_offset"] = 0,
          ["quest_enabled"] = true,
          ["spellname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_color"] = {
              0.95294117647059,
              [3] = 0.9921568627451,
          },
          ["quest_color_enabled"] = true,
          ["health_incombat"] = {
              120,
              12,
          },
          ["health"] = {
              120,
              12,
          },
          ["spellname_text_font"] = "Cronix-Bold",
          ["power_percent_text_font"] = "Accidental Presidency",
          ["spellname_text_size"] = 7,
          ["level_text_alpha"] = 0.29999998211861,
      },
      ["friendlynpc"] = {
          ["big_actorname_text_size"] = 8,
          ["spellpercent_text_font"] = "ViklunD's SexFont",
          ["level_text_size"] = 7,
          ["cast"] = {
              125,
          },
          ["big_actortitle_text_size"] = 8,
          ["spellpercent_text_anchor"] = {
              ["y"] = -0.8000030517578125,
              ["x"] = 3.899993896484375,
              ["side"] = 5,
          },
          ["spellname_text_outline"] = "OUTLINE",
          ["level_text_font"] = "Cronix-Bold",
          ["spellname_text_color"] = {
              0.95294117647059,
              [3] = 0.9921568627451,
          },
          ["actorname_text_outline"] = "OUTLINE",
          ["actorname_text_spacing"] = 6,
          ["quest_color_enemy"] = {
              0.28627452254295,
              1,
              0.094117656350136,
              1,
          },
          ["big_actortitle_text_font"] = "Cronix-Bold",
          ["spellpercent_text_size"] = 7,
          ["level_text_anchor"] = {
              ["y"] = 100,
              ["x"] = 1,
              ["side"] = 5,
          },
          ["spellpercent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["cast_incombat"] = {
              125,
              10,
          },
          ["actorname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_anchor"] = {
              ["y"] = 0.09999847412109375,
              ["x"] = -0.8000030517578125,
              ["side"] = 3,
          },
          ["percent_text_anchor"] = {
              ["side"] = 11,
          },
          ["spellname_text_font"] = "Cronix-Bold",
          ["only_names"] = false,
          ["percent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["quest_color_neutral"] = {
              0.28627452254295,
              1,
              0.094117656350136,
              1,
          },
          ["actorname_text_size"] = 7,
          ["big_actorname_text_font"] = "Cronix-Bold",
          ["actorname_text_font"] = "Cronix-Bold",
          ["percent_text_ooc"] = true,
          ["level_text_alpha"] = 0.29999998211861,
          ["spellpercent_text_enabled"] = true,
          ["percent_text_font"] = "Cronix-Bold",
          ["power_percent_text_font"] = "Accidental Presidency",
          ["percent_text_enabled"] = true,
          ["spellname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_size"] = 7,
          ["health"] = {
              125,
              14,
          },
          ["percent_show_health"] = true,
          ["percent_text_size"] = 7,
          ["actorname_text_anchor"] = {
              ["y"] = -0.5,
              ["side"] = 1,
          },
          ["health_incombat"] = {
              125,
              14,
          },
      },
      ["enemynpc"] = {
          ["spellpercent_text_font"] = "ViklunD's SexFont",
          ["level_text_size"] = 7,
          ["cast"] = {
              125,
          },
          ["big_actortitle_text_size"] = 8,
          ["spellpercent_text_anchor"] = {
              ["y"] = -0.80000305175781,
              ["x"] = 3.8999938964844,
              ["side"] = 5,
          },
          ["level_text_font"] = "Cronix-Bold",
          ["actorname_text_font"] = "Cronix-Bold",
          ["actorname_text_outline"] = "OUTLINE",
          ["actorname_text_spacing"] = 6,
          ["quest_color_enemy"] = {
              0.28627452254295,
              1,
              0.094117656350136,
          },
          ["big_actortitle_text_font"] = "Cronix-Bold",
          ["spellpercent_text_size"] = 7,
          ["level_text_anchor"] = {
              ["y"] = 100,
              ["x"] = 1,
              ["side"] = 5,
          },
          ["cast_incombat"] = {
              125,
              10,
          },
          ["actorname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_anchor"] = {
              ["y"] = 0.099998474121094,
              ["x"] = -0.80000305175781,
              ["side"] = 3,
          },
          ["percent_text_anchor"] = {
              ["side"] = 11,
          },
          ["spellpercent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["quest_color_neutral"] = {
              0.28627452254295,
              1,
              0.094117656350136,
          },
          ["actorname_text_size"] = 7,
          ["power_percent_text_font"] = "Accidental Presidency",
          ["big_actorname_text_size"] = 8,
          ["percent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["actorname_text_anchor"] = {
              ["y"] = -0.5,
              ["side"] = 1,
          },
          ["percent_text_size"] = 7,
          ["percent_text_font"] = "Cronix-Bold",
          ["spellname_text_color"] = {
              0.95294117647059,
              [3] = 0.9921568627451,
          },
          ["spellname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["health_incombat"] = {
              125,
              14,
          },
          ["health"] = {
              125,
              14,
          },
          ["spellname_text_font"] = "Cronix-Bold",
          ["big_actorname_text_font"] = "Cronix-Bold",
          ["level_text_alpha"] = 0.29999998211861,
          ["spellname_text_size"] = 7,
          ["level_text_enabled"] = false,
      },
      ["global_health_width"] = 120,
      ["enemyplayer"] = {
          ["big_actorname_text_size"] = 8,
          ["spellpercent_text_font"] = "ViklunD's SexFont",
          ["level_text_size"] = 7,
          ["cast"] = {
              125,
          },
          ["big_actortitle_text_size"] = 8,
          ["spellpercent_text_anchor"] = {
              ["y"] = -0.8000030517578125,
              ["x"] = 3.899993896484375,
              ["side"] = 5,
          },
          ["spellname_text_outline"] = "OUTLINE",
          ["level_text_font"] = "Cronix-Bold",
          ["actorname_text_font"] = "Cronix-Bold",
          ["all_names"] = true,
          ["actorname_text_outline"] = "OUTLINE",
          ["actorname_text_spacing"] = 6,
          ["quest_color_enemy"] = {
              0.28627452254295,
              1,
              0.094117656350136,
              1,
          },
          ["big_actortitle_text_font"] = "Cronix-Bold",
          ["spellpercent_text_size"] = 7,
          ["level_text_anchor"] = {
              ["y"] = 100,
              ["x"] = 1,
              ["side"] = 5,
          },
          ["cast_incombat"] = {
              125,
              10,
          },
          ["actorname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["spellname_text_anchor"] = {
              ["y"] = 0.09999847412109375,
              ["x"] = -0.8000030517578125,
              ["side"] = 3,
          },
          ["percent_text_anchor"] = {
              ["side"] = 11,
          },
          ["spellpercent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["quest_color_neutral"] = {
              0.28627452254295,
              1,
              0.094117656350136,
              1,
          },
          ["actorname_text_size"] = 7,
          ["power_percent_text_font"] = "Accidental Presidency",
          ["percent_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["level_text_alpha"] = 0.29999998211861,
          ["percent_text_size"] = 7,
          ["percent_text_font"] = "Cronix-Bold",
          ["spellname_text_color"] = {
              0.95294117647059,
              [3] = 0.9921568627451,
          },
          ["quest_enabled"] = true,
          ["big_actorname_text_font"] = "Cronix-Bold",
          ["quest_color_enabled"] = true,
          ["spellname_text_size"] = 7,
          ["health"] = {
              125,
              14,
          },
          ["actorname_text_anchor"] = {
              ["y"] = -0.5,
              ["side"] = 1,
          },
          ["spellname_text_font"] = "Cronix-Bold",
          ["spellname_text_shadow_color"] = {
              nil,
              nil,
              nil,
              0,
          },
          ["health_incombat"] = {
              125,
              14,
          },
          ["level_text_enabled"] = false,
      },
      ["global_health_height"] = 10,
  },
  ["aura_y_offset"] = 8,
  ["use_ui_parent"] = true,
  ["cast_statusbar_bgcolor"] = {
      0,
      0,
      0,
      0.7049064040184,
  },
  ["indicator_spec"] = false,
  ["border_thickness"] = 0.4999999701976776,
  ["plater_resources_grow_direction"] = "center",
  ["resources_settings"] = {
      ["chr"] = {
          ["Player-3725-0C1533F1"] = "ComboPoints",
          ["Player-3725-0C1632F3"] = "HolyPower",
          ["Player-3691-0A230CF3"] = "Runes",
          ["Player-3725-0A9FE377"] = "Chi",
          ["Player-3691-09E75064"] = "Essence",
          ["Player-4184-003D46E0"] = "Chi",
          ["Player-3725-0C16E871"] = "HolyPower",
          ["Player-3725-0AA8E1EF"] = "Runes",
          ["Player-3691-09521F9C"] = "Runes",
          ["Player-3691-06C34E69"] = "Runes",
      },
  },
  ["spell_animation_list"] = {
      ["30451"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 30451,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["285452"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0199999809265,
              ["scale_upY"] = 1,
              ["scale_downX"] = 0.97999995946884,
              ["scale_downY"] = 1,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 285452,
              ["class"] = "SHAMAN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 5.6999998092651,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["2098"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.1000000238419,
              ["scale_upY"] = 1.1999999284744,
              ["scale_downX"] = 0.89999997615814,
              ["scale_downY"] = 0.89999997615814,
              ["duration"] = 0.04,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 2098,
              ["class"] = "ROGUE",
              ["time"] = 1539293610,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.079999998211861,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["scaleY"] = 1,
              ["amplitude"] = 1.5,
              ["fade_in"] = 0,
              ["duration"] = 0.21999999880791,
              ["cooldown"] = 0.5,
              ["frequency"] = 2.710000038147,
          },
      },
      ["184575"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.05,
              ["scale_upY"] = 1.05,
              ["scale_downX"] = 0.95,
              ["scale_downY"] = 0.95,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 184575,
              ["class"] = "PALADIN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1,
              ["amplitude"] = 2,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
      },
      ["185099"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.18999999761581,
              ["absolute_sineX"] = false,
              ["scaleY"] = 0.84999847412109,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 3,
              ["fade_in"] = 0,
              ["duration"] = 0.19999998807907,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 185099,
              ["class"] = "MONK",
              ["time"] = 1539712435,
              ["desc"] = "",
          },
      },
      ["198030"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 0.5,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.31999999284744,
              ["cooldown"] = 0.5,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 198030,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539717136,
              ["desc"] = "",
          },
      },
      ["85948"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.019999999552965,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12000000476837,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 85948,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["35395"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 35395,
              ["class"] = "PALADIN",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["52174"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.15,
              ["scale_upY"] = 1.15,
              ["scale_downX"] = 0.8,
              ["scale_downY"] = 0.8,
              ["duration"] = 0.075,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 52174,
              ["class"] = "WARRIOR",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.2,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.15,
              ["critical_scale"] = 1,
              ["amplitude"] = 6,
              ["fade_in"] = 0.01,
              ["duration"] = 0.3,
              ["cooldown"] = 0.5,
              ["frequency"] = 50,
          },
      },
      ["155166"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 0.6,
              ["amplitude"] = 0.45,
              ["fade_in"] = 0.01,
              ["duration"] = 0.2,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 155166,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["228598"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 2,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 228598,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["108853"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 108853,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["205523"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 3,
              ["fade_in"] = 0.01,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 205523,
              ["class"] = "MONK",
              ["time"] = 1539295885,
              ["desc"] = "",
          },
      },
      ["245388"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.1,
              ["scale_upY"] = 1.1,
              ["scale_downX"] = 0.9,
              ["scale_downY"] = 0.9,
              ["duration"] = 0.03,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 245388,
              ["class"] = "ROGUE",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["scaleY"] = 1,
              ["amplitude"] = 5,
              ["fade_in"] = 0.01,
              ["duration"] = 0.06,
              ["cooldown"] = 0.5,
              ["frequency"] = 2,
          },
      },
      ["6343"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 0.95,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.1,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 6343,
              ["class"] = "WARRIOR",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["206930"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0199999809265,
              ["scale_upY"] = 1,
              ["scale_downX"] = 0.97999995946884,
              ["scale_downY"] = 1,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 222026,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 5.6999998092651,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["275779"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = -1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 275779,
              ["class"] = "PALADIN",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["53595"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.03,
              ["scale_upY"] = 1.03,
              ["scale_downX"] = 0.97,
              ["scale_downY"] = 0.97,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 53595,
              ["class"] = "PALADIN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1,
              ["amplitude"] = 3,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
      },
      ["197834"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 197834,
              ["class"] = "ROGUE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["265157"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1,
              ["duration"] = 0.096889182925224,
              ["scale_downX"] = 1,
              ["animation_type"] = "scale",
              ["critical_scale"] = 1,
              ["scale_upY"] = 1.1000000238419,
              ["cooldown"] = 0.75,
              ["scale_downY"] = 0.89999997615814,
          },
          ["info"] = {
              ["spellid"] = 265157,
              ["class"] = "HUNTER",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.019999999552965,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1,
              ["amplitude"] = 0.50999999046326,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 39.995635986328,
          },
      },
      ["7268"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 0.75,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 7268,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["100780"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 100780,
              ["class"] = "MONK",
              ["time"] = 1539295910,
              ["desc"] = "",
          },
      },
      ["5374"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 5374,
              ["class"] = "ROGUE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["31935"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.03,
              ["scale_upY"] = 1.03,
              ["scale_downX"] = 0.97,
              ["scale_downY"] = 0.97,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 31935,
              ["class"] = "PALADIN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = true,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1,
              ["amplitude"] = 6,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
      },
      ["11366"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.15,
              ["scale_upY"] = 1.15,
              ["scale_downX"] = 0.8,
              ["scale_downY"] = 0.8,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 11366,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1,
              ["amplitude"] = 10,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
      },
      ["199552"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.099999994039536,
              ["absolute_sineX"] = true,
              ["scaleY"] = 0.79999923706055,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.20000076293945,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 2.5,
              ["fade_in"] = 0,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 199552,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539717392,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0299999713898,
              ["scale_upY"] = 1.0299999713898,
              ["scale_downX"] = 0.96999996900559,
              ["scale_downY"] = 0.96999996900559,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["228600"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1,
              ["amplitude"] = 10,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 228600,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["203782"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = true,
              ["scaleY"] = -1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1.5,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 203782,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539716639,
              ["desc"] = "",
          },
      },
      ["162243"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.099999994039535,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 162243,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539717356,
              ["desc"] = "",
          },
      },
      ["117418"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1499999910593,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 0.1499999910593,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.1799999922514,
              ["cooldown"] = 0.5,
              ["frequency"] = 116.00999450684,
          },
          ["info"] = {
              ["spellid"] = 117418,
              ["class"] = "MONK",
              ["time"] = 1539296387,
              ["desc"] = "",
          },
      },
      ["204157"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 6,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 204157,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539716637,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.03,
              ["scale_upY"] = 1.03,
              ["scale_downX"] = 0.97,
              ["scale_downY"] = 0.97,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["222026"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0199999809265,
              ["scale_upY"] = 1,
              ["scale_downX"] = 0.97999995946884,
              ["scale_downY"] = 1,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 222026,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 5.6999998092651,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["324540"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 2,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 0.89999997615814,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.1499999910593,
              ["cooldown"] = 0.5,
              ["frequency"] = 25.650197982788,
          },
          ["info"] = {
              ["spellid"] = 324540,
              ["class"] = "WARLOCK",
              ["time"] = 1539292087,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0299999713898,
              ["scale_upY"] = 1.0299999713898,
              ["scale_downX"] = 0.96999996900558,
              ["scale_downY"] = 0.96999996900558,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["264178"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.08,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 2.5,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.25,
              ["frequency"] = 20,
          },
          ["info"] = {
              ["spellid"] = 264178,
              ["class"] = "WARLOCK",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["55090"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["scaleY"] = 1,
              ["amplitude"] = 3.9020702838898,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.7999999523163,
          },
          ["info"] = {
              ["spellid"] = 55090,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["46968"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 0.95,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0.1,
              ["frequency"] = 120,
          },
          ["info"] = {
              ["spellid"] = 46968,
              ["class"] = "WARRIOR",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["148135"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1.75,
              ["fade_in"] = 0.01,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 60.874122619629,
          },
          ["info"] = {
              ["spellid"] = 148135,
              ["class"] = "MONK",
              ["time"] = 1539295958,
              ["desc"] = "",
          },
      },
      ["257045"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 0.75,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 257045,
              ["class"] = "HUNTER",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["228354"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 228354,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["27285"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.1,
              ["scale_upY"] = 1.1,
              ["scale_downX"] = 0.9,
              ["scale_downY"] = 0.9,
              ["duration"] = 0.075,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 27285,
              ["class"] = "WARLOCK",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["53351"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0199999809265,
              ["scale_upY"] = 1,
              ["scale_downX"] = 0.97999995946884,
              ["scale_downY"] = 1,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 53351,
              ["class"] = "HUNTER",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 5.6999998092651,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["44425"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 44425,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["185763"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.25999999046326,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 3.6583230495453,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.15999999642372,
              ["cooldown"] = 0.5,
              ["frequency"] = 23.525663375854,
          },
          ["info"] = {
              ["spellid"] = 185763,
              ["class"] = "ROGUE",
              ["time"] = 1539275610,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0299999713898,
              ["scale_upY"] = 1.0299999713898,
              ["scale_downX"] = 0.96999996900559,
              ["scale_downY"] = 0.96999996900559,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["31661"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 0.75,
              ["fade_in"] = 0.01,
              ["duration"] = 0.1,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 31661,
              ["class"] = "MAGE",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["222024"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1,
              ["duration"] = 0.050000000745058,
              ["scale_downX"] = 1,
              ["animation_type"] = "scale",
              ["critical_scale"] = 1,
              ["scale_upY"] = 1.1000000238419,
              ["cooldown"] = 0.75,
              ["scale_downY"] = 0.89999997615814,
          },
          ["info"] = {
              ["spellid"] = 222024,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.019999999552965,
              ["absolute_sineX"] = true,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["critical_scale"] = 1,
              ["amplitude"] = 1.7999999523163,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 11.14999961853,
          },
      },
      ["107270"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 0.1499999910593,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.1499999910593,
              ["cooldown"] = 0.5,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 107270,
              ["class"] = "MONK",
              ["time"] = 1539296490,
              ["desc"] = "",
          },
      },
      ["199547"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.59999847412109,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 3,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 199547,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539717795,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.039999961853,
              ["scale_upY"] = 1.039999961853,
              ["scale_downX"] = 0.96999996900558,
              ["scale_downY"] = 0.96999996900558,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["17364"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.02,
              ["scale_upY"] = 1.02,
              ["scale_downX"] = 0.97,
              ["scale_downY"] = 0.97,
              ["duration"] = 0.10000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 17364,
              ["class"] = "SHAMAN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.11,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 2.5,
              ["fade_in"] = 0,
              ["duration"] = 0.1,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["116858"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0499999523163,
              ["duration"] = 0.099999994039536,
              ["scale_downX"] = 0.94999998807907,
              ["animation_type"] = "scale",
              ["critical_scale"] = 1,
              ["scale_upY"] = 1.0499999523163,
              ["cooldown"] = 0.75,
              ["scale_downY"] = 0.94999998807907,
          },
          ["info"] = {
              ["spellid"] = 116858,
              ["class"] = "WARLOCK",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.099999994039536,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = 4.9699974060059,
              ["amplitude"] = 0.59999996423721,
              ["fade_in"] = 0.049999997019768,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.25,
              ["frequency"] = 2.8999998569489,
          },
      },
      ["86040"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 2,
              ["fade_in"] = 0.05,
              ["duration"] = 0.15,
              ["cooldown"] = 0.25,
              ["frequency"] = 20,
          },
          ["info"] = {
              ["spellid"] = 86040,
              ["class"] = "WARLOCK",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["100784"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 3,
              ["fade_in"] = 0.01,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 100784,
              ["class"] = "MONK",
              ["time"] = 1539296312,
              ["desc"] = "",
          },
      },
      ["187708"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 0.6,
              ["amplitude"] = 0.45,
              ["fade_in"] = 0.01,
              ["duration"] = 0.2,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 187708,
              ["class"] = "HUNTER",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["228478"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.099999994039536,
              ["absolute_sineX"] = true,
              ["scaleY"] = 0.79999923706055,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.20000076293945,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 2.5,
              ["fade_in"] = 0,
              ["duration"] = 0.099999994039535,
              ["cooldown"] = 0.5,
              ["frequency"] = 1,
          },
          ["info"] = {
              ["spellid"] = 228478,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539716636,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0299999713898,
              ["scale_upY"] = 1.0299999713898,
              ["scale_downX"] = 0.96999996900559,
              ["scale_downY"] = 0.96999996900559,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["188443"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 0.6,
              ["amplitude"] = 0.45,
              ["fade_in"] = 0.01,
              ["duration"] = 0.2,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 188443,
              ["class"] = "SHAMAN",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["189112"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.34999999403954,
              ["absolute_sineX"] = true,
              ["scaleY"] = 1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1.8799999952316,
              ["fade_in"] = 0,
              ["duration"] = 0.40000000596046,
              ["cooldown"] = 0.5,
              ["frequency"] = 51.979999542236,
          },
          ["info"] = {
              ["spellid"] = 189112,
              ["class"] = "DEMONHUNTER",
              ["time"] = 1539715467,
              ["desc"] = "",
          },
      },
      ["32645"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.1000000238419,
              ["scale_upY"] = 1.1999999284744,
              ["scale_downX"] = 0.89999997615814,
              ["scale_downY"] = 0.89999997615814,
              ["duration"] = 0.04,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 32645,
              ["class"] = "ROGUE",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["scaleY"] = 1,
              ["amplitude"] = 4.0999999046326,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.12000000476837,
              ["cooldown"] = 0.5,
              ["frequency"] = 2.6099998950958,
          },
      },
      ["280720"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.089999996125698,
              ["absolute_sineX"] = false,
              ["scaleY"] = 1,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 0.89999997615814,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.19999998807907,
              ["cooldown"] = 0.5,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 280720,
              ["class"] = "ROGUE",
              ["time"] = 1539292087,
              ["desc"] = "",
          },
      },
      ["187874"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 0.6,
              ["amplitude"] = 0.85,
              ["fade_in"] = 0.01,
              ["duration"] = 0.2,
              ["cooldown"] = 0,
              ["frequency"] = 100,
          },
          ["info"] = {
              ["spellid"] = 187874,
              ["class"] = "SHAMAN",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["49998"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.019999999552965,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["scaleY"] = 1,
              ["amplitude"] = 1.0330086946487,
              ["fade_in"] = 0.01,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 49998,
              ["class"] = "DEATHKNIGHT",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["196819"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.1999999284744,
              ["scale_upY"] = 1.2999999523163,
              ["scale_downX"] = 0.89999997615814,
              ["scale_downY"] = 0.89999997615814,
              ["duration"] = 0.04,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 196819,
              ["class"] = "ROGUE",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.1799999922514,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["scaleY"] = 1,
              ["amplitude"] = 5,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.21999999880791,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.3099999427795,
          },
      },
      ["8042"] = {
          ["1"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.05,
              ["scale_upY"] = 1.05,
              ["scale_downX"] = 0.95,
              ["scale_downY"] = 0.95,
              ["duration"] = 0.060000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
          ["info"] = {
              ["spellid"] = 285452,
              ["class"] = "SHAMAN",
              ["time"] = 0,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.05,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0,
              ["scaleY"] = -1,
              ["amplitude"] = 7.5,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.06,
              ["cooldown"] = 0.5,
              ["frequency"] = 3.0999999046326,
          },
      },
      ["20243"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.02,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.1,
              ["scaleY"] = 1,
              ["amplitude"] = 1,
              ["fade_in"] = 0.01,
              ["duration"] = 0.12,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 20243,
              ["class"] = "WARRIOR",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["2643"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 0.6,
              ["amplitude"] = 0.45,
              ["fade_in"] = 0.01,
              ["duration"] = 0.2,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 2643,
              ["class"] = "HUNTER",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["199804"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.09,
              ["absolute_sineX"] = false,
              ["scaleY"] = 0.88999938964844,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 1,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 1.1699999570847,
              ["fade_in"] = 0.0099999997764826,
              ["duration"] = 0.19999998807907,
              ["cooldown"] = 0.5,
              ["frequency"] = 23.525676727295,
          },
          ["info"] = {
              ["spellid"] = 199804,
              ["class"] = "ROGUE",
              ["time"] = 1539293872,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0499999523163,
              ["scale_upY"] = 1.0499999523163,
              ["scale_downX"] = 1,
              ["scale_downY"] = 1,
              ["duration"] = 0.050000000745058,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
      ["196278"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.01,
              ["absolute_sineX"] = false,
              ["absolute_sineY"] = false,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.2,
              ["scaleY"] = 1,
              ["amplitude"] = 0.75,
              ["fade_in"] = 0.01,
              ["duration"] = 0.05,
              ["cooldown"] = 0,
              ["frequency"] = 200,
          },
          ["info"] = {
              ["spellid"] = 196278,
              ["class"] = "WARLOCK",
              ["time"] = 0,
              ["desc"] = "",
          },
      },
      ["185438"] = {
          ["1"] = {
              ["enabled"] = true,
              ["fade_out"] = 0.19999998807907,
              ["absolute_sineX"] = false,
              ["scaleY"] = -1,
              ["absolute_sineY"] = true,
              ["animation_type"] = "frameshake",
              ["scaleX"] = 0.099998474121094,
              ["critical_scale"] = 1.05,
              ["amplitude"] = 6.460000038147,
              ["fade_in"] = 0,
              ["duration"] = 0.099999994039536,
              ["cooldown"] = 0.5,
              ["frequency"] = 25,
          },
          ["info"] = {
              ["spellid"] = 185438,
              ["class"] = "ROGUE",
              ["time"] = 1539204014,
              ["desc"] = "",
          },
          ["2"] = {
              ["enabled"] = true,
              ["scale_upX"] = 1.0299999713898,
              ["scale_upY"] = 1.0299999713898,
              ["scale_downX"] = 0.96999996900559,
              ["scale_downY"] = 0.96999996900559,
              ["duration"] = 0.05,
              ["cooldown"] = 0.75,
              ["animation_type"] = "scale",
          },
      },
  },
  ["indicator_scale"] = 0.99999994039536,
  ["cast_statusbar_spark_offset"] = -10,
  ["castbar_icon_size"] = "same as castbar plus healthbar",
  ["npc_colors"] = {
      [40788] = {
          false,
          false,
          "orangered",
      },
      [200126] = {
          true,
          false,
          "fuchsia",
      },
      [194241] = {
          false,
          false,
          "cyan",
      },
      [190403] = {
          true,
          false,
          "aqua",
      },
      [195265] = {
          true,
          false,
          "fuchsia",
      },
      [100991] = {
          false,
          false,
          "fuchsia",
      },
      [99200] = {
          false,
          false,
          "mediumslateblue",
      },
      [190404] = {
          true,
          false,
          "aqua",
      },
      [190405] = {
          true,
          false,
          "fuchsia",
      },
      [133345] = {
          false,
          false,
          "goldenrod",
      },
      [185032] = {
          false,
          false,
          "mediumpurple",
      },
      [183497] = {
          false,
          false,
          "blue",
      },
      [164563] = {
          false,
          false,
          "blue",
      },
      [210109] = {
          true,
          false,
          "aqua",
      },
      [169425] = {
          false,
          false,
          "gold",
      },
      [196548] = {
          true,
          false,
          "fuchsia",
      },
      [168658] = {
          false,
          false,
          "deepskyblue",
      },
      [165076] = {
          true,
          false,
          "magenta",
      },
      [169426] = {
          false,
          false,
          "gold",
      },
      [200387] = {
          false,
          false,
          "mediumslateblue",
      },
      [180429] = {
          false,
          false,
          "mediumpurple",
      },
      [217531] = {
          true,
          false,
          "fuchsia",
      },
      [98691] = {
          false,
          false,
          "lime",
      },
      [169428] = {
          false,
          false,
          "gold",
      },
      [151773] = {
          false,
          false,
          "deepskyblue",
      },
      [217533] = {
          true,
          false,
          "fuchsia",
      },
      [164567] = {
          true,
          false,
          "fuchsia",
      },
      [169429] = {
          false,
          false,
          "gold",
      },
      [141283] = {
          false,
          false,
          "navajowhite",
      },
      [209090] = {
          false,
          false,
          "mediumslateblue",
      },
      [169430] = {
          false,
          false,
          "gold",
      },
      [136934] = {
          false,
          false,
          "navajowhite",
      },
      [141284] = {
          false,
          false,
          "gold",
      },
      [180433] = {
          false,
          false,
          "orangered",
      },
      [199368] = {
          true,
          false,
          "DEATHKNIGHT",
      },
      [102019] = {
          false,
          false,
          "aqua",
      },
      [189901] = {
          false,
          false,
          "mediumpurple",
      },
      [141285] = {
          false,
          false,
          "lightgreen",
      },
      [131818] = {
          false,
          false,
          "magenta",
      },
      [98949] = {
          false,
          false,
          "mediumpurple",
      },
      [196043] = {
          true,
          false,
          "fuchsia",
      },
      [168153] = {
          false,
          false,
          "fuchsia",
      },
      [131819] = {
          true,
          false,
          "fuchsia",
      },
      [228540] = {
          true,
          false,
          "fuchsia",
      },
      [196044] = {
          true,
          false,
          "fuchsia",
      },
      [184018] = {
          false,
          false,
          "mediumslateblue",
      },
      [100485] = {
          true,
          false,
          "aqua",
      },
      [176598] = {
          false,
          false,
          "blue",
      },
      [102788] = {
          true,
          false,
          "fuchsia",
      },
      [129527] = {
          false,
          false,
          "WARRIOR",
      },
      [196045] = {
          true,
          false,
          "fuchsia",
      },
      [101637] = {
          false,
          false,
          "deepskyblue",
      },
      [131821] = {
          true,
          false,
          "fuchsia",
      },
      [187602] = {
          true,
          false,
          "dodgerblue",
      },
      [175576] = {
          false,
          false,
          "fuchsia",
      },
      [58319] = {
          false,
          false,
          "dimgray",
      },
      [39960] = {
          false,
          false,
          "WARRIOR",
      },
      [100486] = {
          false,
          false,
          "aqua",
      },
      [44566] = {
          false,
          false,
          "mediumpurple",
      },
      [178392] = {
          false,
          false,
          "deepskyblue",
      },
      [131823] = {
          false,
          false,
          "mediumslateblue",
      },
      [184022] = {
          true,
          false,
          "fuchsia",
      },
      [98696] = {
          false,
          false,
          "deepskyblue",
      },
      [129529] = {
          false,
          false,
          "lime",
      },
      [113537] = {
          true,
          false,
          "aqua",
      },
      [131825] = {
          false,
          false,
          "mediumslateblue",
      },
      [178139] = {
          false,
          false,
          "mediumpurple",
      },
      [133361] = {
          false,
          false,
          "fuchsia",
      },
      [164578] = {
          false,
          false,
          "blue",
      },
      [150250] = {
          false,
          false,
          "deepskyblue",
      },
      [178141] = {
          false,
          false,
          "deepskyblue",
      },
      [137713] = {
          false,
          false,
          "paleturquoise",
      },
      [150251] = {
          false,
          false,
          "aqua",
      },
      [178142] = {
          false,
          false,
          "aqua",
      },
      [137458] = {
          false,
          false,
          "deepskyblue",
      },
      [199124] = {
          false,
          false,
          "deepskyblue",
      },
      [126845] = {
          false,
          false,
          "fuchsia",
      },
      [131318] = {
          false,
          false,
          "mediumslateblue",
      },
      [168420] = {
          true,
          false,
          "fuchsia",
      },
      [150253] = {
          false,
          false,
          "mediumslateblue",
      },
      [168932] = {
          false,
          false,
          "gold",
      },
      [82579] = {
          false,
          false,
          "deepskyblue",
      },
      [129788] = {
          true,
          false,
          "fuchsia",
      },
      [190426] = {
          false,
          false,
          "cyan",
      },
      [137716] = {
          false,
          false,
          "blue",
      },
      [197847] = {
          false,
          false,
          "deepskyblue",
      },
      [177889] = {
          false,
          false,
          "mediumslateblue",
      },
      [168934] = {
          false,
          false,
          "fuchsia",
      },
      [45912] = {
          true,
          false,
          "fuchsia",
      },
      [177891] = {
          false,
          false,
          "deepskyblue",
      },
      [86547] = {
          false,
          false,
          "blue",
      },
      [177892] = {
          false,
          false,
          "deepskyblue",
      },
      [168425] = {
          false,
          false,
          "fuchsia",
      },
      [168681] = {
          false,
          false,
          "mediumslateblue",
      },
      [197595] = {
          false,
          false,
          "mediumpurple",
      },
      [40923] = {
          false,
          false,
          "WARRIOR",
      },
      [94224] = {
          false,
          false,
          "fuchsia",
      },
      [202969] = {
          false,
          false,
          "magenta",
      },
      [136186] = {
          false,
          false,
          "honeydew",
      },
      [172265] = {
          true,
          false,
          "fuchsia",
      },
      [160495] = {
          true,
          false,
          "magenta",
      },
      [186339] = {
          true,
          false,
          "fuchsia",
      },
      [193760] = {
          false,
          false,
          "mediumslateblue",
      },
      [192481] = {
          false,
          false,
          "fuchsia",
      },
      [81432] = {
          false,
          false,
          "deepskyblue",
      },
      [114312] = {
          false,
          false,
          "mediumslateblue",
      },
      [196576] = {
          true,
          false,
          "fuchsia",
      },
      [200926] = {
          false,
          false,
          "mediumslateblue",
      },
      [168942] = {
          true,
          false,
          "fuchsia",
      },
      [196577] = {
          false,
          false,
          "snow",
      },
      [131585] = {
          false,
          false,
          "blue",
      },
      [134144] = {
          false,
          false,
          "lightgreen",
      },
      [197857] = {
          false,
          false,
          "lime",
      },
      [102287] = {
          true,
          false,
          "aqua",
      },
      [131586] = {
          false,
          false,
          "cyan",
      },
      [205790] = {
          false,
          false,
          "WARRIOR",
      },
      [101008] = {
          false,
          false,
          "fuchsia",
      },
      [135169] = {
          false,
          false,
          "fuchsia",
      },
      [131587] = {
          true,
          false,
          "fuchsia",
      },
      [191206] = {
          false,
          false,
          "deepskyblue",
      },
      [57109] = {
          false,
          false,
          "WARRIOR",
      },
      [40925] = {
          false,
          false,
          "cyan",
      },
      [98706] = {
          true,
          false,
          "aqua",
      },
      [86552] = {
          false,
          false,
          "deepskyblue",
      },
      [162038] = {
          false,
          false,
          "deepskyblue",
      },
      [130435] = {
          false,
          false,
          "white",
      },
      [45915] = {
          false,
          false,
          "WARRIOR",
      },
      [81819] = {
          true,
          false,
          "fuchsia",
      },
      [184300] = {
          false,
          false,
          "mediumslateblue",
      },
      [162039] = {
          true,
          false,
          "fuchsia",
      },
      [170483] = {
          false,
          false,
          "fuchsia",
      },
      [76446] = {
          true,
          false,
          "dodgerblue",
      },
      [184301] = {
          true,
          false,
          "fuchsia",
      },
      [162040] = {
          true,
          false,
          "fuchsia",
      },
      [131847] = {
          false,
          false,
          "WARRIOR",
      },
      [134150] = {
          false,
          false,
          "navajowhite",
      },
      [114316] = {
          false,
          false,
          "aqua",
      },
      [81820] = {
          true,
          false,
          "fuchsia",
      },
      [213216] = {
          true,
          false,
          "aqua",
      },
      [173044] = {
          false,
          false,
          "aqua",
      },
      [224731] = {
          true,
          false,
          "fuchsia",
      },
      [139269] = {
          false,
          false,
          "deepskyblue",
      },
      [137478] = {
          false,
          false,
          "gold",
      },
      [156157] = {
          false,
          false,
          "blue",
      },
      [131849] = {
          false,
          false,
          "deepskyblue",
      },
      [95766] = {
          true,
          false,
          "aqua",
      },
      [114317] = {
          false,
          false,
          "aqua",
      },
      [204262] = {
          false,
          false,
          "fuchsia",
      },
      [127111] = {
          false,
          false,
          "deepskyblue",
      },
      [131850] = {
          false,
          false,
          "aqua",
      },
      [191469] = {
          false,
          false,
          "aqua",
      },
      [98965] = {
          false,
          false,
          "mediumslateblue",
      },
      [175861] = {
          false,
          false,
          "fuchsia",
      },
      [83613] = {
          false,
          false,
          "mediumslateblue",
      },
      [178165] = {
          false,
          false,
          "mediumslateblue",
      },
      [199659] = {
          false,
          false,
          "magenta",
      },
      [86684] = {
          false,
          false,
          "deepskyblue",
      },
      [212453] = {
          true,
          false,
          "fuchsia",
      },
      [170490] = {
          true,
          false,
          "fuchsia",
      },
      [150276] = {
          false,
          false,
          "deepskyblue",
      },
      [164861] = {
          false,
          false,
          "blue",
      },
      [45917] = {
          false,
          false,
          "cyan",
      },
      [162047] = {
          false,
          false,
          "deepskyblue",
      },
      [96664] = {
          true,
          false,
          "fuchsia",
      },
      [134157] = {
          false,
          false,
          "peru",
      },
      [216293] = {
          true,
          false,
          "fuchsia",
      },
      [56792] = {
          false,
          false,
          "fuchsia",
      },
      [137484] = {
          false,
          false,
          "gold",
      },
      [95769] = {
          true,
          false,
          "fuchsia",
      },
      [155908] = {
          false,
          false,
          "fuchsia",
      },
      [168446] = {
          false,
          false,
          "mediumslateblue",
      },
      [174843] = {
          false,
          false,
          "mediumpurple",
      },
      [205804] = {
          false,
          false,
          "WARRIOR",
      },
      [208363] = {
          false,
          false,
          "mediumslateblue",
      },
      [137486] = {
          false,
          false,
          "gold",
      },
      [102295] = {
          false,
          false,
          "cyan",
      },
      [178171] = {
          false,
          false,
          "fuchsia",
      },
      [180474] = {
          false,
          false,
          "fuchsia",
      },
      [131858] = {
          false,
          false,
          "deepskyblue",
      },
      [138255] = {
          false,
          false,
          "maroon",
      },
      [134417] = {
          false,
          false,
          "gold",
      },
      [208365] = {
          false,
          false,
          "palegreen",
      },
      [182778] = {
          false,
          false,
          "fuchsia",
      },
      [95771] = {
          true,
          false,
          "fuchsia",
      },
      [206063] = {
          false,
          false,
          "WARRIOR",
      },
      [59544] = {
          false,
          false,
          "magenta",
      },
      [129547] = {
          false,
          false,
          "mediumslateblue",
      },
      [98970] = {
          false,
          false,
          "mediumslateblue",
      },
      [187897] = {
          true,
          false,
          "aqua",
      },
      [95772] = {
          false,
          false,
          "deepskyblue",
      },
      [45919] = {
          true,
          false,
          "aqua",
      },
      [186107] = {
          false,
          false,
          "fuchsia",
      },
      [129548] = {
          false,
          false,
          "WARRIOR",
      },
      [206066] = {
          true,
          false,
          "fuchsia",
      },
      [127757] = {
          false,
          false,
          "cyan",
      },
      [131863] = {
          false,
          false,
          "mediumslateblue",
      },
      [104217] = {
          false,
          false,
          "mediumslateblue",
      },
      [162057] = {
          true,
          false,
          "fuchsia",
      },
      [59545] = {
          true,
          false,
          "fuchsia",
      },
      [131864] = {
          true,
          false,
          "fuchsia",
      },
      [136214] = {
          false,
          false,
          "plum",
      },
      [136470] = {
          false,
          false,
          "honeydew",
      },
      [107288] = {
          false,
          false,
          "deepskyblue",
      },
      [80805] = {
          false,
          false,
          "mediumpurple",
      },
      [184319] = {
          false,
          false,
          "lime",
      },
      [133912] = {
          true,
          false,
          "fuchsia",
      },
      [164873] = {
          false,
          false,
          "fuchsia",
      },
      [43873] = {
          true,
          false,
          "aqua",
      },
      [82597] = {
          false,
          false,
          "mediumslateblue",
      },
      [190206] = {
          false,
          false,
          "lime",
      },
      [191230] = {
          false,
          false,
          "fuchsia",
      },
      [190207] = {
          true,
          false,
          "fuchsia",
      },
      [59546] = {
          true,
          false,
          "fuchsia",
      },
      [212981] = {
          false,
          false,
          "WARRIOR",
      },
      [192767] = {
          false,
          false,
          "mediumpurple",
      },
      [191232] = {
          false,
          false,
          "blue",
      },
      [163086] = {
          false,
          false,
          "deepskyblue",
      },
      [184580] = {
          true,
          false,
          "fuchsia",
      },
      [132126] = {
          false,
          false,
          "magenta",
      },
      [206074] = {
          true,
          false,
          "fuchsia",
      },
      [186116] = {
          true,
          false,
          "fuchsia",
      },
      [80936] = {
          false,
          false,
          "blue",
      },
      [184581] = {
          true,
          false,
          "aqua",
      },
      [168717] = {
          false,
          false,
          "deepskyblue",
      },
      [134174] = {
          false,
          false,
          "honeydew",
      },
      [114584] = {
          false,
          false,
          "mediumpurple",
      },
      [184582] = {
          false,
          false,
          "deepskyblue",
      },
      [59547] = {
          false,
          false,
          "mediumpurple",
      },
      [168718] = {
          false,
          false,
          "aqua",
      },
      [129553] = {
          true,
          false,
          "fuchsia",
      },
      [214264] = {
          true,
          false,
          "aqua",
      },
      [222964] = {
          true,
          false,
          "fuchsia",
      },
      [80937] = {
          false,
          false,
          "deepskyblue",
      },
      [176395] = {
          false,
          false,
          "deepskyblue",
      },
      [204030] = {
          false,
          false,
          "WARRIOR",
      },
      [176396] = {
          false,
          false,
          "mediumslateblue",
      },
      [150297] = {
          false,
          false,
          "aqua",
      },
      [84520] = {
          false,
          false,
          "mediumpurple",
      },
      [80938] = {
          false,
          false,
          "mediumpurple",
      },
      [95779] = {
          false,
          false,
          "mediumslateblue",
      },
      [186121] = {
          false,
          false,
          "mediumslateblue",
      },
      [186122] = {
          false,
          false,
          "mediumslateblue",
      },
      [184331] = {
          false,
          false,
          "mediumslateblue",
      },
      [153882] = {
          false,
          false,
          "deepskyblue",
      },
      [193799] = {
          false,
          false,
          "cyan",
      },
      [196102] = {
          true,
          false,
          "fuchsia",
      },
      [135204] = {
          false,
          false,
          "honeydew",
      },
      [224249] = {
          true,
          false,
          "aqua",
      },
      [189706] = {
          false,
          false,
          "yellow",
      },
      [186124] = {
          false,
          false,
          "deepskyblue",
      },
      [180495] = {
          false,
          false,
          "fuchsia",
      },
      [223994] = {
          true,
          false,
          "fuchsia",
      },
      [186125] = {
          true,
          false,
          "fuchsia",
      },
      [165911] = {
          false,
          false,
          "fuchsia",
      },
      [201222] = {
          false,
          false,
          "cyan",
      },
      [184335] = {
          false,
          false,
          "WARRIOR",
      },
      [201223] = {
          true,
          false,
          "fuchsia",
      },
      [193291] = {
          false,
          false,
          "magenta",
      },
      [45924] = {
          false,
          false,
          "PALADIN",
      },
      [194315] = {
          true,
          false,
          "fuchsia",
      },
      [165913] = {
          false,
          false,
          "fuchsia",
      },
      [137511] = {
          false,
          false,
          "navajowhite",
      },
      [40167] = {
          true,
          false,
          "fuchsia",
      },
      [96934] = {
          false,
          false,
          "deepskyblue",
      },
      [194316] = {
          true,
          false,
          "fuchsia",
      },
      [193293] = {
          true,
          false,
          "aqua",
      },
      [114334] = {
          false,
          false,
          "mediumpurple",
      },
      [40935] = {
          false,
          false,
          "lime",
      },
      [129559] = {
          false,
          false,
          "lime",
      },
      [45477] = {
          true,
          false,
          "aqua",
      },
      [99366] = {
          true,
          false,
          "fuchsia",
      },
      [187154] = {
          false,
          false,
          "mediumslateblue",
      },
      [167964] = {
          false,
          false,
          "fuchsia",
      },
      [187155] = {
          true,
          false,
          "fuchsia",
      },
      [195855] = {
          false,
          false,
          "WARRIOR",
      },
      [134701] = {
          false,
          false,
          "magenta",
      },
      [80816] = {
          false,
          false,
          "aqua",
      },
      [167965] = {
          true,
          false,
          "fuchsia",
      },
      [137516] = {
          false,
          false,
          "lightsalmon",
      },
      [216326] = {
          true,
          false,
          "fuchsia",
      },
      [40936] = {
          false,
          false,
          "WARRIOR",
      },
      [165919] = {
          true,
          false,
          "fuchsia",
      },
      [137517] = {
          false,
          false,
          "peru",
      },
      [197904] = {
          false,
          false,
          "snow",
      },
      [115488] = {
          false,
          false,
          "aqua",
      },
      [171805] = {
          false,
          false,
          "blue",
      },
      [167967] = {
          true,
          false,
          "fuchsia",
      },
      [192787] = {
          false,
          false,
          "WARRIOR",
      },
      [197905] = {
          true,
          false,
          "fuchsia",
      },
      [163618] = {
          true,
          false,
          "fuchsia",
      },
      [192788] = {
          true,
          false,
          "fuchsia",
      },
      [205326] = {
          false,
          false,
          "lime",
      },
      [213770] = {
          false,
          false,
          "mediumslateblue",
      },
      [168992] = {
          true,
          false,
          "fuchsia",
      },
      [220423] = {
          true,
          false,
          "aqua",
      },
      [196115] = {
          true,
          false,
          "fuchsia",
      },
      [192789] = {
          true,
          false,
          "aqua",
      },
      [187160] = {
          true,
          false,
          "aqua",
      },
      [114338] = {
          false,
          false,
          "aqua",
      },
      [206351] = {
          true,
          false,
          "fuchsia",
      },
      [204560] = {
          false,
          false,
          "fuchsia",
      },
      [137521] = {
          false,
          false,
          "cornflowerblue",
      },
      [59552] = {
          true,
          false,
          "fuchsia",
      },
      [189464] = {
          true,
          false,
          "fuchsia",
      },
      [206352] = {
          false,
          false,
          "deepskyblue",
      },
      [163621] = {
          true,
          false,
          "aqua",
      },
      [182045] = {
          false,
          false,
          "fuchsia",
      },
      [198933] = {
          false,
          false,
          "mediumpurple",
      },
      [133685] = {
          true,
          false,
          "fuchsia",
      },
      [189466] = {
          false,
          false,
          "cyan",
      },
      [189722] = {
          false,
          false,
          "mediumslateblue",
      },
      [165414] = {
          true,
          false,
          "magenta",
      },
      [133430] = {
          false,
          false,
          "cornflowerblue",
      },
      [135989] = {
          false,
          false,
          "WARRIOR",
      },
      [189467] = {
          false,
          false,
          "DRUID",
      },
      [83763] = {
          false,
          false,
          "deepskyblue",
      },
      [59553] = {
          false,
          false,
          "lime",
      },
      [199703] = {
          false,
          false,
          "aqua",
      },
      [59873] = {
          false,
          false,
          "mediumslateblue",
      },
      [133432] = {
          false,
          false,
          "gold",
      },
      [45928] = {
          true,
          false,
          "aqua",
      },
      [83892] = {
          true,
          false,
          "fuchsia",
      },
      [163882] = {
          true,
          false,
          "fuchsia",
      },
      [192796] = {
          false,
          false,
          "lime",
      },
      [189470] = {
          true,
          false,
          "fuchsia",
      },
      [188703] = {
          false,
          false,
          "yellow",
      },
      [136249] = {
          false,
          false,
          "plum",
      },
      [189727] = {
          false,
          false,
          "fuchsia",
      },
      [83765] = {
          false,
          false,
          "aqua",
      },
      [83893] = {
          true,
          false,
          "fuchsia",
      },
      [201754] = {
          false,
          false,
          "deepskyblue",
      },
      [216339] = {
          true,
          false,
          "fuchsia",
      },
      [89011] = {
          false,
          false,
          "aqua",
      },
      [210966] = {
          true,
          false,
          "fuchsia",
      },
      [101549] = {
          false,
          false,
          "magenta",
      },
      [205337] = {
          true,
          false,
          "fuchsia",
      },
      [168747] = {
          false,
          false,
          "fuchsia",
      },
      [83894] = {
          false,
          false,
          "mediumslateblue",
      },
      [192800] = {
          true,
          false,
          "fuchsia",
      },
      [197406] = {
          false,
          false,
          "deepskyblue",
      },
      [201756] = {
          false,
          false,
          "fuchsia",
      },
      [75451] = {
          false,
          false,
          "fuchsia",
      },
      [100527] = {
          true,
          false,
          "fuchsia",
      },
      [156212] = {
          false,
          false,
          "deepskyblue",
      },
      [163121] = {
          false,
          false,
          "deepskyblue",
      },
      [45930] = {
          true,
          false,
          "fuchsia",
      },
      [186151] = {
          false,
          false,
          "mediumslateblue",
      },
      [223253] = {
          true,
          false,
          "fuchsia",
      },
      [162099] = {
          false,
          false,
          "fuchsia",
      },
      [189478] = {
          false,
          false,
          "mediumslateblue",
      },
      [97202] = {
          false,
          false,
          "aqua",
      },
      [163891] = {
          true,
          false,
          "fuchsia",
      },
      [186664] = {
          false,
          false,
          "deepskyblue",
      },
      [195876] = {
          true,
          false,
          "fuchsia",
      },
      [135234] = {
          false,
          false,
          "WARRIOR",
      },
      [195877] = {
          true,
          false,
          "fuchsia",
      },
      [103344] = {
          false,
          false,
          "mediumslateblue",
      },
      [135235] = {
          false,
          false,
          "goldenrod",
      },
      [163126] = {
          true,
          false,
          "fuchsia",
      },
      [163894] = {
          false,
          false,
          "deepskyblue",
      },
      [75966] = {
          false,
          false,
          "fuchsia",
      },
      [199717] = {
          true,
          false,
          "fuchsia",
      },
      [165430] = {
          false,
          false,
          "deepskyblue",
      },
      [180015] = {
          false,
          false,
          "blue",
      },
      [81212] = {
          false,
          false,
          "deepskyblue",
      },
      [136005] = {
          false,
          false,
          "blue",
      },
      [99891] = {
          false,
          false,
          "WARRIOR",
      },
      [163128] = {
          true,
          false,
          "fuchsia",
      },
      [100531] = {
          true,
          false,
          "aqua",
      },
      [136006] = {
          false,
          false,
          "blue",
      },
      [102962] = {
          false,
          false,
          "fuchsia",
      },
      [135239] = {
          false,
          false,
          "paleturquoise",
      },
      [164921] = {
          true,
          false,
          "fuchsia",
      },
      [45932] = {
          false,
          false,
          "fuchsia",
      },
      [135240] = {
          true,
          false,
          "fuchsia",
      },
      [100532] = {
          true,
          false,
          "fuchsia",
      },
      [166969] = {
          false,
          false,
          "deepskyblue",
      },
      [208165] = {
          true,
          false,
          "fuchsia",
      },
      [177716] = {
          false,
          false,
          "deepskyblue",
      },
      [115757] = {
          false,
          false,
          "mediumslateblue",
      },
      [83389] = {
          false,
          false,
          "deepskyblue",
      },
      [166970] = {
          false,
          false,
          "blue",
      },
      [40943] = {
          true,
          false,
          "fuchsia",
      },
      [189232] = {
          false,
          false,
          "mediumslateblue",
      },
      [166971] = {
          false,
          false,
          "fuchsia",
      },
      [152898] = {
          false,
          false,
          "fuchsia",
      },
      [223776] = {
          true,
          false,
          "fuchsia",
      },
      [83390] = {
          false,
          false,
          "deepskyblue",
      },
      [164414] = {
          false,
          false,
          "aqua",
      },
      [189234] = {
          false,
          false,
          "mediumpurple",
      },
      [164926] = {
          false,
          false,
          "fuchsia",
      },
      [212775] = {
          true,
          false,
          "fuchsia",
      },
      [186420] = {
          true,
          false,
          "fuchsia",
      },
      [189235] = {
          true,
          false,
          "fuchsia",
      },
      [220196] = {
          true,
          false,
          "fuchsia",
      },
      [75459] = {
          true,
          false,
          "fuchsia",
      },
      [134990] = {
          false,
          false,
          "honeydew",
      },
      [81984] = {
          false,
          false,
          "mediumslateblue",
      },
      [138061] = {
          false,
          false,
          "magenta",
      },
      [220197] = {
          true,
          false,
          "aqua",
      },
      [95674] = {
          false,
          false,
          "mediumslateblue",
      },
      [164929] = {
          true,
          false,
          "aqua",
      },
      [104246] = {
          false,
          false,
          "WARRIOR",
      },
      [212778] = {
          false,
          false,
          "fuchsia",
      },
      [81985] = {
          true,
          false,
          "fuchsia",
      },
      [131666] = {
          true,
          false,
          "fuchsia",
      },
      [138063] = {
          false,
          false,
          "blue",
      },
      [185656] = {
          true,
          false,
          "fuchsia",
      },
      [131667] = {
          false,
          false,
          "mediumslateblue",
      },
      [138064] = {
          false,
          false,
          "blue",
      },
      [65317] = {
          false,
          false,
          "mediumpurple",
      },
      [152905] = {
          false,
          false,
          "fuchsia",
      },
      [104247] = {
          true,
          false,
          "fuchsia",
      },
      [97083] = {
          false,
          false,
          "magenta",
      },
      [131669] = {
          false,
          false,
          "WARRIOR",
      },
      [176959] = {
          false,
          false,
          "deepskyblue",
      },
      [45935] = {
          true,
          false,
          "fuchsia",
      },
      [131670] = {
          false,
          false,
          "mediumslateblue",
      },
      [213806] = {
          true,
          false,
          "fuchsia",
      },
      [167493] = {
          true,
          false,
          "fuchsia",
      },
      [205363] = {
          true,
          false,
          "fuchsia",
      },
      [100539] = {
          false,
          false,
          "mediumslateblue",
      },
      [168007] = {
          false,
          false,
          "blue",
      },
      [179010] = {
          false,
          false,
          "deepskyblue",
      },
      [134232] = {
          false,
          false,
          "goldenrod",
      },
      [218671] = {
          true,
          false,
          "fuchsia",
      },
      [212786] = {
          true,
          false,
          "aqua",
      },
      [205366] = {
          false,
          false,
          "WARRIOR",
      },
      [214066] = {
          true,
          false,
          "fuchsia",
      },
      [115765] = {
          false,
          false,
          "deepskyblue",
      },
      [189247] = {
          true,
          false,
          "fuchsia",
      },
      [104251] = {
          false,
          false,
          "lime",
      },
      [184130] = {
          true,
          false,
          "aqua",
      },
      [135258] = {
          false,
          false,
          "peru",
      },
      [41139] = {
          true,
          false,
          "fuchsia",
      },
      [179269] = {
          false,
          false,
          "deepskyblue",
      },
      [187969] = {
          false,
          false,
          "lime",
      },
      [184131] = {
          false,
          false,
          "cyan",
      },
      [101437] = {
          false,
          false,
          "peachpuff",
      },
      [131677] = {
          false,
          false,
          "mediumslateblue",
      },
      [165197] = {
          false,
          false,
          "mediumslateblue",
      },
      [208440] = {
          false,
          false,
          "mediumpurple",
      },
      [184132] = {
          true,
          false,
          "fuchsia",
      },
      [195135] = {
          false,
          false,
          "cyan",
      },
      [92610] = {
          false,
          false,
          "lime",
      },
      [84550] = {
          false,
          false,
          "mediumpurple",
      },
      [196671] = {
          true,
          false,
          "aqua",
      },
      [170572] = {
          true,
          false,
          "fuchsia",
      },
      [136541] = {
          false,
          false,
          "deepskyblue",
      },
      [81864] = {
          false,
          false,
          "blue",
      },
      [98368] = {
          false,
          false,
          "WARRIOR",
      },
      [75979] = {
          true,
          false,
          "fuchsia",
      },
      [156244] = {
          false,
          false,
          "mediumpurple",
      },
      [201790] = {
          false,
          false,
          "mediumslateblue",
      },
      [171341] = {
          false,
          false,
          "deepskyblue",
      },
      [151127] = {
          false,
          false,
          "fuchsia",
      },
      [135007] = {
          false,
          false,
          "gold",
      },
      [135263] = {
          false,
          false,
          "maroon",
      },
      [156245] = {
          false,
          false,
          "mediumpurple",
      },
      [128434] = {
          true,
          false,
          "fuchsia",
      },
      [197697] = {
          true,
          false,
          "aqua",
      },
      [199233] = {
          false,
          false,
          "mediumpurple",
      },
      [92612] = {
          true,
          false,
          "aqua",
      },
      [197698] = {
          true,
          false,
          "aqua",
      },
      [171343] = {
          false,
          false,
          "deepskyblue",
      },
      [208445] = {
          false,
          false,
          "mediumslateblue",
      },
      [186696] = {
          false,
          false,
          "cyan",
      },
      [128435] = {
          false,
          false,
          "maroon",
      },
      [98370] = {
          true,
          false,
          "fuchsia",
      },
      [162133] = {
          false,
          false,
          "fuchsia",
      },
      [176974] = {
          false,
          false,
          "fuchsia",
      },
      [163157] = {
          false,
          false,
          "deepskyblue",
      },
      [97219] = {
          false,
          false,
          "mediumslateblue",
      },
      [131685] = {
          true,
          false,
          "fuchsia",
      },
      [138338] = {
          true,
          false,
          "fuchsia",
      },
      [157017] = {
          false,
          false,
          "blue",
      },
      [220730] = {
          true,
          false,
          "aqua",
      },
      [98243] = {
          true,
          false,
          "aqua",
      },
      [211263] = {
          true,
          false,
          "aqua",
      },
      [184908] = {
          false,
          false,
          "magenta",
      },
      [195399] = {
          false,
          false,
          "fuchsia",
      },
      [199749] = {
          true,
          false,
          "aqua",
      },
      [44404] = {
          true,
          false,
          "fuchsia",
      },
      [136549] = {
          true,
          false,
          "aqua",
      },
      [184910] = {
          false,
          false,
          "palegreen",
      },
      [207939] = {
          true,
          false,
          "fuchsia",
      },
      [115388] = {
          false,
          false,
          "fuchsia",
      },
      [164185] = {
          false,
          false,
          "deepskyblue",
      },
      [137830] = {
          true,
          false,
          "fuchsia",
      },
      [130485] = {
          false,
          false,
          "peru",
      },
      [136295] = {
          false,
          false,
          "peru",
      },
      [186191] = {
          true,
          false,
          "fuchsia",
      },
      [107073] = {
          false,
          false,
          "magenta",
      },
      [185680] = {
          false,
          false,
          "magenta",
      },
      [127799] = {
          false,
          false,
          "WARRIOR",
      },
      [192333] = {
          true,
          false,
          "fuchsia",
      },
      [151649] = {
          false,
          false,
          "deepskyblue",
      },
      [133482] = {
          false,
          false,
          "maroon",
      },
      [208198] = {
          false,
          false,
          "fuchsia",
      },
      [173655] = {
          true,
          false,
          "aqua",
      },
      [131436] = {
          true,
          false,
          "aqua",
      },
      [205384] = {
          true,
          false,
          "fuchsia",
      },
      [134251] = {
          false,
          false,
          "honeydew",
      },
      [194894] = {
          true,
          false,
          "fuchsia",
      },
      [189265] = {
          true,
          false,
          "fuchsia",
      },
      [185683] = {
          false,
          false,
          "palegreen",
      },
      [208456] = {
          true,
          false,
          "aqua",
      },
      [207177] = {
          false,
          false,
          "mediumslateblue",
      },
      [189266] = {
          true,
          false,
          "aqua",
      },
      [190034] = {
          false,
          false,
          "mediumslateblue",
      },
      [178008] = {
          false,
          false,
          "yellow",
      },
      [194896] = {
          false,
          false,
          "fuchsia",
      },
      [130488] = {
          false,
          false,
          "lightsalmon",
      },
      [207946] = {
          true,
          false,
          "fuchsia",
      },
      [185685] = {
          false,
          false,
          "darksalmon",
      },
      [165471] = {
          false,
          false,
          "blue",
      },
      [188244] = {
          false,
          false,
          "mediumpurple",
      },
      [194897] = {
          false,
          false,
          "fuchsia",
      },
      [194898] = {
          false,
          false,
          "WARRIOR",
      },
      [52019] = {
          false,
          false,
          "fuchsia",
      },
      [190294] = {
          true,
          false,
          "fuchsia",
      },
      [151657] = {
          false,
          false,
          "aqua",
      },
      [225605] = {
          true,
          false,
          "fuchsia",
      },
      [40633] = {
          true,
          false,
          "aqua",
      },
      [187224] = {
          false,
          false,
          "cyan",
      },
      [134514] = {
          false,
          false,
          "lightgreen",
      },
      [114626] = {
          false,
          false,
          "aqua",
      },
      [174175] = {
          false,
          false,
          "deepskyblue",
      },
      [198995] = {
          false,
          false,
          "mediumslateblue",
      },
      [96587] = {
          false,
          false,
          "deepskyblue",
      },
      [203857] = {
          true,
          false,
          "fuchsia",
      },
      [83026] = {
          false,
          false,
          "mediumslateblue",
      },
      [198996] = {
          false,
          false,
          "mediumpurple",
      },
      [170850] = {
          false,
          false,
          "deepskyblue",
      },
      [114627] = {
          false,
          false,
          "blue",
      },
      [161895] = {
          false,
          false,
          "magenta",
      },
      [198997] = {
          false,
          false,
          "mediumpurple",
      },
      [195927] = {
          true,
          false,
          "fuchsia",
      },
      [198998] = {
          false,
          false,
          "mediumpurple",
      },
      [40634] = {
          true,
          false,
          "fuchsia",
      },
      [189531] = {
          true,
          false,
          "fuchsia",
      },
      [195928] = {
          true,
          false,
          "fuchsia",
      },
      [165479] = {
          false,
          false,
          "mediumpurple",
      },
      [114628] = {
          false,
          false,
          "magenta",
      },
      [198999] = {
          false,
          false,
          "mediumslateblue",
      },
      [203861] = {
          false,
          false,
          "mediumslateblue",
      },
      [195929] = {
          true,
          false,
          "fuchsia",
      },
      [214608] = {
          false,
          false,
          "aqua",
      },
      [186206] = {
          false,
          false,
          "WARRIOR",
      },
      [199000] = {
          false,
          false,
          "mediumslateblue",
      },
      [195930] = {
          true,
          false,
          "fuchsia",
      },
      [114629] = {
          false,
          false,
          "deepskyblue",
      },
      [186208] = {
          false,
          false,
          "DRUID",
      },
      [180323] = {
          false,
          false,
          "fuchsia",
      },
      [193373] = {
          true,
          false,
          "fuchsia",
      },
      [116549] = {
          false,
          false,
          "aqua",
      },
      [87252] = {
          false,
          false,
          "mediumpurple",
      },
      [164461] = {
          false,
          false,
          "blue",
      },
      [134012] = {
          false,
          false,
          "lightsalmon",
      },
      [181861] = {
          true,
          false,
          "aqua",
      },
      [180070] = {
          false,
          false,
          "fuchsia",
      },
      [129600] = {
          true,
          false,
          "fuchsia",
      },
      [210264] = {
          true,
          false,
          "aqua",
      },
      [167533] = {
          false,
          false,
          "deepskyblue",
      },
      [101326] = {
          false,
          false,
          "fuchsia",
      },
      [157810] = {
          false,
          false,
          "deepskyblue",
      },
      [164463] = {
          false,
          false,
          "deepskyblue",
      },
      [102094] = {
          false,
          false,
          "WARRIOR",
      },
      [114632] = {
          false,
          false,
          "aqua",
      },
      [211289] = {
          true,
          false,
          "fuchsia",
      },
      [129601] = {
          false,
          false,
          "deepskyblue",
      },
      [211290] = {
          true,
          false,
          "fuchsia",
      },
      [99664] = {
          false,
          false,
          "fuchsia",
      },
      [197985] = {
          true,
          false,
          "fuchsia",
      },
      [167536] = {
          false,
          false,
          "deepskyblue",
      },
      [114633] = {
          false,
          false,
          "deepskyblue",
      },
      [135552] = {
          false,
          false,
          "deepskyblue",
      },
      [129602] = {
          true,
          false,
          "aqua",
      },
      [111563] = {
          false,
          false,
          "WARRIOR",
      },
      [205151] = {
          true,
          false,
          "aqua",
      },
      [197219] = {
          false,
          false,
          "mediumslateblue",
      },
      [187240] = {
          false,
          false,
          "mediumslateblue",
      },
      [40765] = {
          false,
          false,
          "mediumpurple",
      },
      [171376] = {
          false,
          false,
          "deepskyblue",
      },
      [114634] = {
          false,
          false,
          "mediumslateblue",
      },
      [205152] = {
          true,
          false,
          "aqua",
      },
      [205408] = {
          false,
          false,
          "WARRIOR",
      },
      [191847] = {
          true,
          false,
          "fuchsia",
      },
      [179821] = {
          false,
          false,
          "mediumslateblue",
      },
      [196198] = {
          false,
          false,
          "blue",
      },
      [115019] = {
          false,
          false,
          "deepskyblue",
      },
      [207969] = {
          true,
          false,
          "fuchsia",
      },
      [188011] = {
          false,
          false,
          "mediumslateblue",
      },
      [186220] = {
          true,
          false,
          "fuchsia",
      },
      [180335] = {
          false,
          false,
          "deepskyblue",
      },
      [207202] = {
          true,
          false,
          "fuchsia",
      },
      [150142] = {
          false,
          false,
          "deepskyblue",
      },
      [196200] = {
          false,
          false,
          "lime",
      },
      [114636] = {
          false,
          false,
          "deepskyblue",
      },
      [180336] = {
          false,
          false,
          "aqua",
      },
      [168310] = {
          false,
          false,
          "fuchsia",
      },
      [150143] = {
          false,
          false,
          "blue",
      },
      [101075] = {
          false,
          false,
          "fuchsia",
      },
      [134024] = {
          true,
          false,
          "fuchsia",
      },
      [196202] = {
          true,
          false,
          "fuchsia",
      },
      [135048] = {
          false,
          false,
          "magenta",
      },
      [174197] = {
          true,
          false,
          "magenta",
      },
      [205158] = {
          true,
          false,
          "fuchsia",
      },
      [187503] = {
          false,
          false,
          "mediumslateblue",
      },
      [196203] = {
          false,
          false,
          "deepskyblue",
      },
      [135049] = {
          true,
          false,
          "fuchsia",
      },
      [113998] = {
          true,
          false,
          "aqua",
      },
      [128455] = {
          true,
          false,
          "aqua",
      },
      [171384] = {
          false,
          false,
          "blue",
      },
      [120651] = {
          true,
          false,
          "darkorange",
      },
      [128967] = {
          false,
          false,
          "palegreen",
      },
      [168058] = {
          true,
          false,
          "fuchsia",
      },
      [136330] = {
          false,
          false,
          "fuchsia",
      },
      [115406] = {
          false,
          false,
          "deepskyblue",
      },
      [84957] = {
          true,
          false,
          "fuchsia",
      },
      [186738] = {
          false,
          false,
          "mediumslateblue",
      },
      [39616] = {
          false,
          false,
          "WARRIOR",
      },
      [95832] = {
          false,
          false,
          "WARRIOR",
      },
      [135052] = {
          false,
          false,
          "WARRIOR",
      },
      [186739] = {
          false,
          false,
          "mediumslateblue",
      },
      [168572] = {
          true,
          false,
          "fuchsia",
      },
      [136076] = {
          false,
          false,
          "lightcoral",
      },
      [115407] = {
          false,
          false,
          "blue",
      },
      [206698] = {
          true,
          false,
          "fuchsia",
      },
      [186740] = {
          false,
          false,
          "WARRIOR",
      },
      [213607] = {
          false,
          false,
          "WARRIOR",
      },
      [195696] = {
          true,
          false,
          "magenta",
      },
      [157571] = {
          false,
          false,
          "deepskyblue",
      },
      [186741] = {
          true,
          false,
          "fuchsia",
      },
      [162689] = {
          false,
          false,
          "deepskyblue",
      },
      [183671] = {
          false,
          false,
          "fuchsia",
      },
      [157572] = {
          false,
          false,
          "deepskyblue",
      },
      [223844] = {
          true,
          false,
          "fuchsia",
      },
      [164737] = {
          false,
          false,
          "fuchsia",
      },
      [187510] = {
          false,
          false,
          "deepskyblue",
      },
      [163458] = {
          true,
          false,
          "fuchsia",
      },
      [137103] = {
          false,
          false,
          "lime",
      },
      [98521] = {
          true,
          false,
          "fuchsia",
      },
      [162691] = {
          false,
          false,
          "mediumslateblue",
      },
      [163459] = {
          true,
          false,
          "fuchsia",
      },
      [180091] = {
          false,
          false,
          "mediumpurple",
      },
      [40577] = {
          false,
          false,
          "mediumslateblue",
      },
      [109908] = {
          false,
          false,
          "fuchsia",
      },
      [162692] = {
          false,
          false,
          "deepskyblue",
      },
      [187768] = {
          false,
          false,
          "deepskyblue",
      },
      [102232] = {
          true,
          false,
          "fuchsia",
      },
      [165763] = {
          false,
          false,
          "deepskyblue",
      },
      [180348] = {
          false,
          false,
          "blue",
      },
      [129227] = {
          false,
          false,
          "maroon",
      },
      [168578] = {
          true,
          false,
          "fuchsia",
      },
      [189816] = {
          false,
          false,
          "deepskyblue",
      },
      [165764] = {
          false,
          false,
          "mediumslateblue",
      },
      [166276] = {
          true,
          false,
          "fuchsia",
      },
      [170882] = {
          true,
          false,
          "magenta",
      },
      [188026] = {
          false,
          false,
          "fuchsia",
      },
      [187771] = {
          false,
          false,
          "blue",
      },
      [174210] = {
          true,
          false,
          "magenta",
      },
      [169861] = {
          false,
          false,
          "deepskyblue",
      },
      [180864] = {
          false,
          false,
          "fuchsia",
      },
      [183423] = {
          false,
          false,
          "deepskyblue",
      },
      [179841] = {
          false,
          false,
          "aqua",
      },
      [150160] = {
          false,
          false,
          "mediumslateblue",
      },
      [173189] = {
          false,
          false,
          "deepskyblue",
      },
      [179842] = {
          false,
          false,
          "deepskyblue",
      },
      [204918] = {
          true,
          false,
          "fuchsia",
      },
      [134041] = {
          false,
          false,
          "deepskyblue",
      },
      [183425] = {
          false,
          false,
          "deepskyblue",
      },
      [171656] = {
          true,
          false,
          "fuchsia",
      },
      [126928] = {
          false,
          false,
          "DRUID",
      },
      [88163] = {
          false,
          false,
          "mediumslateblue",
      },
      [86372] = {
          false,
          false,
          "cyan",
      },
      [199547] = {
          false,
          false,
          "blueviolet",
      },
      [186242] = {
          false,
          false,
          "lime",
      },
      [179334] = {
          false,
          false,
          "mediumslateblue",
      },
      [79720] = {
          false,
          false,
          "magenta",
      },
      [122963] = {
          false,
          false,
          "mediumpurple",
      },
      [199037] = {
          true,
          false,
          "fuchsia",
      },
      [150165] = {
          false,
          false,
          "aqua",
      },
      [199549] = {
          false,
          false,
          "deepskyblue",
      },
      [187523] = {
          false,
          false,
          "mediumslateblue",
      },
      [179847] = {
          false,
          false,
          "fuchsia",
      },
      [176521] = {
          false,
          false,
          "blue",
      },
      [205435] = {
          false,
          false,
          "mediumpurple",
      },
      [205691] = {
          true,
          false,
          "fuchsia",
      },
      [180104] = {
          false,
          false,
          "deepskyblue",
      },
      [190340] = {
          true,
          false,
          "aqua",
      },
      [176523] = {
          false,
          false,
          "mediumpurple",
      },
      [150168] = {
          false,
          false,
          "mediumslateblue",
      },
      [95842] = {
          true,
          false,
          "fuchsia",
      },
      [196482] = {
          false,
          false,
          "mediumslateblue",
      },
      [122965] = {
          false,
          false,
          "mediumpurple",
      },
      [150169] = {
          false,
          false,
          "deepskyblue",
      },
      [165010] = {
          false,
          false,
          "mediumpurple",
      },
      [190342] = {
          true,
          false,
          "fuchsia",
      },
      [135329] = {
          false,
          false,
          "magenta",
      },
      [136353] = {
          false,
          false,
          "royalblue",
      },
      [179852] = {
          false,
          false,
          "blue",
      },
      [131492] = {
          true,
          false,
          "fuchsia",
      },
      [168594] = {
          true,
          false,
          "fuchsia",
      },
      [111068] = {
          false,
          false,
          "mediumpurple",
      },
      [115418] = {
          false,
          false,
          "deepskyblue",
      },
      [139425] = {
          false,
          false,
          "honeydew",
      },
      [196116] = {
          false,
          false,
          "lime",
      },
      [207199] = {
          true,
          false,
          "fuchsia",
      },
      [213885] = {
          true,
          false,
          "fuchsia",
      },
      [223423] = {
          true,
          false,
          "aqua",
      },
      [118489] = {
          false,
          false,
          "fuchsia",
      },
      [213343] = {
          true,
          false,
          "aqua",
      },
      [98275] = {
          true,
          false,
          "aqua",
      },
      [200836] = {
          false,
          false,
          "deepskyblue",
      },
      [221760] = {
          true,
          false,
          "fuchsia",
      },
      [216338] = {
          true,
          false,
          "aqua",
      },
      [99358] = {
          false,
          false,
          "magenta",
      },
      [206697] = {
          true,
          false,
          "fuchsia",
      },
      [115419] = {
          false,
          false,
          "mediumslateblue",
      },
      [177808] = {
          false,
          false,
          "mediumpurple",
      },
      [129552] = {
          false,
          false,
          "WARRIOR",
      },
      [204931] = {
          false,
          false,
          "mediumslateblue",
      },
      [207186] = {
          true,
          false,
          "aqua",
      },
      [96512] = {
          false,
          false,
          "mediumslateblue",
      },
      [220141] = {
          true,
          false,
          "fuchsia",
      },
      [212412] = {
          true,
          false,
          "fuchsia",
      },
      [207940] = {
          true,
          false,
          "fuchsia",
      },
      [210812] = {
          true,
          false,
          "fuchsia",
      },
      [127879] = {
          false,
          false,
          "WARRIOR",
      },
      [122968] = {
          false,
          false,
          "mediumpurple",
      },
      [210108] = {
          true,
          false,
          "fuchsia",
      },
      [164557] = {
          false,
          false,
          "deepskyblue",
      },
      [80808] = {
          false,
          false,
          "deepskyblue",
      },
      [216364] = {
          true,
          false,
          "fuchsia",
      },
      [224219] = {
          true,
          false,
          "fuchsia",
      },
      [220003] = {
          true,
          false,
          "aqua",
      },
      [210818] = {
          true,
          false,
          "fuchsia",
      },
      [186246] = {
          true,
          false,
          "fuchsia",
      },
      [154014] = {
          false,
          false,
          "deepskyblue",
      },
      [165111] = {
          true,
          false,
          "fuchsia",
      },
      [221979] = {
          true,
          false,
          "fuchsia",
      },
      [224271] = {
          true,
          false,
          "fuchsia",
      },
      [118491] = {
          false,
          false,
          "deepskyblue",
      },
      [165529] = {
          true,
          false,
          "magenta",
      },
      [188302] = {
          false,
          false,
          "yellow",
      },
      [200840] = {
          false,
          false,
          "deepskyblue",
      },
      [214350] = {
          true,
          false,
          "fuchsia",
      },
      [129366] = {
          false,
          false,
          "goldenrod",
      },
      [220195] = {
          true,
          false,
          "fuchsia",
      },
      [207198] = {
          true,
          false,
          "fuchsia",
      },
      [206214] = {
          false,
          false,
          "mediumpurple",
      },
      [218324] = {
          true,
          false,
          "aqua",
      },
      [213217] = {
          true,
          false,
          "fuchsia",
      },
      [101476] = {
          false,
          false,
          "magenta",
      },
      [219984] = {
          true,
          false,
          "fuchsia",
      },
      [213338] = {
          true,
          false,
          "fuchsia",
      },
      [144293] = {
          false,
          false,
          "mediumslateblue",
      },
      [228539] = {
          true,
          false,
          "fuchsia",
      },
      [209333] = {
          false,
          false,
          "mediumslateblue",
      },
      [114526] = {
          false,
          false,
          "aqua",
      },
      [213892] = {
          true,
          false,
          "fuchsia",
      },
      [122970] = {
          false,
          false,
          "lime",
      },
      [166299] = {
          true,
          false,
          "fuchsia",
      },
      [129367] = {
          true,
          false,
          "fuchsia",
      },
      [144294] = {
          false,
          false,
          "aqua",
      },
      [190407] = {
          true,
          false,
          "fuchsia",
      },
      [206068] = {
          false,
          false,
          "deepskyblue",
      },
      [212403] = {
          true,
          false,
          "fuchsia",
      },
      [192786] = {
          false,
          false,
          "lime",
      },
      [98813] = {
          true,
          false,
          "fuchsia",
      },
      [180431] = {
          false,
          false,
          "aqua",
      },
      [144295] = {
          false,
          false,
          "aqua",
      },
      [213893] = {
          true,
          false,
          "fuchsia",
      },
      [134629] = {
          false,
          false,
          "navajowhite",
      },
      [75506] = {
          false,
          false,
          "deepskyblue",
      },
      [221102] = {
          true,
          false,
          "fuchsia",
      },
      [123227] = {
          true,
          false,
          "palegreen",
      },
      [122971] = {
          true,
          false,
          "fuchsia",
      },
      [166301] = {
          false,
          false,
          "fuchsia",
      },
      [164510] = {
          false,
          false,
          "deepskyblue",
      },
      [144296] = {
          false,
          false,
          "mediumpurple",
      },
      [195842] = {
          true,
          false,
          "fuchsia",
      },
      [135474] = {
          true,
          false,
          "fuchsia",
      },
      [177816] = {
          false,
          false,
          "deepskyblue",
      },
      [213937] = {
          true,
          false,
          "aqua",
      },
      [134139] = {
          false,
          false,
          "gold",
      },
      [154020] = {
          false,
          false,
          "deepskyblue",
      },
      [192955] = {
          false,
          false,
          "fuchsia",
      },
      [224962] = {
          true,
          false,
          "fuchsia",
      },
      [206070] = {
          false,
          false,
          "mediumslateblue",
      },
      [189472] = {
          false,
          false,
          "deepskyblue",
      },
      [177817] = {
          false,
          false,
          "aqua",
      },
      [98280] = {
          true,
          false,
          "fuchsia",
      },
      [122972] = {
          true,
          false,
          "fuchsia",
      },
      [41096] = {
          true,
          false,
          "fuchsia",
      },
      [129369] = {
          false,
          false,
          "lightsalmon",
      },
      [98792] = {
          true,
          false,
          "aqua",
      },
      [80935] = {
          false,
          false,
          "magenta",
      },
      [185534] = {
          false,
          false,
          "lime",
      },
      [59555] = {
          true,
          false,
          "fuchsia",
      },
      [169875] = {
          true,
          false,
          "magenta",
      },
      [165872] = {
          false,
          false,
          "deepskyblue",
      },
      [194745] = {
          false,
          false,
          "fuchsia",
      },
      [139949] = {
          false,
          false,
          "honeydew",
      },
      [45926] = {
          false,
          false,
          "WARRIOR",
      },
      [101991] = {
          true,
          false,
          "fuchsia",
      },
      [162317] = {
          false,
          false,
          "deepskyblue",
      },
      [179733] = {
          false,
          false,
          "orangered",
      },
      [203799] = {
          false,
          false,
          "deepskyblue",
      },
      [122973] = {
          true,
          false,
          "fuchsia",
      },
      [196117] = {
          false,
          false,
          "mediumpurple",
      },
      [129370] = {
          true,
          false,
          "fuchsia",
      },
      [97068] = {
          false,
          false,
          "WARRIOR",
      },
      [187192] = {
          false,
          false,
          "mediumpurple",
      },
      [175517] = {
          false,
          false,
          "blue",
      },
      [196712] = {
          false,
          false,
          "fuchsia",
      },
      [206065] = {
          true,
          false,
          "fuchsia",
      },
      [198326] = {
          false,
          false,
          "mediumpurple",
      },
      [126848] = {
          false,
          false,
          "deepskyblue",
      },
      [165762] = {
          false,
          false,
          "deepskyblue",
      },
      [138281] = {
          true,
          false,
          "aqua",
      },
      [81522] = {
          false,
          false,
          "mediumpurple",
      },
      [131824] = {
          false,
          false,
          "mediumslateblue",
      },
      [104295] = {
          true,
          false,
          "fuchsia",
      },
      [190359] = {
          false,
          false,
          "WARRIOR",
      },
      [98538] = {
          false,
          false,
          "cyan",
      },
      [211341] = {
          true,
          false,
          "fuchsia",
      },
      [187033] = {
          true,
          false,
          "aqua",
      },
      [216342] = {
          true,
          false,
          "fuchsia",
      },
      [167876] = {
          true,
          false,
          "magenta",
      },
      [132532] = {
          false,
          false,
          "palegreen",
      },
      [83025] = {
          false,
          false,
          "mediumslateblue",
      },
      [130011] = {
          true,
          false,
          "aqua",
      },
      [189555] = {
          false,
          false,
          "blue",
      },
      [113398] = {
          false,
          false,
          "mediumslateblue",
      },
      [97720] = {
          false,
          false,
          "magenta",
      },
      [170690] = {
          true,
          false,
          "magenta",
      },
      [212673] = {
          true,
          false,
          "aqua",
      },
      [76518] = {
          false,
          false,
          "fuchsia",
      },
      [173729] = {
          false,
          false,
          "mediumslateblue",
      },
      [183033] = {
          false,
          false,
          "magenta",
      },
      [211087] = {
          true,
          false,
          "fuchsia",
      },
      [91006] = {
          true,
          false,
          "fuchsia",
      },
      [190348] = {
          true,
          false,
          "fuchsia",
      },
      [189338] = {
          false,
          false,
          "magenta",
      },
      [164804] = {
          true,
          false,
          "aqua",
      },
      [193944] = {
          true,
          false,
          "fuchsia",
      },
      [213932] = {
          true,
          false,
          "fuchsia",
      },
      [190362] = {
          true,
          false,
          "fuchsia",
      },
      [114783] = {
          false,
          false,
          "deepskyblue",
      },
      [168357] = {
          true,
          false,
          "fuchsia",
      },
      [105704] = {
          true,
          false,
          "fuchsia",
      },
      [99359] = {
          false,
          false,
          "cyan",
      },
      [163620] = {
          false,
          false,
          "deepskyblue",
      },
      [77700] = {
          false,
          false,
          "aqua",
      },
      [195878] = {
          true,
          false,
          "fuchsia",
      },
      [169893] = {
          true,
          false,
          "magenta",
      },
      [185529] = {
          true,
          false,
          "fuchsia",
      },
      [144298] = {
          false,
          false,
          "mediumslateblue",
      },
      [155812] = {
          false,
          false,
          "blue",
      },
      [189340] = {
          true,
          false,
          "aqua",
      },
      [76407] = {
          false,
          false,
          "mediumslateblue",
      },
      [152009] = {
          false,
          false,
          "deepskyblue",
      },
      [184107] = {
          false,
          false,
          "WARRIOR",
      },
      [186658] = {
          true,
          false,
          "fuchsia",
      },
      [115395] = {
          false,
          false,
          "mediumpurple",
      },
      [45704] = {
          false,
          false,
          "magenta",
      },
      [186226] = {
          true,
          false,
          "fuchsia",
      },
      [214117] = {
          false,
          false,
          "orangered",
      },
      [212793] = {
          true,
          false,
          "fuchsia",
      },
      [130909] = {
          true,
          false,
          "aqua",
      },
      [214673] = {
          true,
          false,
          "fuchsia",
      },
      [100526] = {
          false,
          false,
          "WARRIOR",
      },
      [166396] = {
          false,
          false,
          "aqua",
      },
      [164266] = {
          false,
          false,
          "deepskyblue",
      },
      [129374] = {
          true,
          false,
          "aqua",
      },
      [133436] = {
          false,
          false,
          "gold",
      },
      [129758] = {
          false,
          false,
          "fuchsia",
      },
      [206230] = {
          false,
          false,
          "fuchsia",
      },
      [220815] = {
          true,
          false,
          "fuchsia",
      },
      [155221] = {
          false,
          false,
          "deepskyblue",
      },
      [126918] = {
          false,
          false,
          "lime",
      },
      [47238] = {
          true,
          false,
          "fuchsia",
      },
      [201792] = {
          false,
          false,
          "mediumpurple",
      },
      [127315] = {
          false,
          false,
          "magenta",
      },
      [187552] = {
          false,
          false,
          "deepskyblue",
      },
      [97197] = {
          true,
          false,
          "fuchsia",
      },
      [115642] = {
          false,
          false,
          "blue",
      },
      [208698] = {
          true,
          false,
          "fuchsia",
      },
      [114790] = {
          false,
          false,
          "mediumslateblue",
      },
      [98542] = {
          false,
          false,
          "mediumslateblue",
      },
      [95834] = {
          true,
          false,
          "fuchsia",
      },
      [150146] = {
          false,
          false,
          "aqua",
      },
      [134331] = {
          false,
          false,
          "gold",
      },
      [122969] = {
          true,
          false,
          "fuchsia",
      },
      [205265] = {
          false,
          false,
          "WARRIOR",
      },
      [190368] = {
          true,
          false,
          "fuchsia",
      },
      [65362] = {
          false,
          false,
          "WARRIOR",
      },
      [176551] = {
          false,
          false,
          "deepskyblue",
      },
      [102253] = {
          false,
          false,
          "deepskyblue",
      },
      [165805] = {
          false,
          false,
          "mediumpurple",
      },
      [114544] = {
          false,
          false,
          "deepskyblue",
      },
      [214421] = {
          true,
          false,
          "fuchsia",
      },
      [104300] = {
          true,
          false,
          "fuchsia",
      },
      [151476] = {
          false,
          false,
          "mediumpurple",
      },
      [82039] = {
          false,
          false,
          "magenta",
      },
      [201788] = {
          false,
          false,
          "fuchsia",
      },
      [199325] = {
          false,
          false,
          "deepskyblue",
      },
      [191739] = {
          true,
          false,
          "aqua",
      },
      [185508] = {
          false,
          false,
          "lime",
      },
      [188067] = {
          true,
          false,
          "fuchsia",
      },
      [163503] = {
          true,
          false,
          "fuchsia",
      },
      [190370] = {
          false,
          false,
          "mediumslateblue",
      },
      [168109] = {
          false,
          false,
          "deepskyblue",
      },
      [163862] = {
          false,
          false,
          "deepskyblue",
      },
      [130400] = {
          false,
          false,
          "mediumslateblue",
      },
      [205723] = {
          false,
          false,
          "deepskyblue",
      },
      [98810] = {
          false,
          false,
          "WARRIOR",
      },
      [198047] = {
          true,
          false,
          "fuchsia",
      },
      [183424] = {
          false,
          false,
          "aqua",
      },
      [190371] = {
          false,
          false,
          "WARRIOR",
      },
      [75899] = {
          false,
          false,
          "fuchsia",
      },
      [205212] = {
          false,
          false,
          "deepskyblue",
      },
      [84990] = {
          true,
          false,
          "fuchsia",
      },
      [186229] = {
          true,
          false,
          "aqua",
      },
      [165410] = {
          false,
          false,
          "mediumpurple",
      },
      [130012] = {
          false,
          false,
          "PALADIN",
      },
      [187315] = {
          false,
          false,
          "WARRIOR",
      },
      [92538] = {
          false,
          false,
          "lime",
      },
      [166275] = {
          true,
          false,
          "fuchsia",
      },
      [177787] = {
          false,
          false,
          "aqua",
      },
      [213913] = {
          true,
          false,
          "fuchsia",
      },
      [203678] = {
          false,
          false,
          "mediumslateblue",
      },
      [150712] = {
          false,
          false,
          "aqua",
      },
      [84554] = {
          false,
          false,
          "fuchsia",
      },
      [194467] = {
          false,
          false,
          "blue",
      },
      [190373] = {
          true,
          false,
          "fuchsia",
      },
      [155830] = {
          false,
          false,
          "deepskyblue",
      },
      [168318] = {
          true,
          false,
          "fuchsia",
      },
      [81407] = {
          false,
          false,
          "deepskyblue",
      },
      [133836] = {
          true,
          false,
          "fuchsia",
      },
      [105715] = {
          true,
          false,
          "fuchsia",
      },
      [175992] = {
          false,
          false,
          "fuchsia",
      },
      [90997] = {
          true,
          false,
          "aqua",
      },
      [208438] = {
          true,
          false,
          "aqua",
      },
      [155831] = {
          false,
          false,
          "fuchsia",
      },
      [91002] = {
          false,
          false,
          "fuchsia",
      },
      [171184] = {
          false,
          false,
          "mediumpurple",
      },
      [205727] = {
          true,
          false,
          "fuchsia",
      },
      [134338] = {
          false,
          false,
          "navajowhite",
      },
      [81603] = {
          false,
          false,
          "mediumslateblue",
      },
      [169905] = {
          false,
          false,
          "deepskyblue",
      },
      [194469] = {
          false,
          false,
          "blue",
      },
      [115640] = {
          false,
          false,
          "fuchsia",
      },
      [192934] = {
          false,
          false,
          "mediumslateblue",
      },
      [165556] = {
          false,
          false,
          "fuchsia",
      },
      [168882] = {
          false,
          false,
          "fuchsia",
      },
      [198308] = {
          false,
          false,
          "mediumpurple",
      },
      [82682] = {
          false,
          false,
          "mediumslateblue",
      },
      [90998] = {
          true,
          false,
          "fuchsia",
      },
      [207438] = {
          false,
          false,
          "mediumpurple",
      },
      [190345] = {
          true,
          false,
          "fuchsia",
      },
      [165222] = {
          true,
          false,
          "fuchsia",
      },
      [168627] = {
          true,
          false,
          "fuchsia",
      },
      [115020] = {
          false,
          false,
          "mediumslateblue",
      },
      [83578] = {
          false,
          false,
          "mediumslateblue",
      },
      [162103] = {
          false,
          false,
          "deepskyblue",
      },
      [184023] = {
          true,
          false,
          "fuchsia",
      },
      [190377] = {
          true,
          false,
          "fuchsia",
      },
      [192680] = {
          false,
          false,
          "mediumpurple",
      },
      [84400] = {
          false,
          false,
          "fuchsia",
      },
      [122967] = {
          false,
          false,
          "mediumslateblue",
      },
      [104278] = {
          true,
          false,
          "fuchsia",
      },
      [81236] = {
          false,
          false,
          "aqua",
      },
      [104270] = {
          true,
          false,
          "fuchsia",
      },
      [196263] = {
          false,
          false,
          "aqua",
      },
      [186284] = {
          false,
          false,
          "WARRIOR",
      },
      [135365] = {
          true,
          false,
          "fuchsia",
      },
      [131527] = {
          false,
          false,
          "mediumslateblue",
      },
      [130404] = {
          false,
          false,
          "cyan",
      },
      [162744] = {
          false,
          false,
          "deepskyblue",
      },
      [102095] = {
          false,
          false,
          "lime",
      },
      [40586] = {
          false,
          false,
          "mediumslateblue",
      },
      [198311] = {
          false,
          false,
          "mediumpurple",
      },
      [114796] = {
          false,
          false,
          "blue",
      },
      [122984] = {
          false,
          false,
          "mediumslateblue",
      },
      [171799] = {
          true,
          false,
          "fuchsia",
      },
      [189471] = {
          false,
          false,
          "WARRIOR",
      },
      [168886] = {
          true,
          false,
          "fuchsia",
      },
      [91000] = {
          true,
          false,
          "aqua",
      },
      [134599] = {
          false,
          false,
          "gold",
      },
      [167607] = {
          false,
          false,
          "deepskyblue",
      },
      [155824] = {
          false,
          false,
          "blue",
      },
      [165483] = {
          false,
          false,
          "fuchsia",
      },
      [130661] = {
          false,
          false,
          "lightgreen",
      },
      [192464] = {
          false,
          false,
          "fuchsia",
      },
      [172981] = {
          false,
          false,
          "deepskyblue",
      },
      [187566] = {
          false,
          false,
          "mediumslateblue",
      },
      [134600] = {
          false,
          false,
          "peru",
      },
      [214209] = {
          true,
          false,
          "fuchsia",
      },
      [190381] = {
          true,
          false,
          "fuchsia",
      },
      [180473] = {
          false,
          false,
          "blue",
      },
      [193352] = {
          false,
          false,
          "peachpuff",
      },
      [174773] = {
          false,
          false,
          "magenta",
      },
      [40825] = {
          false,
          false,
          "mediumslateblue",
      },
      [190174] = {
          false,
          false,
          "fuchsia",
      },
      [183707] = {
          false,
          false,
          "deepskyblue",
      },
      [91001] = {
          true,
          false,
          "aqua",
      },
      [154744] = {
          false,
          false,
          "mediumslateblue",
      },
      [164707] = {
          false,
          false,
          "mediumpurple",
      },
      [176565] = {
          false,
          false,
          "aqua",
      },
      [104273] = {
          false,
          false,
          "deepskyblue",
      },
      [194895] = {
          true,
          false,
          "fuchsia",
      },
      [76104] = {
          true,
          false,
          "fuchsia",
      },
      [126969] = {
          false,
          false,
          "magenta",
      },
      [114542] = {
          false,
          false,
          "mediumslateblue",
      },
      [104275] = {
          false,
          false,
          "mediumslateblue",
      },
      [128969] = {
          true,
          false,
          "fuchsia",
      },
      [134284] = {
          true,
          false,
          "fuchsia",
      },
      [133835] = {
          true,
          false,
          "fuchsia",
      },
      [199595] = {
          false,
          false,
          "magenta",
      },
      [186644] = {
          false,
          false,
          "mediumslateblue",
      },
      [212389] = {
          true,
          false,
          "fuchsia",
      },
      [190128] = {
          false,
          false,
          "darksalmon",
      },
      [84989] = {
          true,
          false,
          "fuchsia",
      },
      [197535] = {
          true,
          false,
          "fuchsia",
      },
      [194990] = {
          false,
          false,
          "aqua",
      },
      [144071] = {
          true,
          false,
          "fuchsia",
      },
      [136139] = {
          false,
          false,
          "peru",
      },
      [77483] = {
          false,
          false,
          "deepskyblue",
      },
      [165137] = {
          false,
          false,
          "deepskyblue",
      },
      [167612] = {
          false,
          false,
          "aqua",
      },
      [114624] = {
          false,
          false,
          "aqua",
      },
      [208521] = {
          false,
          false,
          "deepskyblue",
      },
      [132491] = {
          false,
          false,
          "palegreen",
      },
      [166589] = {
          false,
          false,
          "deepskyblue",
      },
      [138187] = {
          true,
          false,
          "fuchsia",
      },
      [165946] = {
          false,
          false,
          "deepskyblue",
      },
      [150292] = {
          false,
          false,
          "mediumslateblue",
      },
      [133007] = {
          true,
          false,
          "aqua",
      },
      [157634] = {
          false,
          false,
          "blue",
      },
      [114792] = {
          false,
          false,
          "aqua",
      },
      [184911] = {
          false,
          false,
          "darksalmon",
      },
      [206140] = {
          true,
          false,
          "fuchsia",
      },
      [193457] = {
          true,
          false,
          "aqua",
      },
      [115486] = {
          false,
          false,
          "mediumslateblue",
      },
      [212681] = {
          false,
          false,
          "deepskyblue",
      },
      [163520] = {
          false,
          false,
          "deepskyblue",
      },
      [208367] = {
          false,
          false,
          "deepskyblue",
      },
      [173190] = {
          false,
          false,
          "deepskyblue",
      },
      [208193] = {
          true,
          false,
          "fuchsia",
      },
      [183495] = {
          false,
          false,
          "mediumpurple",
      },
      [86526] = {
          false,
          false,
          "deepskyblue",
      },
      [166302] = {
          true,
          false,
          "fuchsia",
      },
      [199748] = {
          true,
          false,
          "fuchsia",
      },
      [99192] = {
          false,
          false,
          "mediumslateblue",
      },
      [165824] = {
          true,
          false,
          "fuchsia",
      },
      [77803] = {
          false,
          false,
          "deepskyblue",
      },
      [114319] = {
          false,
          false,
          "deepskyblue",
      },
      [139422] = {
          false,
          false,
          "gold",
      },
      [127106] = {
          false,
          false,
          "WARRIOR",
      },
      [179386] = {
          false,
          false,
          "deepskyblue",
      },
      [204206] = {
          true,
          false,
          "fuchsia",
      },
      [75652] = {
          false,
          false,
          "mediumslateblue",
      },
      [114266] = {
          false,
          false,
          "deepskyblue",
      },
      [126919] = {
          true,
          false,
          "fuchsia",
      },
      [168384] = {
          false,
          false,
          "blue",
      },
      [98681] = {
          false,
          false,
          "blue",
      },
      [184140] = {
          false,
          false,
          "fuchsia",
      },
      [185528] = {
          true,
          false,
          "fuchsia",
      },
      [189878] = {
          false,
          false,
          "magenta",
      },
      [105705] = {
          false,
          false,
          "WARRIOR",
      },
      [98406] = {
          false,
          false,
          "cyan",
      },
      [164506] = {
          false,
          false,
          "mediumslateblue",
      },
      [176573] = {
          false,
          false,
          "fuchsia",
      },
      [156226] = {
          false,
          false,
          "deepskyblue",
      },
      [151325] = {
          false,
          false,
          "fuchsia",
      },
      [179388] = {
          false,
          false,
          "aqua",
      },
      [175550] = {
          false,
          false,
          "fuchsia",
      },
      [163524] = {
          false,
          false,
          "mediumslateblue",
      },
      [188252] = {
          false,
          false,
          "mediumslateblue",
      },
      [199220] = {
          false,
          false,
          "white",
      },
      [96574] = {
          false,
          false,
          "mediumslateblue",
      },
      [82590] = {
          false,
          false,
          "magenta",
      },
      [193462] = {
          true,
          false,
          "fuchsia",
      },
      [125977] = {
          false,
          false,
          "magenta",
      },
      [83392] = {
          false,
          false,
          "mediumslateblue",
      },
      [132820] = {
          false,
          false,
          "WARRIOR",
      },
      [168418] = {
          true,
          false,
          "fuchsia",
      },
      [167998] = {
          false,
          false,
          "deepskyblue",
      },
      [176575] = {
          false,
          false,
          "deepskyblue",
      },
      [81283] = {
          false,
          false,
          "aqua",
      },
      [195119] = {
          false,
          false,
          "magenta",
      },
      [98366] = {
          false,
          false,
          "lime",
      },
      [101438] = {
          false,
          false,
          "aqua",
      },
      [169421] = {
          false,
          false,
          "gold",
      },
      [194487] = {
          false,
          false,
          "cyan",
      },
      [114803] = {
          false,
          false,
          "deepskyblue",
      },
      [135241] = {
          true,
          false,
          "fuchsia",
      },
      [75713] = {
          true,
          false,
          "fuchsia",
      },
      [213934] = {
          true,
          false,
          "aqua",
      },
      [173016] = {
          true,
          false,
          "fuchsia",
      },
      [200131] = {
          false,
          false,
          "mediumslateblue",
      },
      [153292] = {
          false,
          false,
          "khaki",
      },
      [169924] = {
          false,
          false,
          "mediumpurple",
      },
      [197671] = {
          false,
          false,
          "mediumslateblue",
      },
      [189227] = {
          false,
          false,
          "lime",
      },
      [131009] = {
          false,
          false,
          "fuchsia",
      },
      [97788] = {
          false,
          false,
          "WARRIOR",
      },
      [184303] = {
          false,
          false,
          "lime",
      },
      [134418] = {
          false,
          false,
          "deepskyblue",
      },
      [104274] = {
          false,
          false,
          "aqua",
      },
      [195851] = {
          false,
          false,
          "lime",
      },
      [114804] = {
          false,
          false,
          "aqua",
      },
      [194816] = {
          false,
          false,
          "deepskyblue",
      },
      [164552] = {
          true,
          false,
          "fuchsia",
      },
      [129517] = {
          false,
          false,
          "fuchsia",
      },
      [167111] = {
          true,
          false,
          "fuchsia",
      },
      [59598] = {
          false,
          false,
          "dimgray",
      },
      [91008] = {
          false,
          false,
          "deepskyblue",
      },
      [99360] = {
          false,
          false,
          "blue",
      },
      [194317] = {
          true,
          false,
          "fuchsia",
      },
      [131545] = {
          true,
          false,
          "fuchsia",
      },
      [191164] = {
          true,
          false,
          "fuchsia",
      },
      [207796] = {
          false,
          false,
          "orangered",
      },
      [169159] = {
          false,
          false,
          "gold",
      },
      [129699] = {
          false,
          false,
          "magenta",
      },
      [167963] = {
          true,
          false,
          "fuchsia",
      },
      [169927] = {
          false,
          false,
          "mediumslateblue",
      },
      [83761] = {
          false,
          false,
          "mediumslateblue",
      },
      [133593] = {
          false,
          false,
          "honeydew",
      },
      [206064] = {
          true,
          false,
          "fuchsia",
      },
      [162763] = {
          false,
          false,
          "mediumslateblue",
      },
      [167113] = {
          false,
          false,
          "blue",
      },
      [189886] = {
          false,
          false,
          "gold",
      },
      [154758] = {
          false,
          false,
          "mediumslateblue",
      },
      [184020] = {
          false,
          false,
          "WARRIOR",
      },
      [131817] = {
          true,
          false,
          "aqua",
      },
      [168393] = {
          false,
          false,
          "deepskyblue",
      },
      [200137] = {
          true,
          false,
          "fuchsia",
      },
      [162049] = {
          false,
          false,
          "mediumslateblue",
      },
      [185537] = {
          false,
          false,
          "blue",
      },
      [135167] = {
          false,
          false,
          "peru",
      },
      [133870] = {
          true,
          false,
          "fuchsia",
      },
      [130436] = {
          false,
          false,
          "aqua",
      },
      [150295] = {
          false,
          false,
          "mediumslateblue",
      },
      [84767] = {
          false,
          false,
          "WARRIOR",
      },
      [174802] = {
          true,
          false,
          "fuchsia",
      },
      [167956] = {
          true,
          false,
          "fuchsia",
      },
      [204536] = {
          false,
          false,
          "blue",
      },
      [81297] = {
          false,
          false,
          "deepskyblue",
      },
      [45572] = {
          false,
          false,
          "fuchsia",
      },
      [45922] = {
          true,
          false,
          "fuchsia",
      },
      [164562] = {
          false,
          false,
          "deepskyblue",
      },
      [178630] = {
          false,
          false,
          "deepskyblue",
      },
      [133852] = {
          false,
          false,
          "blue",
      },
      [224732] = {
          true,
          false,
          "fuchsia",
      },
      [134364] = {
          false,
          false,
          "honeydew",
      },
      [155090] = {
          false,
          false,
          "deepskyblue",
      },
      [83846] = {
          false,
          false,
          "mediumslateblue",
      },
      [190401] = {
          true,
          false,
          "aqua",
      },
      [196798] = {
          true,
          false,
          "fuchsia",
      },
      [168396] = {
          false,
          false,
          "deepskyblue",
      },
      [96640] = {
          false,
          false,
          "lime",
      },
      [213942] = {
          true,
          false,
          "fuchsia",
      },
      [168156] = {
          false,
          false,
          "fuchsia",
      },
      [180432] = {
          false,
          false,
          "blue",
      },
      [134137] = {
          false,
          false,
          "deepskyblue",
      },
      [131812] = {
          true,
          false,
          "fuchsia",
      },
      [168443] = {
          true,
          false,
          "fuchsia",
      },
      [170480] = {
          false,
          false,
          "mediumpurple",
      },
      [138465] = {
          true,
          false,
          "aqua",
      },
      [134158] = {
          false,
          false,
          "navajowhite",
      },
  },
  ["aura_show_magic"] = true,
  ["extra_icon_show_enrage_border"] = {
      0.61568629741669,
      0.18823531270027,
      0.21176472306252,
  },
  ["cast_statusbar_spark_half"] = true,
  ["plater_resources_show"] = false,
  ["hook_data"] = {
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Updated"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        --check if the npcID of this unit is in the npc list \n        if (envTable.ListOfNpcs [npcID]) then\n            Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [npcID])\n            \n        else\n            --check if the name of ths unit is in the list\n            local unitName = UnitName (unitId .. \"target\")\n            if (envTable.ListOfNpcs [unitName]) then\n                Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])\n                \n            else\n                --check if the name of the unit in lower case is in the npc list\n                unitName = string.lower (unitName)\n                if (envTable.ListOfNpcs [unitName]) then\n                    Plater.SetNameplateColor (unitFrame, envTable.ListOfNpcs [unitName])                \n                    \n                end\n            end\n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.ListOfNpcs = {\n        [61146] = \"mediumseagreen\", --monk statue npcID\n        [103822] = \"mediumseagreen\", --druid treant npcID        \n        [61056] = \"mediumseagreen\", --shaman earth ele npcID\n        [95072] = \"mediumseagreen\", --shaman earth ele npcID    \n    }\n    \n    \n    \nend\n\n\n\n\n",
          },
          ["Time"] = 1722357642,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
                  ["Enabled"] = true,
                  ["party"] = true,
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
                  ["Enabled"] = true,
                  ["TANK"] = true,
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 299,
          ["semver"] = "",
          ["Author"] = "Kastfall-Azralon",
          ["Desc"] = "",
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Attacking Specific Unit",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Initialization"] =
              "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Burning Wound\"] = 50,\n        [\"Rend\"] = 50,\n        [\"Colossus Smash\"] = 50,\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 40,\n        [\"Devouring Plague\"] = 30,\n        [\"Agony\"] = 50,\n        [\"Corruption\"] = 40,\n        [\"Unstable Affliction\"] = 30,\n        [\"Siphon Life\"] = 20,\n        [\"Shadow Embrace\"] = 10,\n        [\"Moonfire\"] = 40,\n        [\"Sunfire\"] = 50,\n        [\"Stellar Flare\"] = 30\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          },
          ["Time"] = 1703514904,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 388,
          ["semver"] = "",
          ["Author"] = "Ditador-Azralon",
          ["Desc"] = "",
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "Initialization",
          ["Name"] = "Aura Reorder",
      },
      {
          ["OptionsValues"] = {
              ["Descanchor"] = 4,
              ["BSborderth"] = 1,
              ["BStimer_size"] = 10,
              ["Descyoff"] = -1,
              ["BSdesc_size"] = 8,
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Created"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.ExtraIconFrame:SetOption (\"text_size\", modTable.config.BStimer_size)\n    unitFrame.ExtraIconFrame:SetOption (\"text_color\", modTable.config.BStimer_color)\n    unitFrame.ExtraIconFrame:SetOption (\"desc_text_size\", modTable.config.BSdesc_size)\n    unitFrame.ExtraIconFrame:SetOption (\"stack_text_size\", modTable.config.BSstack_size)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
              ["Nameplate Updated"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier ()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier = function()\n        \n        if modTable.config.BShidefriendl and unitFrame.actorType == \"friendlyplayer\" then\n            unitFrame.ExtraIconFrame:Hide()\n        end      \n        \n        for index, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if (auraIcon:IsShown()) then\n                \n                local profile = Plater.db.profile\n                local Anchor = {\n                    side = modTable.config.Descanchor, \n                    x = modTable.config.Descxoff, \n                    y = modTable.config.Descyoff,\n                }              \n                local size = modTable.config.BSborderth\n                \n                if (not auraIcon.PixelPerfectBorder) then\n                    auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n                end\n                \n                local r, g, b = auraIcon:GetBackdropBorderColor()\n                auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n                auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n                auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n                auraIcon.PixelPerfectBorder:UpdateSizes()\n                \n                auraIcon.Texture:SetSize(profile.extra_icon_width - size/2, profile.extra_icon_height - size/2)\n                auraIcon.Texture:ClearAllPoints()\n                auraIcon.Texture:SetAllPoints()\n                auraIcon.Border:Hide() \n                \n                Plater.SetFontOutlineAndShadow (auraIcon.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n                \n                Plater.SetAnchor (auraIcon.Desc, Anchor)\n                auraIcon.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n                auraIcon.Cooldown:SetDrawSwipe (true) \n                if modTable.config.BScdreverse then\n                    auraIcon.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n                end\n                \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          },
          ["Time"] = 1703515022,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 462,
          ["semver"] = "",
          ["Author"] = "Driani-Antonidas",
          ["Desc"] = "",
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
              {
                  ["Type"] = 5,
                  ["Key"] = "",
                  ["Value"] = "Basic Options",
                  ["Name"] = "Basic Options",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "BShidefriendly",
                  ["Value"] = true,
                  ["Name"] = "Hide Buff Special at Friendly UnitFrame",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Hide Buff Special at Friendly UnitFrame",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "BScdreverse",
                  ["Value"] = true,
                  ["Name"] = "Swipe Closure Inverted",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "If enabled, swipe closure inverted",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set Buff Special border thickness",
                  ["Min"] = 0,
                  ["Key"] = "BSborderth",
                  ["Value"] = 2,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Border Thickness",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "",
                  ["Value"] = 0,
                  ["Name"] = "Blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "",
                  ["Value"] = "Buff Special Text Options",
                  ["Name"] = "Buff Special Text Options",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set timer text size",
                  ["Min"] = 1,
                  ["Key"] = "BStimer_size",
                  ["Value"] = 14,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Timer Text Size",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "BStimer_color",
                  ["Value"] = {
                      1,
                      1,
                      0,
                      1,
                  },
                  ["Name"] = "Timer Text Color",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Set timer text color",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set stack text size",
                  ["Min"] = 1,
                  ["Key"] = "BSstack_size",
                  ["Value"] = 10,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Stack Text Size",
              },
              {
                  ["Type"] = 6,
                  ["Key"] = "",
                  ["Value"] = 0,
                  ["Name"] = "Blank",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 5,
                  ["Key"] = "",
                  ["Value"] = "Buff Special Player Name Options",
                  ["Name"] = "Buff Special Player Name Options",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set player name text size",
                  ["Min"] = 1,
                  ["Key"] = "BSdesc_size",
                  ["Value"] = 10,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Player Name Text Size",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 8,
                  ["Desc"] =
                  "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)",
                  ["Min"] = 1,
                  ["Key"] = "Descanchor",
                  ["Value"] = 4,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Player Name Text Anchor",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set player name text y-offset",
                  ["Min"] = -100,
                  ["Key"] = "Descyoff",
                  ["Value"] = -2,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Player Name Text Y-offset",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 100,
                  ["Desc"] = "Set player name text x-offset",
                  ["Min"] = -100,
                  ["Key"] = "Descxoff",
                  ["Value"] = 0,
                  ["Fraction"] = false,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Player Name Text X-offset",
              },
          },
          ["LastHookEdited"] = "Nameplate Created",
          ["Name"] = "Buff Special",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Cast Update"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
              ["Destructor"] =
              "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
              ["Cast Start"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 0.6\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.CastBarBorder:SetIgnoreParentScale(false)\n        \n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
          },
          ["Time"] = 1703514714,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 174,
          ["semver"] = "",
          ["Author"] = "Izimode-Azralon",
          ["Desc"] = "",
          ["Prio"] = 99,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "Constructor",
          ["Name"] = "Cast Border",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Updated"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
          },
          ["Time"] = 1703521954,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 183,
          ["semver"] = "",
          ["Author"] = "????????-Illidan",
          ["Desc"] = "",
          ["Prio"] = 31,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Debuff Border",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["UID"] = "0x60f358aaaef576",
          ["Hooks"] = {
              ["Nameplate Updated"] =
              "function(self, unitId, unitFrame, envTable, modTable)\n    if Plater.NameplateHasAura(unitFrame, envTable.debuffID) then\n        Plater.SetNameplateColor(unitFrame, 'deeppink')\n    else\n        local npcId = unitFrame['namePlateNpcId']\n        local npcColor = envTable.dbColor[npcId]\n        if npcColor then\n            Plater.SetNameplateColor(unitFrame, npcColor)\n        else\n            Plater.RefreshNameplateColor(unitFrame)\n        end\n    end\nend",
              ["Constructor"] =
              "function(self, unitId, unitFrame, envTable, modTable)\n    local DF = _G ['DetailsFramework']\n    envTable.dbColor={}\n    for npcID, infoTable in pairs (Plater.db.profile.npc_colors) do\n        local enabled1 = infoTable[1] --this is the overall enabled\n        local enabled2 = infoTable[2] --if this is true, this color is only used for scripts\n        local colorID = infoTable[3] --the color\n        if (enabled1 and not enabled2) then\n            local r, g, b = DF:ParseColors (colorID)\n            envTable.dbColor[npcID] = {r, g, b, 1}\n        end\n    end\n    if Plater.PlayerClass == 'DEMONHUNTER' then\n        envTable.debuffID = 346278\n    elseif Plater.PlayerClass == 'ROGUE' then\n        envTable.debuffID = 324073\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          },
          ["Time"] = 1703521950,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
                  ["Enabled"] = true,
                  ["party"] = true,
                  ["scenario"] = true,
                  ["raid"] = true,
                  ["none"] = true,
              },
              ["class"] = {
                  ["Enabled"] = true,
                  ["ROGUE"] = true,
                  ["DEMONHUNTER"] = true,
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 243,
          ["semver"] = "",
          ["Author"] = "Avayde-Illidan",
          ["Desc"] = "",
          ["Prio"] = 30,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Name"] = "Debuff Color",
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Updated"] =
              "function (self, unitId, unitFrame, envTable)\n    if not envTable.units[select(6, strsplit(\"-\", UnitGUID(unitId)))] then\n        envTable.CheckAggro (unitFrame)\n    end\nend",
              ["Nameplate Added"] =
              "function (self, unitId, unitFrame, envTable)\n    if not envTable.units[select(6, strsplit(\"-\", UnitGUID(unitId)))] then\n        envTable.CheckAggro (unitFrame)\n    end\nend",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    envTable.units = {\n        [\"120651\"] = true, -- Explosives \n        [\"174773\"] = true, -- Spiteful\n        [\"169430\"] = true, -- Ur'zul DH Necrolord\n        [\"169428\"] = true, -- Wrathguard DH Necrolord\n        [\"169425\"] = true, -- Felhound DH Necrolord\n        [\"168932\"] = true, -- Doomguard DH Necrolord\n        [\"169429\"] = true, -- Shivarra DH Necrolord\n        [\"169426\"] = true, -- Infernal DH Necrolord\n        [\"169421\"] = true, -- Felguard DH Necrolord\n    }\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit is a player, ignore\n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.anothertank)\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          },
          ["Time"] = 1703390950,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 206,
          ["semver"] = "",
          ["Author"] = "Kastfall-Azralon",
          ["Desc"] =
          "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
          ["Prio"] = 1,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "Constructor",
          ["Name"] = "Force Threat Color",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Updated"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 2.9,\n    }\n    \nend\n\n\n",
          },
          ["Time"] = 1689714040,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "",
          ["Icon"] = 134400,
          ["Enabled"] = true,
          ["Revision"] = 78,
          ["semver"] = "",
          ["Author"] = "Ditador-Azralon",
          ["Desc"] = "",
          ["Prio"] = 51,
          ["version"] = -1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Timer Text Color",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Added"] =
              "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
              ["Destructor"] =
              "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder:Hide()\n    end\nend",
              ["Target Changed"] =
              "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable)\n    \n    --border options\n    local borderSize = 2\n    local borderColor = \"white\"\n    \n    if (not unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n    end\n    \n    function envTable.UpdateBorder (unitFrame)\n        if (UnitIsUnit (\"target\", unitFrame.unit)) then               \n            local r, g, b, a = DetailsFramework:ParseColors (borderColor)\n            unitFrame.healthBar.TargetBorder:SetVertexColor (r, g, b, a)\n            \n            unitFrame.healthBar.TargetBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.TargetBorder:UpdateSizes()            \n            \n            unitFrame.healthBar.TargetBorder:Show()\n        else\n            unitFrame.healthBar.TargetBorder:Hide()\n        end\n    end\nend",
          },
          ["Time"] = 1711197526,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "https://wago.io/targetborder/1",
          ["Icon"] = "Interface\\CHATFRAME\\UI-ChatInputBorder",
          ["Enabled"] = true,
          ["Revision"] = 82,
          ["semver"] = "1.0.0",
          ["Author"] = "Izimode-Azralon",
          ["Desc"] = "Add a border around the current target.",
          ["Prio"] = 99,
          ["version"] = 1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Target Border",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Player Logon"] =
              "function()\n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Thin Arrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_thin_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 15,\n        height = 12,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color =  {0.36, 0.73, 1, 0.9},\n    }    \n    \nend",
          },
          ["Time"] = 1722356440,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "https://wago.io/4rFUVdRiH/1",
          ["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_thin_right_64",
          ["Enabled"] = true,
          ["Revision"] = 61,
          ["semver"] = "1.0.0",
          ["Author"] = "Xitobel-Saurfang",
          ["Desc"] = "Adds a single thin arrow to target indicator options.",
          ["Prio"] = 99,
          ["version"] = 1,
          ["PlaterCore"] = 1,
          ["Options"] = {
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Arrow Thin Target",
      },
      {
          ["OptionsValues"] = {
          },
          ["HooksTemp"] = {
          },
          ["Hooks"] = {
              ["Nameplate Created"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
              ["Initialization"] =
              "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 10 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
              ["Player Logon"] =
              "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          },
          ["Time"] = 1722370104,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "https://wago.io/mULsbUUxJ/13",
          ["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
          ["Enabled"] = true,
          ["Revision"] = 195,
          ["semver"] = "1.0.12",
          ["Author"] = "Viash-Thrall",
          ["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
          ["Prio"] = 99,
          ["version"] = 13,
          ["PlaterCore"] = 1,
          ["Options"] = {
              {
                  ["Type"] = 4,
                  ["Key"] = "formatAuraTimers",
                  ["Value"] = true,
                  ["Name"] = "Format Aura Timers",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "formatBuffSpecialTimers",
                  ["Value"] = true,
                  ["Name"] = "Format Buff Special Timers",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "",
              },
          },
          ["LastHookEdited"] = "",
          ["Name"] = "Detailed Time Format",
      },
      {
          ["OptionsValues"] = {
              ["midScale"] = 1,
              ["lowScale"] = 0.8999999761581421,
          },
          ["HooksTemp"] = {
          },
          ["UID"] = "0x6366dbeb1fda6285",
          ["Hooks"] = {
              ["Leave Combat"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
              ["Nameplate Added"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
              ["Initialization"] =
              "function (modTable)\n    \n    -- 1 = mid prio, 2 = low prio\n    \n    modTable[\"npcIDs\"] = {\n        -- Something\n        [\"211306\"] = 2, -- (Tindral) Roots\n        [\"214441\"] = 2, -- (Tindral) Treants\n        [\"174773\"] = 2, -- Spiteful (M+ Affix)\n        \n        -- Temple of the Jade Serpent\n        [\"62358\"] = 2, -- Corrupt Droplet\n        [\"200126\"] = 1, -- Fallen Waterspeaker\n        [\"65317\"] = 1, -- Xiang\n        [\"59547\"] = 1, --Jiang\n        [\"58319\"] = 2, --Lesser Sha\n        [\"59598\"] = 2, --Lesser Sha\n        [\"59553\"] = 1, --The Songbird Queen\n        [\"59545\"] = 2, --Golden Beetle\n        [\"59544\"] = 1, --The Nodding Tiger\n        [\"59552\"] = 1, --The Crybaby Hozen\n        [\"200131\"] = 1, --Sha-Touched Guardian\n        [\"57109\"] = 2, --Minion of Doubt\n        [\"200388\"] = 2, --Malformed Sha\n        [\"200387\"] = 1, --Shambling Infester\n        \n        --The Nokhud Offensive\n        [\"192803\"] = 2, --War Ohuna\n        [\"195265\"] = 1, --Stormcaller Arynga\n        --[\"194317\"] = 1, --Stormcaller Boroo\n        [\"194315\"] = 1, --Stormcaller Solongo\n        [\"194316\"] = 1, --Stormcaller Zarii\n        [\"192794\"] = 2, --Nokhud Beastmaster\n        [\"192796\"] = 1, --Nokhud Hornsounder\n        [\"192789\"] = 2, --Nokhud Longbow\n        [\"192800\"] = 1, --Nokhud Lancemaster\n        [\"191847\"] = 1, --Nokhud Plainstomper\n        --[\"192791\"] = 1, --Nokhud Warspear\n        [\"194898\"] = 2, --Primalist Arcblade\n        [\"194895\"] = 2, --Unstable Squall\n        [\"194896\"] = 2, --Primal Stormshield\n        [\"194897\"] = 2, --Stormsurge Totem\n        [\"195579\"] = 2, --Primal Gust\n        [\"195696\"] = 1, --Primalist Thunderbeast\n        [\"195855\"] = 2, --Risen Warrior\n        [\"195875\"] = 2, --Desecrated Bakar\n        [\"196645\"] = 2, --Desecrated Bakar\n        [\"195878\"] = 1, --Ukhel Beastcaller\n        [\"195876\"] = 2, --Descecrated Ohuna\n        --[\"195877\"] = 1, -- Risen Mystic\n        [\"195851\"] = 1, --Ukhel Deathspeaker\n        [\"195927\"] = 1, --Soulharvester Galtmaa (same)\n        [\"195928\"] = 1, --Soulharvester Duuren (same)\n        [\"195929\"] = 1, --Soulharvester Tumen (same)\n        [\"195930\"] = 1, --Soulharvester Mandakh (same)\n        [\"193553\"] = 2, --Nokhud Warhound\n        [\"193555\"] = 2, --Nokhud Villager (female)\n        [\"186643\"] = 2, --Nokhud Villager (male)\n        [\"193544\"] = 2, --Nokhud Houndsman\n        [\"193565\"] = 1, --Nokhud Defender\n        [\"193457\"] = 1, --Balara\n        [\"196263\"] = 2, --Nokhud Neophyte\n        [\"199325\"] = 2, --Nokhud Stormcaller\n        [\"196484\"] = 2, --Nokhud Stormcaller\n        [\"199294\"] = 2, --Nokhud Stormcaster\n        [\"199320\"] = 2, --Nokhud Warspear (RP version)\n        [\"199321\"] = 2, --Nokhud Warspear (RP version)\n        \n        --Court of Stars\n        [\"105703\"] = 2, --Mana Wyrm,\n        [\"104251\"] = 1, --Duskwatch Sentry\n        [\"104246\"] = 1, --Duskwatch Guard\n        [\"111563\"] = 1, --Duskwatch Guard\n        [\"105705\"] = 1, --Bound Energy\n        [\"104295\"] = 2, --Blazing Imp\n        --[\"105715\"] = 1, --Watchful Inquisitor\n        [\"104277\"] = 2, --Legion Hound\n        [\"104300\"] = 1, --Shadow Mistress\n        \n        --Shadowmoon Burial Grounds\n        [\"75715\"] = 1, --Reanimated Ritual Bones\n        [\"75451\"] = 2, --Defiled Spirit (non-casting)\n        [\"75506\"] = 1, --Shadowmoon Loyalist\n        [\"77006\"] = 2, --Corpse Skitterling\n        --[\"76446\"] = 2, --Subjugated Enslaver\n        [\"76444\"] = 2, --Subjugated Soul\n        --[\"75979\"] = 1, --Exhumed Spirit\n        --[\"75459\"] = 1, --Plagued Bat\n        \n        --Algeth'ar Academy\n        [\"196642\"] = 2, --Hungry Lasher\n        [\"197398\"] = 2, --Hungry Lasher\n        [\"197219\"] = 1, --Vile Lasher\n        [\"192329\"] = 2, --Territorial Eagle\n        [\"196694\"] = 2, --Arcane Forager\n        [\"196671\"] = 1, --Arcane Ravager\n        [\"196577\"] = 2, --Spellbound Battleaxe\n        [\"197904\"] = 2, --Spellbound Battleaxe\n        [\"196798\"] = 1, --Corrupted Manafiend\n        [\"196045\"] = 1, --Corrupted Manafiend\n        [\"196200\"] = 2, --Algeth'ar Echoknight\n        [\"196202\"] = 1, --Spectral Invoker\n        [\"196203\"] = 2, --Ethereal Restorer\n        \n        --The Azure Vault\n        [\"191313\"] = 2, --Bubbling Sapling\n        --[\"191164\"] = 1, --Arcane Tender\n        --[\"196115\"] = 1, --Arcane Tender\n        [\"196559\"] = 2, --Volatile Sapling\n        [\"187155\"] = 1, --Rune Seal Keeper\n        [\"187154\"] = 1, --Unstable Curator\n        [\"196116\"] = 1, --Crystal Fury\n        [\"196117\"] = 2, --Crystal Thrasher\n        [\"186740\"] = 2, --Arcane Construct\n        [\"189555\"] = 2, --Arcane Attendant\n        [\"190510\"] = 2, --Vault Guard\n        [\"191739\"] = 1, --Scalebane Liutenant\n        [\"187246\"] = 2, --Nullmagic Hornswog\n        [\"187242\"] = 2, --Tarasek Looter\n        [\"187240\"] = 1, --Draconid Breaker\n        \n        --Halls of Valor\n        [\"97087\"] = 2, --Valajar Champion\n        [\"95842\"] = 1, --Valajar Thundercaller\n        [\"96574\"] = 1, --Stormforged Sentinel\n        [\"95832\"] = 2, --Valajar Shieldmaiden\n        [\"101639\"] = 2, --Valajar Shieldmaiden\n        [\"101637\"] = 1, --Valajar Aspirant\n        [\"97197\"] = 1, --Valajar Purifier\n        [\"96640\"] = 1, --Valajar Marksman\n        [\"96611\"] = 2, --Angehoof Bull\n        [\"99922\"] = 2, --Ebonclaw Packmate\n        [\"96608\"] = 2, --Ebonclaw Worg\n        [\"97068\"] = 1, --Storm Drake\n        \n        --Ruby Life Pools\n        [\"188011\"] = 2, --Primal Terrasentry\n        [\"188067\"] = 2, --Flashfrost Chillweaver\n        [\"188244\"] = 1, --Primal Juggernaut\n        [\"189893\"] = 2, --Infused Whelp\n        [\"187894\"] = 2, --Infused Whelp\n        [\"187897\"] = 1, --Defier Draghar\n        [\"194622\"] = 2, --Scorchling\n        [\"190205\"] = 2, --Scorchling\n        [\"197698\"] = 1, --Thunderhead\n        [\"190034\"] = 1, --Blazebound Destroyer\n        [\"190207\"] = 1, --Primalist Cinderweaver\n        [\"197697\"] = 1, --Flamegullet\n        [\"197509\"] = 2, --Primal Thundercloud\n        [\"197982\"] = 2, --Storm Warrior\n        \n        --The Underrot\n        [\"131402\"] = 2, --Underrot Tick\n        [\"131436\"] = 1, --Chosen Blood Matron\n        [\"133663\"] = 1, --Fanatical Headhunter\n        [\"133852\"] = 2, --Living Rot\n        [\"130909\"] = 1, --Fetid Maggot\n        [\"133836\"] = 2, --Reanimated Guardian\n        [\"134284\"] = 1, --Fallen Deathspeaker\n        [\"135169\"] = 2, --Spirit Drain Totem\n        [\"138281\"] = 1, --Faceless Corruptor\n        [\"137458\"] = 2, --Rotting Spore\n        \n        --Freehold\n        [\"126928\"] = 2, --Irontide Corsair\n        [\"126918\"] = 1, --Irontide Crackshot\n        [\"128551\"] = 2, --Irontide Mastiff\n        [\"129602\"] = 1, --Irontide Enforcer\n        [\"127119\"] = 2, --Freehold Deckhand\n        [\"130521\"] = 2, --Freehold Deckhand\n        [\"129550\"] = 2, --Bilge Rat Padfoot\n        [\"129526\"] = 2, --Bilge Rat Swabby\n        [\"129548\"] = 2, --Blacktooth Brute\n        [\"130522\"] = 2, --Freehold Shipmate\n        [\"127124\"] = 2, --Freehold Barhand\n        [\"129559\"] = 2, --Cutwater Duelist\n        [\"130404\"] = 1, --Vermin Trapper\n        [\"126497\"] = 2, --Shiprat\n        [\"130024\"] = 2, --Soggy Shiprat\n        [\"129527\"] = 1, --Bilge Rat Buccaneer\n        [\"130011\"] = 2, --Irontide Buccaneer\n        [\"129599\"] = 2, --Cutwater Knife Juggler\n        [\"129547\"] = 2, --Blacktooth Knuckleduster\n        [\"129529\"] = 2, --Blacktooth Scrapper\n        [\"129601\"] = 2, --Cutwater Harpooner\n        [\"130400\"] = 1, --Irontide Crusher\n        [\"127019\"] = 2, --Target Dummy\n        [\"130012\"] = 2, --Irontide Ravager\n        [\"127111\"] = 1, --Irontide Oarsman\n        [\"127106\"] = 2, --Irontide Officer\n        \n        --Neltharion's Lair\n        [\"96247\"] = 2, --Vileshard Crawler\n        --[\"91006\"] = 1, --Rockback Gnasher\n        [\"98406\"] = 1, --Embershard Scorpion\n        [\"91001\"] = 1, --Tarspitter Lurker\n        [\"101438\"] = 1, --Vileshard Chunk\n        [\"105636\"] = 2, --Understone Drudge\n        [\"105720\"] = 2, --Understone Drudge\n        [\"92350\"] = 2, --Understone Drudge\n        [\"92610\"] = 2, --Understone Drummer\n        [\"92387\"] = 2, --Drums of War\n        [\"91332\"] = 1, --Stoneclaw Hunter\n        [\"90997\"] = 1, --Mightstone Breaker\n        [\"113998\"] = 1, --Mightstone Breaker\n        [\"94224\"] = 2, --Petrifying Totem\n        [\"90998\"] = 1, --Blightshard Shaper\n        [\"101437\"] = 2, --Burning Geode\n        [\"102430\"] = 2, --Tarspitter SLug\n        [\"102253\"] = 2, --Understone Demolisher\n        \n        --Vortex Pinnacle\n        [\"205326\"] = 2, --Gust Soldier\n        [\"45477\"] = 2, --Gust Soldier\n        [\"45915\"] = 1, --Armored Mistral\n        --[\"45912\"] = 1, --Wild Vortex\n        [\"45704\"] = 2, --Lurking Tempest\n        [\"204337\"] = 2, --Lurking Tempest\n        [\"45917\"] = 1, --Cloud Prince\n        [\"45924\"] = 1, --Turbulent Squall\n        [\"45922\"] = 2, --Empyrean Assassin\n        [\"45926\"] = 2, --Servant of Asaad\n        [\"45928\"] = 1, --Executor of the Caliph\n        [\"45932\"] = 2, --Skyfall Star\n        [\"45930\"] = 1, --Minister of Air\n        \n        --Halls of Infusion\n        [\"190345\"] = 2, --Primalist Geomancer\n        [\"190348\"] = 2, --Primalist Ravager\n        --[\"190340\"] = 1, --Refti Defender\n        [\"190342\"] = 1, --Containment Apperatus\n        [\"196712\"] = 1, --Nullification Device\n        [\"190366\"] = 2, --Curious Swoglet\n        [\"195399\"] = 2, --Curious Swoglet\n        [\"199037\"] = 1, --Primalist Shocktrooper\n        [\"190370\"] = 1, --Squallbringer Cyraz\n        [\"190923\"] = 2, --Zephyrling\n        [\"190373\"] = 1, --Primalist Galesinger\n        [\"190371\"] = 1, --Primalist Earthshaker\n        [\"190407\"] = 2, --Aqua Rager\n        [\"190359\"] = 2, --Skulking Zealot\n        \n        --Neltharus\n        [\"192787\"] = 2, --Qalashi Spinecrusher\n        [\"193293\"] = 2, --Qalashi Warden\n        [\"192781\"] = 2, --Ore Elemental\n        [\"192786\"] = 2, --Qalashi Plunderer\n        [\"189227\"] = 1, --Qalashi Hunter\n        [\"189247\"] = 2, --Tamed Phoenix\n        [\"189266\"] = 2, --Qalashi Trainee\n        [\"189470\"] = 2, --Lava Flare\n        [\"189472\"] = 2, --Qalashi Lavabearer\n        [\"189467\"] = 2, --Qalashi Bonesplitter\n        [\"189471\"] = 1, --Qalashi Blacksmith\n        [\"193291\"] = 1, --Apex Blazewing\n        [\"194389\"] = 2, --Lava Spawn\n        \n        --Uldaman\n        [\"184134\"] = 2, --Scavenging Leaper\n        [\"184020\"] = 1, --Hulking Berserker\n        [\"184019\"] = 2, --Burly Rock-Thrower\n        [\"186664\"] = 2, --Stonevault Ambusher\n        [\"186696\"] = 2, --Quaking Totem\n        [\"184130\"] = 2, --Earthen Custodian\n        [\"184319\"] = 1, --Refti Custodian\n        [\"184107\"] = 1, --Runic Protector\n        [\"184303\"] = 2, --Skittering Crawler\n        [\"184300\"] = 1, --Ebonstone Golem\n        [\"184131\"] = 1, --Earthen Guardian\n        [\"184331\"] = 1, --Infinite Timereaver\n        [\"191311\"] = 2, --Infinite Whelp\n        \n        --Brackenhide\n        [\"185529\"] = 1, --Bracken Warscourge\n        [\"185508\"] = 2, --Claw Fighter\n        [\"186206\"] = 2, --Cruel Bonecrusher\n        [\"186191\"] = 1, --Decay Speaker\n        [\"185534\"] = 1, --Bonebolt Hunter\n        [\"185691\"] = 2, --Vicious Hyena\n        [\"186122\"] = 2, --Rira Hackclaw\n        [\"186124\"] = 1, --Gashtooth\n        [\"186208\"] = 1, --Rotbow Stalker\n        [\"186284\"] = 2, --Gutchewer Bear\n        [\"194745\"] = 2, --Rotfang Hyena\n        [\"186227\"] = 2, --Monstrous Decay\n        [\"189299\"] = 2, --Decaying Slime\n        [\"194330\"] = 2, --Decaying Slime\n        [\"192481\"] = 2, --Decaying Slime\n        [\"194273\"] = 2, --Witherling\n        [\"187238\"] = 2, --Witherling\n        [\"187231\"] = 2, --Wither Biter\n        [\"187315\"] = 2, --Disease Slasher\n        [\"191243\"] = 2, --Wild Lasher\n        [\"189363\"] = 2, --Infected Lasher\n        [\"189531\"] = 1, --Decayed Elder\n        [\"186226\"] = 1, --Fetid Rotsinger\n        --[\"186229\"] = 1, --Wilted Oak\n        [\"194373\"] = 2, --Witherling\n        [\"199916\"] = 2, --Decaying Slime\n        [\"208994\"] = 2, --Infected Lasher\n        [\"186220\"] = 1, --Brackenhide Shaper\n        \n        --Dawn of the Infinite\n        [\"205408\"] = 1, --Infinite Timeslicer\n        [\"205435\"] = 2, --Epoch Ripper\n        [\"206066\"] = 1, --Timestream Leech\n        [\"206065\"] = 2, --Interval\n        [\"206068\"] = 2, --Temporal Fusion\n        [\"206063\"] = 2, --Temporal Deviation\n        [\"204536\"] = 2, --Blight Chunk\n        [\"205691\"] = 2, --Iridikron's Creation\n        [\"205151\"] = 2, --Tyr's Vanguard\n        [\"201223\"] = 1, --Infinite Twilight Magus\n        [\"205365\"] = 2, --Time-Lost Tidehunter\n        [\"205366\"] = 2, --Time-Lost Wakethrasher\n        [\"205363\"] = 1, --Infinite Waveshaper\n        [\"205408\"] = 1, --Infinite Timeslicer\n        [\"205408\"] = 1, --Infinite Timeslicer\n        [\"205408\"] = 1, --Infinite Timeslicer\n        [\"205408\"] = 1, --Infinite Timeslicer\n        \n        --Waycrest Manor\n        [\"135240\"] = 2, --Soul Essence\n        [\"131585\"] = 2, --Enthralled Guard\n        [\"135052\"] = 2, --Blight Toad\n        [\"131677\"] = 1, --Heartsbane Runeweaver\n        [\"135474\"] = 1, --Dreadwing Raven\n        [\"131587\"] = 1, --Bewitched Captain\n        [\"131858\"] = 2, --Thornguard\n        [\"135329\"] = 1, --Matron Bryndle\n        [\"134024\"] = 2, --Devouring Maggot\n        [\"134041\"] = 2, --Infected Peasant\n        [\"135048\"] = 2, --Gorestained Piglet\n        [\"135234\"] = 2, --Diseased Mastiff\n        [\"131847\"] = 2, --Waycrest Reveler\n        [\"131586\"] = 1, --Banquet Steward\n        [\"131669\"] = 2, --Jagged Hound\n        [\"139269\"] = 2, --Gloom Horror\n        \n        --Darkheart Thicket\n        [\"95772\"] = 2, --Frenzied Nightclaw\n        [\"101679\"] = 2, --Dreadsoul Poisoner\n        [\"95779\"] = 1, --Festerhide Grizzly\n        [\"95766\"] = 1, --Crazed Razorbeak\n        [\"99360\"] = 2, --Vilethorn Blossom\n        [\"99358\"] = 1, --Rotheart Dryad\n        [\"100529\"] = 2, --Hatespawn Slime\n        [\"101074\"] = 2, --Hatespawn Whelpling\n        [\"100526\"] = 1, --Tormented Bloodseeker\n        [\"99365\"] = 2, --Taintheart Stalker\n        [\"100539\"] = 2, --Taintheart Deadeye\n        [\"102277\"] = 2, --Tainted Deadeye Decoy\n        \n        --Black Rook Hold\n        [\"98366\"] = 2, --Ghostly Retainer\n        [\"98368\"] = 1, --Ghostly Protector\n        [\"98677\"] = 2, --Rook Spiderling\n        [\"98681\"] = 1, --Rook Spinner\n        [\"98691\"] = 1, --Risen Scout\n        [\"98243\"] = 1, --Soul-Torn Champion\n        [\"101839\"] = 2, --Risen Companion\n        [\"101549\"] = 2, --Arcane Minion\n        [\"98275\"] = 1, --Risen Archer\n        [\"98900\"] = 2, --Wyrmtongue Trickster\n        [\"98792\"] = 2, --Wyrmtongue Scavenger\n        [\"98810\"] = 1, --Wrathguard Bladelord\n        [\"102781\"] = 2, --Fel Bat Pup\n        [\"98813\"] = 2, --Bloodscent Felhound\n        [\"98813\"] = 2, --Bloodscent Felhound\n        [\"98813\"] = 2, --Bloodscent Felhound\n        [\"98813\"] = 2, --Bloodscent Felhound\n        [\"102094\"] = 1, --Risen Swordsman\n        \n        --Atal'Dazar\n        [\"128435\"] = 2, --Toxic Saurid\n        [\"122972\"] = 1, --Dazar'ai Augur\n        [\"122971\"] = 2, --Dazar'a Juggernaut\n        [\"127799\"] = 2, --Dazar'ai Honor Guard\n        [\"128455\"] = 1, --T'lonja\n        [\"129552\"] = 1, --Monzumi\n        [\"127879\"] = 1, --Shieldbearer of Zul\n        [\"122970\"] = 2, --Shadowblade Stalker\n        [\"127757\"] = 2, --Reanimated Honor Guard\n        [\"122984\"] = 1, --Dazar'ai Colossus\n        \n        --Everbloom\n        [\"81985\"] = 1, --Everbloom Cultivator\n        [\"81864\"] = 2, --Dreadpetal\n        [\"86372\"] = 1, --Melded Berserker\n        [\"212981\"] = 2, --Hapless Assistant\n        \n        --Throne of the Tides\n        [\"40584\"] = 2, --Naz'jar Invader\n        [\"212681\"] = 2, --Vicious Snap Dragon\n        [\"39616\"] = 2, --Naz'jar Invader\n        [\"39960\"] = 2, --Deep Murloc Drudge\n        [\"40577\"] = 1, --Naz'jar Sentinel\n        [\"213607\"] = 2, --Deep Sea Murloc\n        [\"40633\"] = 1, --Naz'jar Honorguard\n        [\"40935\"] = 2, --Gilgoblin Hunter\n        [\"40923\"] = 2, -- Unstable Corruption\n        [\"40925\"] = 1, -- Tainted Sentry\n        [\"213942\"] = 1, -- Sludge\n        [\"212778\"] = 2, --Minion of Ghur'sha\n        [\"40936\"] = 1, --Faceless Watcher\n        \n    }\n    \nend",
          },
          ["Time"] = 1711197516,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
                  ["Enabled"] = true,
                  ["party"] = true,
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["spec"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["affix"] = {
              },
          },
          ["url"] = "https://wago.io/Ru_9FLVjI/24",
          ["Icon"] = 1041231,
          ["Enabled"] = true,
          ["Revision"] = 2343,
          ["semver"] = "1.0.23",
          ["Author"] = "Causese-Valdrakken",
          ["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
          ["Prio"] = 99,
          ["version"] = 24,
          ["PlaterCore"] = 1,
          ["Name"] = "Priority based scaling",
          ["Options"] = {
              {
                  ["Type"] = 4,
                  ["Key"] = "scale",
                  ["Value"] = true,
                  ["Name"] = "Enable Scaling",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Allows nameplates to scale based on priority.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Set scaling value for mid priority.",
                  ["Min"] = 0,
                  ["Key"] = "midScale",
                  ["Value"] = 0.75,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Mid prio",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 1,
                  ["Desc"] = "Set scaling value for low priority.",
                  ["Min"] = 0,
                  ["Key"] = "lowScale",
                  ["Value"] = 0.5,
                  ["Fraction"] = true,
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Name"] = "Low prio",
              },
              {
                  ["Type"] = 4,
                  ["Key"] = "color",
                  ["Value"] = false,
                  ["Name"] = "Enable Coloring",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
                  ["Desc"] = "Allows nameplates to be colored based on priority.",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "midColor",
                  ["Value"] = {
                      1,
                      0.92941182851791,
                      0,
                      1,
                  },
                  ["Name"] = "Mid prio",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Set color for mid priority.",
              },
              {
                  ["Type"] = 1,
                  ["Key"] = "lowColor",
                  ["Value"] = {
                      0.49803924560547,
                      0.49803924560547,
                      0.49803924560547,
                      1,
                  },
                  ["Name"] = "Low prio",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "Set color for low priority.",
              },
          },
          ["LastHookEdited"] = "",
      },
      {
          ["OptionsValues"] = {
              ["willBeReadyColor"] = {
                  0.7764706611633301,
                  0.6980392336845398,
                  0.4666666984558106,
                  1,
              },
              ["readyColor"] = {
                  0.3960784673690796,
                  0.6509804129600525,
                  0.3960784673690796,
                  1,
              },
          },
          ["LastHookEdited"] = "Cast Start",
          ["UID"] = "0x661711831a72796",
          ["Hooks"] = {
              ["Cast Start"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        local spec = GetSpecialization()\n        envTable.spec = spec\n        if envTable.class ~= 9 then\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Special warlock logic because warlocks are special\n            if envTable.spec == 1 or envTable.spec == 3 then -- Aff & Destro\n                if IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else -- Look for Grimoire of Sacrifice\n                    local i, found = 1, false\n                    local buff = UnitBuff(\"player\", i)\n                    while buff do\n                        if buff == \"Grimoire of Sacrifice\" then\n                            found = true\n                            buff = nil\n                        else\n                            i = i + 1\n                            buff = UnitBuff(\"player\", i)\n                        end\n                    end\n                    if found == true then\n                        envTable.kickId = 132409\n                    else \n                        envTable.kickId = nil\n                    end\n                end\n            elseif spec == 2 then -- Demo\n                if IsSpellKnown(89766, true) then -- Felguard\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n        \n        -- Check for cast\n        local name, _, _, _, _, _, _, notInterruptible = UnitCastingInfo(unitId)\n        if name == nil then    \n            -- Check for channel\n            name, _, _, _, _, _, notInterruptible = UnitChannelInfo(unitId)\n            if name == nil then return end\n        end\n        envTable.notInterruptible = notInterruptible\n        \n        local InterruptCooldown = nil\n        if envTable.kickId ~= nil then\n            InterruptCooldown = GetSpellCooldown(envTable.kickId)\n        else\n            InterruptCooldown = 1\n        end\n        \n        if envTable.notInterruptible then\n            --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n        elseif InterruptCooldown > 0 then\n            --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n        else\n            --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n        end\n    end\nend",
              ["Cast Update"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        -- Check if the unit is still casting (did someone else interrupt?)\n        local name = UnitCastingInfo(unitId) or UnitChannelInfo(unitId)\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        \n        if envTable.kickId ~= nil then\n            interruptCooldownStart, duration = GetSpellCooldown(envTable.kickId)\n            local interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        if envTable.notInterruptible then\n            --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n        elseif  interruptCooldownStart > 0 then\n            --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n        elseif  interruptCooldownStart < 0 then\n            --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"willBeReadyColor\"])\n        else\n            --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n            Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n        end\n    end\n    \n    \nend",
              ["Enter Combat"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
              ["Initialization"] =
              "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = nil}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\nend",
              ["Constructor"] =
              "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\nend",
          },
          ["Time"] = 1722438505,
          ["LoadConditions"] = {
              ["talent"] = {
              },
              ["group"] = {
              },
              ["class"] = {
              },
              ["map_ids"] = {
              },
              ["role"] = {
              },
              ["pvptalent"] = {
              },
              ["affix"] = {
              },
              ["race"] = {
              },
              ["encounter_ids"] = {
              },
              ["spec"] = {
              },
          },
          ["url"] = "https://wago.io/2I4rmdjFQ/1",
          ["Icon"] = 608940,
          ["Enabled"] = true,
          ["Revision"] = 92,
          ["semver"] = "1.0.0",
          ["Author"] = "Maeliin-Silvermoon",
          ["Desc"] =
          "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
          ["Prio"] = 99,
          ["Name"] = "Interrupt CD Indicator",
          ["PlaterCore"] = 1,
          ["version"] = 1,
          ["HooksTemp"] = {
          },
          ["Options"] = {
              {
                  ["Type"] = 1,
                  ["Name"] = "Kick Ready Color",
                  ["Value"] = {
                      0,
                      1,
                      0,
                      1,
                  },
                  ["Key"] = "readyColor",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "The color of the cast bar border when your interrupt is ready.",
              },
              {
                  ["Type"] = 1,
                  ["Name"] = "Will Be Ready Color",
                  ["Value"] = {
                      1,
                      0.35686275362968,
                      0,
                      1,
                  },
                  ["Key"] = "willBeReadyColor",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
                  ["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
              },
              {
                  ["Type"] = 2,
                  ["Max"] = 2,
                  ["Desc"] =
                  "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
                  ["Min"] = 0,
                  ["Fraction"] = true,
                  ["Value"] = 0.3,
                  ["Name"] = "Reation Time",
                  ["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
                  ["Key"] = "reactionTime",
              },
          },
      },
  },
  ["aura_cooldown_show_swipe"] = false,
  ["extra_icon_caster_outline"] = "OUTLINE",
  ["auras_per_row_amount2"] = 4,
  ["aura_width"] = 15,
  ["health_statusbar_bgcolor"] = {
      0.04313725605607,
      0.04313725605607,
      0.04313725605607,
      0.70000001788139,
  },
  ["cast_audiocues"] = {
      [384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372223] = "nil",
      [427176] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [266209] = "nil",
      [269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [413607] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [369365] = "nil",
      [395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [422541] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [448105] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [257397] = "nil",
      [384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [396665] = "nil",
      [377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [253544] = "Interface\\Addons\\SharedMedia_MyMedia\\sound\\Interrupt.ogg",
      [382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [371875] = "nil",
      [426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [388392] = "nil",
      [272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [427616] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [199151] = "nil",
      [434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Jump.ogg",
      [321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [209628] = "nil",
      [387950] = "nil",
      [377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [384978] = "nil",
      [416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [156718] = "nil",
      [388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [411994] = "nil",
      [372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [376171] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
      [265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
      [369675] = "nil",
  },
  ["pet_width_scale"] = 0.99999994039536,
  ["extra_icon_timer_outline"] = "OUTLINE",
  ["quick_hide"] = true,
  ["extra_icon_timer_size"] = 7,
  ["target_highlight_color"] = {
      1,
      1,
  },
  ["target_shady_enabled"] = false,
  ["aura_grow_direction"] = 3,
  ["health_animation_time_dilatation"] = 2.8699998855591,
  ["extra_icon_stack_outline"] = "OUTLINE",
  ["resources"] = {
      ["y_offset"] = 1,
      ["y_offset_target"] = 9,
      ["scale"] = 0.79999995231628,
  },
  ["click_space"] = {
      135,
      38,
  },
  ["extra_icon_auras"] = {
      277242,
  },
  ["castbar_target_font"] = "Cronix-Bold",
  ["castbar_target_outline"] = "NONE",
  ["range_check_in_range_or_target_alpha_friendlies"] = 1,
  ["cast_statusbar_spark_alpha"] = 0.699999988079071,
  ["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
  ["cast_statusbar_fadein_time"] = 0.019999999552965,
  ["cast_statusbar_spark_color"] = {
      0.98823529411765,
      [3] = 0.94117647058823,
  },
  ["hover_highlight_alpha"] = 0.199999988079071,
  ["pet_height_scale"] = 0.99999994039536,
  ["aura_x_offset"] = 0,
  ["first_run3"] = true,
  ["ui_parent_scale_tune"] = 1.6700000762939,
  ["ui_parent_buff_strata"] = "LOW",
  ["healthbar_framelevel"] = 0,
  ["profile_name"] = "croniX Nameplates",
  ["health_statusbar_bgtexture"] = "Cronix",
  ["indicator_raidmark_anchor"] = {
      ["y"] = 0.4000015258789063,
      ["x"] = 14,
      ["side"] = 10,
  },
  ["tank"] = {
      ["colors"] = {
          ["pulling_from_tank"] = {
              nil,
              0.56078433990479,
              0.55686277151108,
          },
          ["aggro"] = {
              0,
              0.71372550725937,
          },
          ["nocombat"] = {
              0.61568629741669,
              0.18823531270027,
              0.21176472306252,
          },
          ["noaggro"] = {
              0.61568629741669,
              0.18823531270027,
              0.21176472306252,
          },
          ["pulling"] = {
              0.69019609689713,
              0.6235294342041,
              1,
          },
      },
  },
  ["aura_tracker"] = {
      ["buff_tracked"] = {
          ["280001"] = true,
          ["297133"] = true,
          ["328501"] = false,
          ["227931"] = true,
          ["163689"] = true,
          ["233210"] = true,
          ["329181"] = false,
      },
      ["debuff"] = {
          224991,
          277950,
      },
      ["debuff_banned"] = {
          ["331653"] = true,
          ["330911"] = true,
          ["299151"] = true,
          ["327980"] = true,
          ["284678"] = true,
          ["281242"] = true,
          ["342938"] = true,
          ["340007"] = true,
      },
      ["debuff_tracked"] = {
          ["341408"] = true,
          ["324652"] = false,
          ["342938"] = true,
          ["281242"] = true,
      },
      ["buff_banned"] = {
          ["333553"] = true,
          ["281242"] = true,
          ["61573"] = true,
          ["206150"] = true,
          ["61574"] = true,
      },
  },
  ["extra_icon_caster_font"] = "Cronix",
  ["castbar_target_show"] = true,
  ["cast_statusbar_color_interrupted"] = {
      0.61568629741669,
      0.18823531270027,
      0.21176472306252,
  },
  ["cast_statusbar_color"] = {
      0,
      0.7137255072593689,
      1,
      1,
  },
  ["update_throttle"] = 0.099999994039536,
  ["tocversion"] = 110000,
  ["castbar_icon_show"] = false,
  ["indicator_extra_raidmark"] = false,
  ["extra_icon_timer_font"] = "Cronix-Bold",
  ["not_affecting_combat_alpha"] = 0.3999999761581421,
  ["use_health_animation"] = true,
  ["target_highlight_alpha"] = 1,
  ["news_frame"] = {
      ["PlaterNewsFrame"] = {
          ["scale"] = 1,
      },
  },
  ["focus_as_target_alpha"] = true,
  ["aura_breakline_space"] = 4,
  ["target_shady_alpha"] = 0.2999999821186066,
  ["aura_sort"] = true,
  ["tap_denied_color"] = {
      0.60392159223557,
      0.60392159223557,
      0.60392159223557,
  },
  ["bossmod_icons_anchor"] = {
      ["y"] = 0,
  },
  ["target_highlight_height"] = 18,
  ["indicator_raidmark_scale"] = 0.699999988079071,
  ["castbar_framelevel"] = 0,
  ["version"] = 38,
  ["first_run2"] = true,
  ["aura_width2"] = 15,
  ["plater_resources_scale"] = 0.8,
  ["extra_icon_auras_mine"] = {
      ["277242"] = false,
      ["224991"] = true,
  },
  ["buff_frame_anchor_and_size_migrated"] = true,
  ["patch_version"] = 36,
  ["no_spellname_length_limit"] = true,
  ["range_check_in_range_or_target_alpha"] = 1,
  ["aura_timer_text_size"] = 7,
  ["ui_parent_cast_strata"] = "DIALOG",
  ["number_region_first_run"] = true,
  ["cast_statusbar_color_channeling"] = {
      0.37647062540054,
      nil,
      0.48235297203064,
      0.96000000089407,
  },
  ["aura2_grow_direction"] = 3,
  ["aura_alpha"] = 0.84999996423721,
  ["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
  ["extra_icon_height"] = 8,
  ["range_check_alpha_friendlies"] = 0.7999999523162842,
  ["aura_show_enrage"] = true,
  ["dps"] = {
      ["colors"] = {
          ["solo"] = {
              0,
              0.71372550725937,
          },
          ["notontank"] = {
              0.69019609689713,
              0.6235294342041,
          },
          ["aggro"] = {
              0.61568629741669,
              0.18823531270027,
              0.21176472306252,
          },
          ["noaggro"] = {
              0,
              0.71372550725937,
          },
          ["pulling"] = {
              nil,
              0.56078433990479,
              0.55686277151108,
          },
      },
  },
  ["indicator_elite"] = false,
  ["plater_resources_anchor"] = {
      ["y"] = 40,
      ["x"] = 0,
      ["side"] = 8,
  },
  ["castbar_target_text_size"] = 6,
  ["captured_casts"] = {
      [384524] = {
          ["encounterName"] = "Watcher Irideus",
          ["source"] = "Watcher Irideus",
          ["npcID"] = 189719,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2615,
      },
      [376683] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["npcID"] = 186151,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2580,
      },
      [375727] = {
          ["encounterName"] = "Chrono-Lord Deios",
          ["encounterID"] = 2559,
          ["npcID"] = 184125,
      },
      [412129] = {
          ["source"] = "Lerai, Timesworn Maiden",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 205152,
      },
      [265568] = {
          ["source"] = "Befouled Spirit",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 133685,
      },
      [372222] = {
          ["encounterName"] = "Azureblade",
          ["source"] = "Azureblade",
          ["npcID"] = 186739,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2585,
      },
      [372223] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Bonetender",
          ["npcID"] = 189265,
      },
      [427176] = {
          ["encounterName"] = "The Darkness",
          ["source"] = "Wriggling Darkspawn",
          ["encounterID"] = 2788,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 213008,
      },
      [199151] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Angerhoof Bull",
          ["npcID"] = 96611,
      },
      [323137] = {
          ["encounterName"] = "Ingra Maloch",
          ["encounterID"] = 2397,
          ["npcID"] = 164804,
      },
      [372735] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Flashfrost Earthshaper",
          ["npcID"] = 187969,
      },
      [266209] = {
          ["source"] = "Fallen Deathspeaker",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 134284,
      },
      [269843] = {
          ["encounterName"] = "Unbound Abomination",
          ["source"] = "Unbound Abomination",
          ["encounterID"] = 2123,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 133007,
      },
      [388801] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Risen Warrior",
          ["npcID"] = 195855,
      },
      [426860] = {
          ["encounterName"] = "Anub'ikkaj",
          ["source"] = "Anub'ikkaj",
          ["npcID"] = 211089,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2838,
      },
      [260894] = {
          ["encounterName"] = "Elder Leaxa",
          ["source"] = "Elder Leaxa",
          ["encounterID"] = 2111,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 131318,
      },
      [375351] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Glacial Proto-Dragon",
          ["npcID"] = 190403,
      },
      [387910] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Algeth'ar Echoknight",
          ["npcID"] = 196200,
      },
      [226406] = {
          ["source"] = "Emberhusk Dominator",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 102287,
      },
      [183088] = {
          ["source"] = "Mightstone Breaker",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 90997,
      },
      [412200] = {
          ["source"] = "Time-Lost Aerobot",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 205723,
      },
      [197974] = {
          ["encounterName"] = "Ilysanna Ravencrest",
          ["source"] = "Soul-torn Vanguard",
          ["npcID"] = 100485,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1833,
      },
      [384597] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Warden",
          ["npcID"] = 193293,
      },
      [370764] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Crystal Fury",
          ["npcID"] = 196116,
      },
      [201226] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Bloodtainted Fury",
          ["npcID"] = 100531,
      },
      [377204] = {
          ["encounterName"] = "Warlord Sargha",
          ["source"] = "Warlord Sargha",
          ["npcID"] = 189901,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2611,
      },
      [412012] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Infinite Timeslicer",
          ["npcID"] = 205408,
      },
      [427376] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Gilgoblin Hunter",
          ["npcID"] = 40935,
      },
      [413607] = {
          ["source"] = "Infinite Twilight Magus",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 201223,
      },
      [432031] = {
          ["encounterName"] = "Ki'katal the Harvester",
          ["source"] = "Bloodworker",
          ["encounterID"] = 2901,
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 215968,
      },
      [369365] = {
          ["npcID"] = 184132,
      },
      [395184] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Blazing Proto-Dragon",
          ["npcID"] = 185883,
      },
      [372107] = {
          ["encounterName"] = "Kokia Blazehoof",
          ["source"] = "Kokia Blazehoof",
          ["npcID"] = 189232,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2606,
      },
      [257870] = {
          ["source"] = "Irontide Buccaneer",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 130011,
      },
      [256627] = {
          ["source"] = "Scrimshaw Enforcer",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 129374,
      },
      [333477] = {
          ["npcID"] = 163621,
      },
      [439621] = {
          ["encounterName"] = "Fangs of the Queen",
          ["source"] = "Nx",
          ["npcID"] = 216648,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2908,
      },
      [451543] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Eye of the Queen",
          ["npcID"] = 220003,
      },
      [376892] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["npcID"] = 186151,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2580,
      },
      [367521] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Bonebolt Hunter",
          ["npcID"] = 185534,
      },
      [200784] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Wyrmtongue Scavenger",
          ["npcID"] = 98792,
      },
      [257426] = {
          ["source"] = "Irontide Enforcer",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 129602,
      },
      [419351] = {
          ["source"] = "Infinite Saboteur",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 208438,
      },
      [269029] = {
          ["encounterName"] = "Dread Captain Lockwood",
          ["source"] = "Dread Captain Lockwood",
          ["encounterID"] = 2109,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 129208,
      },
      [369563] = {
          ["encounterName"] = "The Lost Dwarves",
          ["encounterID"] = 2555,
          ["npcID"] = 184581,
      },
      [200913] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Wyrmtongue Scavenger",
          ["npcID"] = 98792,
      },
      [422541] = {
          ["source"] = "Shuffling Horror",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 208456,
      },
      [448105] = {
          ["encounterName"] = "Drahga Shadowburner",
          ["source"] = "Valiona",
          ["npcID"] = 40320,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1048,
      },
      [422414] = {
          ["source"] = "Shuffling Horror",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 208456,
      },
      [427323] = {
          ["source"] = "Cursed Stormrider",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 212786,
      },
      [429427] = {
          ["source"] = "Cursedforge Stoneshaper",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 214066,
      },
      [412215] = {
          ["source"] = "Spurlok, Timesworn Sentinel",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 205158,
      },
      [257397] = {
          ["source"] = "Irontide Bonesaw",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 129788,
      },
      [375943] = {
          ["encounterName"] = "Balakar Khan",
          ["source"] = "Balakar Khan",
          ["npcID"] = 186151,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2580,
      },
      [448619] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Careless Hopgoblin",
          ["npcID"] = 223423,
      },
      [372311] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Trainee",
          ["npcID"] = 189266,
      },
      [449130] = {
          ["source"] = "Forge Loader",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 213343,
      },
      [437719] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Primalist Galesinger",
          ["npcID"] = 190373,
      },
      [333488] = {
          ["encounterName"] = "Amarth, The Harvester",
          ["encounterID"] = 2388,
          ["npcID"] = 163157,
      },
      [369061] = {
          ["encounterName"] = "Emberon",
          ["encounterID"] = 2558,
          ["npcID"] = 184422,
      },
      [396665] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Magmas",
          ["npcID"] = 199027,
      },
      [377732] = {
          ["npcID"] = 184319,
      },
      [408141] = {
          ["encounterName"] = "Blight of Galakrond",
          ["source"] = "Dazhak",
          ["encounterID"] = 2668,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 201788,
      },
      [388060] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Stinkbreath",
          ["npcID"] = 187033,
      },
      [450854] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Deathscreamer Iken'tak",
          ["npcID"] = 211263,
      },
      [369573] = {
          ["encounterName"] = "The Lost Dwarves",
          ["encounterID"] = 2555,
          ["npcID"] = 184581,
      },
      [164357] = {
          ["encounterName"] = "Witherbark",
          ["source"] = "Witherbark",
          ["npcID"] = 81522,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1746,
      },
      [375439] = {
          ["encounterName"] = "Magmatusk",
          ["source"] = "Magmatusk",
          ["npcID"] = 181861,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2610,
      },
      [378818] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Thaumaturge",
          ["npcID"] = 192788,
      },
      [411012] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Young Storm Dragon",
          ["npcID"] = 45919,
      },
      [386660] = {
          ["encounterName"] = "Leymor",
          ["source"] = "Leymor",
          ["npcID"] = 186644,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2582,
      },
      [253544] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Dazar'ai Confessor",
          ["npcID"] = 122973,
      },
      [382708] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Warden",
          ["npcID"] = 193293,
      },
      [200345] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Risen Archer",
          ["npcID"] = 98275,
      },
      [188169] = {
          ["encounterName"] = "Rokmora",
          ["source"] = "Rokmora",
          ["encounterID"] = 1790,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 91003,
      },
      [385578] = {
          ["encounterName"] = "Azureblade",
          ["source"] = "Azureblade",
          ["npcID"] = 186739,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2585,
      },
      [375251] = {
          ["encounterName"] = "Magmatusk",
          ["source"] = "Magmatusk",
          ["npcID"] = 181861,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2610,
      },
      [428293] = {
          ["encounterName"] = "Lady Naz'jar",
          ["source"] = "Naz'jar Honor Guard",
          ["npcID"] = 40633,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1045,
      },
      [382712] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Wilted Oak",
          ["npcID"] = 186229,
      },
      [374361] = {
          ["encounterName"] = "Echo of Doragosa",
          ["source"] = "Echo of Doragosa",
          ["npcID"] = 190609,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2565,
      },
      [371875] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Trainee",
          ["npcID"] = 189266,
      },
      [200630] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Mindshattered Screecher",
          ["npcID"] = 95769,
      },
      [169929] = {
          ["encounterName"] = "Yalnu",
          ["source"] = "Flourishing Ancient",
          ["npcID"] = 84400,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1756,
      },
      [426893] = {
          ["source"] = "Quartermaster Koratite",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 209801,
      },
      [384868] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Nokhud Longbow",
          ["npcID"] = 192789,
      },
      [268202] = {
          ["encounterName"] = "Gorak Tul",
          ["source"] = "Deathtouched Slaver",
          ["npcID"] = 135552,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2117,
      },
      [375065] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Fetid Rotsinger",
          ["npcID"] = 186226,
      },
      [397931] = {
          ["source"] = "Minion of Doubt",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 57109,
      },
      [440218] = {
          ["encounterName"] = "Fangs of the Queen",
          ["source"] = "Vx",
          ["encounterID"] = 2908,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 216649,
      },
      [255567] = {
          ["source"] = "T'lonja",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 128455,
      },
      [434824] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Ixin",
          ["npcID"] = 217531,
      },
      [447395] = {
          ["encounterName"] = "Forgemaster Throngus",
          ["source"] = "Forgemaster Throngus",
          ["npcID"] = 40177,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1050,
      },
      [397889] = {
          ["source"] = "Fallen Waterspeaker",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 200126,
      },
      [257756] = {
          ["source"] = "Bilge Rat Buccaneer",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 129527,
      },
      [409492] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Afflicted Soul",
          ["npcID"] = 204773,
      },
      [453161] = {
          ["source"] = "Hulking Bloodguard",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 216338,
      },
      [253517] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Dazar'ai Confessor",
          ["npcID"] = 122973,
      },
      [331718] = {
          ["npcID"] = 171772,
      },
      [226296] = {
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 91000,
      },
      [388392] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Unruly Textbook",
          ["npcID"] = 196044,
      },
      [88308] = {
          ["encounterName"] = "Altairus",
          ["source"] = "Altairus",
          ["npcID"] = 43873,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1041,
      },
      [427025] = {
          ["encounterName"] = "The Darkness",
          ["source"] = "The Darkness",
          ["encounterID"] = 2788,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 208747,
      },
      [376170] = {
          ["encounterName"] = "Decatriarch Wratheye",
          ["source"] = "Decatriarch Wratheye",
          ["npcID"] = 186121,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2569,
      },
      [183465] = {
          ["source"] = "Tarspitter Lurker",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 91001,
      },
      [377034] = {
          ["encounterName"] = "Crawth",
          ["source"] = "Crawth",
          ["npcID"] = 191736,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2564,
      },
      [372201] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Irontorch",
          ["npcID"] = 189464,
      },
      [387629] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Desecrated Ohuna",
          ["npcID"] = 195876,
      },
      [367484] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Claw Fighter",
          ["npcID"] = 185508,
      },
      [265019] = {
          ["source"] = "Chosen Blood Matron",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 131436,
      },
      [320822] = {
          ["npcID"] = 165222,
      },
      [387950] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Caldera Stomper",
          ["npcID"] = 187919,
      },
      [426645] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Naz'jar Ravager",
          ["npcID"] = 212673,
      },
      [87618] = {
          ["encounterName"] = "Asaad",
          ["source"] = "Asaad",
          ["npcID"] = 43875,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1042,
      },
      [321968] = {
          ["npcID"] = 164929,
      },
      [375327] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Subterranean Proto-Dragon",
          ["npcID"] = 190404,
      },
      [209628] = {
          ["encounterName"] = "Advisor Melandrus",
          ["source"] = "Advisor Melandrus",
          ["npcID"] = 104218,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1870,
      },
      [448640] = {
          ["source"] = "Cursedforge Honor Guard",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 214264,
      },
      [377559] = {
          ["encounterName"] = "Treemouth",
          ["source"] = "Treemouth",
          ["npcID"] = 186120,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2568,
      },
      [374563] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Dazzling Dragonfly",
          ["npcID"] = 190362,
      },
      [382277] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Balara",
          ["npcID"] = 193457,
      },
      [253721] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Shieldbearer of Zul",
          ["npcID"] = 127879,
      },
      [427359] = {
          ["isChanneled"] = true,
          ["source"] = "Arathi Footman",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 206705,
      },
      [441119] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Bee Wrangler",
          ["npcID"] = 210264,
      },
      [382233] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Batak",
          ["npcID"] = 193462,
      },
      [169179] = {
          ["encounterName"] = "Yalnu",
          ["source"] = "Yalnu",
          ["npcID"] = 83846,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1756,
      },
      [462216] = {
          ["source"] = "Twilight Flamerender",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 224240,
      },
      [369465] = {
          ["npcID"] = 186420,
      },
      [431494] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Nightfall Tactician",
          ["npcID"] = 213934,
      },
      [369409] = {
          ["npcID"] = 184130,
      },
      [200768] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Crazed Razorbeak",
          ["npcID"] = 95766,
      },
      [411994] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Infinite Chronoweaver",
          ["npcID"] = 205384,
      },
      [449090] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Careless Hopgoblin",
          ["npcID"] = 223423,
      },
      [396812] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Spellbound Scepter",
          ["npcID"] = 196576,
      },
      [375348] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Gusting Proto-Dragon",
          ["npcID"] = 190401,
      },
      [445457] = {
          ["encounterName"] = "Skardyn Monstrosity",
          ["source"] = "Voidstone Monstrosity",
          ["encounterID"] = 2836,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 207207,
      },
      [388911] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Spellbound Battleaxe",
          ["npcID"] = 196577,
      },
      [340160] = {
          ["npcID"] = 173655,
      },
      [432198] = {
          ["encounterName"] = "Brewmaster Aldryr",
          ["source"] = "Brew Master Aldryr",
          ["npcID"] = 210271,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2900,
      },
      [200291] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Risen Scout",
          ["npcID"] = 98691,
      },
      [156718] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Monstrous Corpse Spider",
          ["npcID"] = 76104,
      },
      [388976] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Arcane Ravager",
          ["npcID"] = 196671,
      },
      [384978] = {
          ["encounterName"] = "Umbrelskul",
          ["source"] = "Umbrelskul",
          ["npcID"] = 186738,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2584,
      },
      [434779] = {
          ["encounterName"] = "Orator Krix'vizk",
          ["source"] = "Orator Krix'vizk",
          ["npcID"] = 216619,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2907,
      },
      [391118] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Scalebane Lieutenant",
          ["npcID"] = 191739,
      },
      [323496] = {
          ["npcID"] = 165872,
      },
      [324323] = {
          ["npcID"] = 165919,
      },
      [443500] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Royal Swarmguard",
          ["npcID"] = 220197,
      },
      [427342] = {
          ["source"] = "Arathi Footman",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 206705,
      },
      [88194] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Young Storm Dragon",
          ["npcID"] = 45919,
      },
      [373742] = {
          ["encounterName"] = "Chargath, Bane of Scales",
          ["source"] = "Chargath, Bane of Scales",
          ["npcID"] = 189340,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2613,
      },
      [385536] = {
          ["isChanneled"] = true,
          ["event"] = "SPELL_CAST_SUCCESS",
          ["source"] = "Primalist Flamedancer",
          ["npcID"] = 190206,
      },
      [432520] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Nightfall Darkcaster",
          ["npcID"] = 213893,
      },
      [369828] = {
          ["npcID"] = 184023,
      },
      [200261] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Soul-Torn Champion",
          ["npcID"] = 98243,
      },
      [432967] = {
          ["source"] = "Sentry Stagshell",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 216340,
      },
      [383823] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Nokhud Hornsounder",
          ["npcID"] = 192796,
      },
      [385958] = {
          ["encounterName"] = "Vexamus",
          ["source"] = "Vexamus",
          ["npcID"] = 194181,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2562,
      },
      [188404] = {
          ["encounterName"] = "Hymdall",
          ["source"] = "Storm Drake",
          ["npcID"] = 97788,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 1805,
      },
      [433662] = {
          ["isChanneled"] = true,
          ["source"] = "Reinforced Drone",
          ["event"] = "SPELL_CAST_SUCCESS",
          ["npcID"] = 216856,
      },
      [372087] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Defier Draghar",
          ["npcID"] = 187897,
      },
      [416139] = {
          ["encounterName"] = "Chrono-Lord Deios",
          ["source"] = "Chrono-Lord Deios",
          ["encounterID"] = 2673,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 199000,
      },
      [412505] = {
          ["source"] = "Tyr's Vanguard",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 205151,
      },
      [226304] = {
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 91000,
      },
      [391723] = {
          ["source"] = "Flamegullet",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 197697,
      },
      [260793] = {
          ["encounterName"] = "Cragmaw the Infested",
          ["source"] = "Cragmaw the Infested",
          ["encounterID"] = 2118,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 131817,
      },
      [193505] = {
          ["source"] = "Vileshard Hulk",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 91000,
      },
      [393432] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Refti Defender",
          ["npcID"] = 190340,
      },
      [265721] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Terrorachna",
          ["npcID"] = 200349,
      },
      [272609] = {
          ["source"] = "Faceless Corruptor",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 138281,
      },
      [265372] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Bewitched Captain",
          ["npcID"] = 131587,
      },
      [427616] = {
          ["source"] = "Unruly Stormrook",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 207186,
      },
      [381525] = {
          ["encounterName"] = "Kyrakka and Erkhart Stormvein",
          ["source"] = "Kyrakka",
          ["npcID"] = 190484,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2623,
      },
      [372225] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Qalashi Bonesplitter",
          ["npcID"] = 189467,
      },
      [451496] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Eye of the Queen",
          ["npcID"] = 220003,
      },
      [435012] = {
          ["encounterName"] = "Anub'zekt",
          ["source"] = "Anub'zekt",
          ["encounterID"] = 2906,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 215405,
      },
      [376171] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Primalist Icecaller",
          ["npcID"] = 190377,
      },
      [257862] = {
          ["encounterName"] = "Hadal Darkfathom",
          ["source"] = "Hadal Darkfathom",
          ["encounterID"] = 2099,
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 128651,
      },
      [413529] = {
          ["source"] = "Timestream Anomaly",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 199749,
      },
      [377383] = {
          ["event"] = "SPELL_CAST_START",
          ["source"] = "Alpha Eagle",
          ["npcID"] = 192333,
      },
      [265540] = {
          ["source"] = "Fetid Maggot",
          ["event"] = "SPELL_CAST_START",
          ["npcID"] = 130909,
      },
      [369675] = {
          ["npcID"] = 184022,
      },
      [374839] = {
          ["encounterName"] = "Forgemaster Gorek",
          ["source"] = "Forgemaster Gorek",
          ["npcID"] = 189478,
          ["event"] = "SPELL_CAST_START",
          ["encounterID"] = 2612,
      },
  },
  ["plater_resources_personal_bar"] = false,
  ["extra_icon_show_purge_border"] = {
      nil,
      0.71372550725937,
  },
  ["cast_statusbar_spark_width"] = 20,
}

function private:PlaterImport()
  PlaterDB["profiles"][private.Profilename] = PlaterDump

  local name = UnitName("PLAYER")
  local realm = GetRealmName()
  --if we overwrite the PlaterDB to add our profiles it will forget which profile to load
  --set the profile key manually so the correct profile is selected after a reload
  PlaterDB["profileKeys"][name.." - "..realm] = private.Profilename
  
  PluginInstallStepComplete.message = "Plater Profile Imported"
  PluginInstallStepComplete:Show()
end